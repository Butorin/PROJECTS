
LCD_ST7789_SPI_DMA_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000327c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003448  08003448  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003448  08003448  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003448  08003448  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003448  08003448  00013448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011430  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002689  00000000  00000000  0003146c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  00034c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000323a  00000000  00000000  00035cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a31  00000000  00000000  00038f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebf4f  00000000  00000000  0004b963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001378b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a64  00000000  00000000  00137904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003410 	.word	0x08003410

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003410 	.word	0x08003410

080001ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__NVIC_GetPriorityGrouping+0x18>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	0a1b      	lsrs	r3, r3, #8
 80001f6:	f003 0307 	and.w	r3, r3, #7
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	e000ed00 	.word	0xe000ed00

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	; (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	; (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	; 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f003 0307 	and.w	r3, r3, #7
 80002aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	f1c3 0307 	rsb	r3, r3, #7
 80002b2:	2b04      	cmp	r3, #4
 80002b4:	bf28      	it	cs
 80002b6:	2304      	movcs	r3, #4
 80002b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	3304      	adds	r3, #4
 80002be:	2b06      	cmp	r3, #6
 80002c0:	d902      	bls.n	80002c8 <NVIC_EncodePriority+0x30>
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	3b03      	subs	r3, #3
 80002c6:	e000      	b.n	80002ca <NVIC_EncodePriority+0x32>
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	f04f 32ff 	mov.w	r2, #4294967295
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	43da      	mvns	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	401a      	ands	r2, r3
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002e0:	f04f 31ff 	mov.w	r1, #4294967295
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	43d9      	mvns	r1, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	4313      	orrs	r3, r2
         );
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3724      	adds	r7, #36	; 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LL_DMA_SetDataTransferDirection+0x44>)
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	461a      	mov	r2, r3
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000320:	4908      	ldr	r1, [pc, #32]	; (8000344 <LL_DMA_SetDataTransferDirection+0x44>)
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	440b      	add	r3, r1
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4619      	mov	r1, r3
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	440b      	add	r3, r1
 800032e:	4619      	mov	r1, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4313      	orrs	r3, r2
 8000334:	600b      	str	r3, [r1, #0]
}
 8000336:	bf00      	nop
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	08003428 	.word	0x08003428

08000348 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <LL_DMA_SetMode+0x44>)
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	4413      	add	r3, r2
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	4413      	add	r3, r2
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000368:	4908      	ldr	r1, [pc, #32]	; (800038c <LL_DMA_SetMode+0x44>)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	440b      	add	r3, r1
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	440b      	add	r3, r1
 8000376:	4619      	mov	r1, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4313      	orrs	r3, r2
 800037c:	600b      	str	r3, [r1, #0]
}
 800037e:	bf00      	nop
 8000380:	3714      	adds	r7, #20
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	08003428 	.word	0x08003428

08000390 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <LL_DMA_SetPeriphIncMode+0x44>)
 800039e:	68bb      	ldr	r3, [r7, #8]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4413      	add	r3, r2
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80003b0:	4908      	ldr	r1, [pc, #32]	; (80003d4 <LL_DMA_SetPeriphIncMode+0x44>)
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	440b      	add	r3, r1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	440b      	add	r3, r1
 80003be:	4619      	mov	r1, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4313      	orrs	r3, r2
 80003c4:	600b      	str	r3, [r1, #0]
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	08003428 	.word	0x08003428

080003d8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80003e4:	4a0d      	ldr	r2, [pc, #52]	; (800041c <LL_DMA_SetMemoryIncMode+0x44>)
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	4413      	add	r3, r2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	461a      	mov	r2, r3
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	4413      	add	r3, r2
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80003f8:	4908      	ldr	r1, [pc, #32]	; (800041c <LL_DMA_SetMemoryIncMode+0x44>)
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	440b      	add	r3, r1
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	440b      	add	r3, r1
 8000406:	4619      	mov	r1, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4313      	orrs	r3, r2
 800040c:	600b      	str	r3, [r1, #0]
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	08003428 	.word	0x08003428

08000420 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000420:	b480      	push	{r7}
 8000422:	b085      	sub	sp, #20
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LL_DMA_SetPeriphSize+0x44>)
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	4413      	add	r3, r2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4413      	add	r3, r2
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000440:	4908      	ldr	r1, [pc, #32]	; (8000464 <LL_DMA_SetPeriphSize+0x44>)
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	440b      	add	r3, r1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4619      	mov	r1, r3
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	440b      	add	r3, r1
 800044e:	4619      	mov	r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4313      	orrs	r3, r2
 8000454:	600b      	str	r3, [r1, #0]
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	08003428 	.word	0x08003428

08000468 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <LL_DMA_SetMemorySize+0x44>)
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	4413      	add	r3, r2
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	461a      	mov	r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	4413      	add	r3, r2
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000488:	4908      	ldr	r1, [pc, #32]	; (80004ac <LL_DMA_SetMemorySize+0x44>)
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	440b      	add	r3, r1
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	4619      	mov	r1, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	440b      	add	r3, r1
 8000496:	4619      	mov	r1, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4313      	orrs	r3, r2
 800049c:	600b      	str	r3, [r1, #0]
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	08003428 	.word	0x08003428

080004b0 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	4413      	add	r3, r2
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80004d0:	4908      	ldr	r1, [pc, #32]	; (80004f4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	440b      	add	r3, r1
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	440b      	add	r3, r1
 80004de:	4619      	mov	r1, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	600b      	str	r3, [r1, #0]
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	08003428 	.word	0x08003428

080004f8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000504:	4a0d      	ldr	r2, [pc, #52]	; (800053c <LL_DMA_SetChannelSelection+0x44>)
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	4413      	add	r3, r2
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4413      	add	r3, r2
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8000518:	4908      	ldr	r1, [pc, #32]	; (800053c <LL_DMA_SetChannelSelection+0x44>)
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	440b      	add	r3, r1
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	440b      	add	r3, r1
 8000526:	4619      	mov	r1, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4313      	orrs	r3, r2
 800052c:	600b      	str	r3, [r1, #0]
}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	08003428 	.word	0x08003428

08000540 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <LL_DMA_DisableFifoMode+0x3c>)
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	4413      	add	r3, r2
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <LL_DMA_DisableFifoMode+0x3c>)
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	440a      	add	r2, r1
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	4611      	mov	r1, r2
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	440a      	add	r2, r1
 8000568:	f023 0304 	bic.w	r3, r3, #4
 800056c:	6153      	str	r3, [r2, #20]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	08003428 	.word	0x08003428

08000580 <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <LL_RCC_HSE_EnableCSS+0x1c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <LL_RCC_HSE_EnableCSS+0x1c>)
 800058a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40023800 	.word	0x40023800

080005a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_RCC_HSE_Enable+0x1c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <LL_RCC_HSE_Enable+0x1c>)
 80005aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <LL_RCC_HSE_IsReady+0x24>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80005d0:	bf0c      	ite	eq
 80005d2:	2301      	moveq	r3, #1
 80005d4:	2300      	movne	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800

080005e8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <LL_RCC_SetSysClkSource+0x24>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	f023 0203 	bic.w	r2, r3, #3
 80005f8:	4904      	ldr	r1, [pc, #16]	; (800060c <LL_RCC_SetSysClkSource+0x24>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	608b      	str	r3, [r1, #8]
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40023800 	.word	0x40023800

08000610 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <LL_RCC_GetSysClkSource+0x18>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f003 030c 	and.w	r3, r3, #12
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <LL_RCC_SetAHBPrescaler+0x24>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800063c:	4904      	ldr	r1, [pc, #16]	; (8000650 <LL_RCC_SetAHBPrescaler+0x24>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	608b      	str	r3, [r1, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40023800 	.word	0x40023800

08000654 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <LL_RCC_SetAPB1Prescaler+0x24>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000664:	4904      	ldr	r1, [pc, #16]	; (8000678 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4313      	orrs	r3, r2
 800066a:	608b      	str	r3, [r1, #8]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800068c:	4904      	ldr	r1, [pc, #16]	; (80006a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	608b      	str	r3, [r1, #8]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40023800 	.word	0x40023800

080006a4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <LL_RCC_SetTIMPrescaler+0x28>)
 80006ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80006b6:	4905      	ldr	r1, [pc, #20]	; (80006cc <LL_RCC_SetTIMPrescaler+0x28>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40023800 	.word	0x40023800

080006d0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <LL_RCC_PLL_Enable+0x1c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <LL_RCC_PLL_Enable+0x1c>)
 80006da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <LL_RCC_PLL_IsReady+0x24>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	b2db      	uxtb	r3, r3
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800072c:	4013      	ands	r3, r2
 800072e:	68f9      	ldr	r1, [r7, #12]
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	4311      	orrs	r1, r2
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	0192      	lsls	r2, r2, #6
 8000738:	430a      	orrs	r2, r1
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800073c:	4313      	orrs	r3, r2
 800073e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000748:	4904      	ldr	r1, [pc, #16]	; (800075c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	4313      	orrs	r3, r2
 800074e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40023800 	.word	0x40023800
 8000760:	ffbf8000 	.word	0xffbf8000

08000764 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800076e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000770:	4907      	ldr	r1, [pc, #28]	; (8000790 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4313      	orrs	r3, r2
 8000776:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800077a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4013      	ands	r3, r2
 8000780:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40023800 	.word	0x40023800

08000794 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800079e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a0:	4907      	ldr	r1, [pc, #28]	; (80007c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4013      	ands	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800

080007c4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4013      	ands	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800

080007f4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <LL_SYSCFG_SetEXTISource+0x68>)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	3302      	adds	r3, #2
 8000806:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	43db      	mvns	r3, r3
 8000810:	ea02 0103 	and.w	r1, r2, r3
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	fa93 f3a3 	rbit	r3, r3
 8000820:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 800082c:	2320      	movs	r3, #32
 800082e:	e003      	b.n	8000838 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fab3 f383 	clz	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	fa03 f202 	lsl.w	r2, r3, r2
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <LL_SYSCFG_SetEXTISource+0x68>)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	430a      	orrs	r2, r1
 8000848:	3302      	adds	r3, #2
 800084a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800084e:	bf00      	nop
 8000850:	371c      	adds	r7, #28
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40013800 	.word	0x40013800

08000860 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <LL_FLASH_SetLatency+0x24>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f023 020f 	bic.w	r2, r3, #15
 8000870:	4904      	ldr	r1, [pc, #16]	; (8000884 <LL_FLASH_SetLatency+0x24>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	600b      	str	r3, [r1, #0]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40023c00 	.word	0x40023c00

08000888 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <LL_FLASH_GetLatency+0x18>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f003 030f 	and.w	r3, r3, #15
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <LL_PWR_DisableOverDriveMode+0x1c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <LL_PWR_DisableOverDriveMode+0x1c>)
 80008ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40007000 	.word	0x40007000

080008c4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80008d4:	4904      	ldr	r1, [pc, #16]	; (80008e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	600b      	str	r3, [r1, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40007000 	.word	0x40007000

080008ec <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40007000 	.word	0x40007000

08000914 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f023 0210 	bic.w	r2, r3, #16
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	431a      	orrs	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	605a      	str	r2, [r3, #4]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d01c      	beq.n	80009a6 <LL_TIM_OC_DisableFast+0x4a>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d017      	beq.n	80009a2 <LL_TIM_OC_DisableFast+0x46>
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	2b10      	cmp	r3, #16
 8000976:	d012      	beq.n	800099e <LL_TIM_OC_DisableFast+0x42>
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	2b40      	cmp	r3, #64	; 0x40
 800097c:	d00d      	beq.n	800099a <LL_TIM_OC_DisableFast+0x3e>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000984:	d007      	beq.n	8000996 <LL_TIM_OC_DisableFast+0x3a>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800098c:	d101      	bne.n	8000992 <LL_TIM_OC_DisableFast+0x36>
 800098e:	2305      	movs	r3, #5
 8000990:	e00a      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x4c>
 8000992:	2306      	movs	r3, #6
 8000994:	e008      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x4c>
 8000996:	2304      	movs	r3, #4
 8000998:	e006      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x4c>
 800099a:	2303      	movs	r3, #3
 800099c:	e004      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x4c>
 800099e:	2302      	movs	r3, #2
 80009a0:	e002      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x4c>
 80009a2:	2301      	movs	r3, #1
 80009a4:	e000      	b.n	80009a8 <LL_TIM_OC_DisableFast+0x4c>
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3318      	adds	r3, #24
 80009ae:	4619      	mov	r1, r3
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LL_TIM_OC_DisableFast+0x84>)
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	440b      	add	r3, r1
 80009b8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <LL_TIM_OC_DisableFast+0x88>)
 80009c2:	5ccb      	ldrb	r3, [r1, r3]
 80009c4:	4619      	mov	r1, r3
 80009c6:	2304      	movs	r3, #4
 80009c8:	408b      	lsls	r3, r1
 80009ca:	43db      	mvns	r3, r3
 80009cc:	401a      	ands	r2, r3
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	601a      	str	r2, [r3, #0]

}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	08003430 	.word	0x08003430
 80009e4:	08003438 	.word	0x08003438

080009e8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d01c      	beq.n	8000a32 <LL_TIM_OC_EnablePreload+0x4a>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d017      	beq.n	8000a2e <LL_TIM_OC_EnablePreload+0x46>
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2b10      	cmp	r3, #16
 8000a02:	d012      	beq.n	8000a2a <LL_TIM_OC_EnablePreload+0x42>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2b40      	cmp	r3, #64	; 0x40
 8000a08:	d00d      	beq.n	8000a26 <LL_TIM_OC_EnablePreload+0x3e>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a10:	d007      	beq.n	8000a22 <LL_TIM_OC_EnablePreload+0x3a>
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a18:	d101      	bne.n	8000a1e <LL_TIM_OC_EnablePreload+0x36>
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e00a      	b.n	8000a34 <LL_TIM_OC_EnablePreload+0x4c>
 8000a1e:	2306      	movs	r3, #6
 8000a20:	e008      	b.n	8000a34 <LL_TIM_OC_EnablePreload+0x4c>
 8000a22:	2304      	movs	r3, #4
 8000a24:	e006      	b.n	8000a34 <LL_TIM_OC_EnablePreload+0x4c>
 8000a26:	2303      	movs	r3, #3
 8000a28:	e004      	b.n	8000a34 <LL_TIM_OC_EnablePreload+0x4c>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e002      	b.n	8000a34 <LL_TIM_OC_EnablePreload+0x4c>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <LL_TIM_OC_EnablePreload+0x4c>
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3318      	adds	r3, #24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LL_TIM_OC_EnablePreload+0x80>)
 8000a40:	5cd3      	ldrb	r3, [r2, r3]
 8000a42:	440b      	add	r3, r1
 8000a44:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <LL_TIM_OC_EnablePreload+0x84>)
 8000a4e:	5ccb      	ldrb	r3, [r1, r3]
 8000a50:	4619      	mov	r1, r3
 8000a52:	2308      	movs	r3, #8
 8000a54:	408b      	lsls	r3, r1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	08003430 	.word	0x08003430
 8000a6c:	08003438 	.word	0x08003438

08000a70 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a82:	f023 0307 	bic.w	r3, r3, #7
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	605a      	str	r2, [r3, #4]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08b      	sub	sp, #44	; 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa93 f3a3 	rbit	r3, r3
 8000afa:	613b      	str	r3, [r7, #16]
  return result;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000b06:	2320      	movs	r3, #32
 8000b08:	e003      	b.n	8000b12 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	fab3 f383 	clz	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2103      	movs	r1, #3
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	fa93 f3a3 	rbit	r3, r3
 8000b28:	61fb      	str	r3, [r7, #28]
  return result;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b34:	2320      	movs	r3, #32
 8000b36:	e003      	b.n	8000b40 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	fa01 f303 	lsl.w	r3, r1, r3
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	601a      	str	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	372c      	adds	r7, #44	; 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b08b      	sub	sp, #44	; 0x2c
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	fa93 f3a3 	rbit	r3, r3
 8000b74:	613b      	str	r3, [r7, #16]
  return result;
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000b80:	2320      	movs	r3, #32
 8000b82:	e003      	b.n	8000b8c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fab3 f383 	clz	r3, r3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2103      	movs	r1, #3
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	401a      	ands	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	fa93 f3a3 	rbit	r3, r3
 8000ba2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	e003      	b.n	8000bba <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	fab3 f383 	clz	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	6879      	ldr	r1, [r7, #4]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	60da      	str	r2, [r3, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	372c      	adds	r7, #44	; 0x2c
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	041a      	lsls	r2, r3, #16
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	619a      	str	r2, [r3, #24]
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f000 fe0b 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 f80d 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 f9f3 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c02:	f000 f9d9 	bl	8000fb8 <MX_DMA_Init>
  MX_I2C3_Init();
 8000c06:	f000 f85d 	bl	8000cc4 <MX_I2C3_Init>
  MX_SPI3_Init();
 8000c0a:	f000 f89b 	bl	8000d44 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000c0e:	f000 f935 	bl	8000e7c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c12:	f000 f965 	bl	8000ee0 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <main+0x24>

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff fe1f 	bl	8000860 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000c22:	bf00      	nop
 8000c24:	f7ff fe30 	bl	8000888 <LL_FLASH_GetLatency>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d1fa      	bne.n	8000c24 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000c2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c32:	f7ff fe47 	bl	80008c4 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 8000c36:	f7ff fe35 	bl	80008a4 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSE_Enable();
 8000c3a:	f7ff fcb1 	bl	80005a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000c3e:	bf00      	nop
 8000c40:	f7ff fcbe 	bl	80005c0 <LL_RCC_HSE_IsReady>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d1fa      	bne.n	8000c40 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_HSE_EnableCSS();
 8000c4a:	f7ff fc99 	bl	8000580 <LL_RCC_HSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 72, LL_RCC_PLLP_DIV_2);
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2248      	movs	r2, #72	; 0x48
 8000c52:	2104      	movs	r1, #4
 8000c54:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000c58:	f7ff fd5e 	bl	8000718 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000c5c:	f7ff fd38 	bl	80006d0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000c60:	bf00      	nop
 8000c62:	f7ff fd45 	bl	80006f0 <LL_RCC_PLL_IsReady>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d1fa      	bne.n	8000c62 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000c6c:	bf00      	nop
 8000c6e:	f7ff fe3d 	bl	80008ec <LL_PWR_IsActiveFlag_VOS>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0fa      	beq.n	8000c6e <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fcd7 	bl	800062c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000c7e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c82:	f7ff fce7 	bl	8000654 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fcf8 	bl	800067c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f7ff fcab 	bl	80005e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000c92:	bf00      	nop
 8000c94:	f7ff fcbc 	bl	8000610 <LL_RCC_GetSysClkSource>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d1fa      	bne.n	8000c94 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <SystemClock_Config+0xa8>)
 8000ca0:	f002 fb7a 	bl	8003398 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f000 fcbf 	bl	8001628 <HAL_InitTick>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cb0:	f000 fc22 	bl	80014f8 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fcf5 	bl	80006a4 <LL_RCC_SetTIMPrescaler>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	044aa200 	.word	0x044aa200

08000cc4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_I2C3_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <MX_I2C3_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000ce2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000cee:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000d02:	f001 f849 	bl	8001d98 <HAL_I2C_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000d0c:	f000 fbf4 	bl	80014f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000d14:	f001 f984 	bl	8002020 <HAL_I2CEx_ConfigAnalogFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000d1e:	f000 fbeb 	bl	80014f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_I2C3_Init+0x74>)
 8000d26:	f001 f9b7 	bl	8002098 <HAL_I2CEx_ConfigDigitalFilter>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000d30:	f000 fbe2 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000028 	.word	0x20000028
 8000d3c:	40005c00 	.word	0x40005c00
 8000d40:	000186a0 	.word	0x000186a0

08000d44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b090      	sub	sp, #64	; 0x40
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	2228      	movs	r2, #40	; 0x28
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 fb54 	bl	8003400 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
 8000d66:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8000d68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d6c:	f7ff fd12 	bl	8000794 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d70:	2004      	movs	r0, #4
 8000d72:	f7ff fcf7 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d76:	2002      	movs	r0, #2
 8000d78:	f7ff fcf4 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC12   ------> SPI3_MOSI
  PB3   ------> SPI3_SCK
  */
  GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d80:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d82:	2302      	movs	r3, #2
 8000d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000d92:	2306      	movs	r3, #6
 8000d94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d96:	463b      	mov	r3, r7
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4834      	ldr	r0, [pc, #208]	; (8000e6c <MX_SPI3_Init+0x128>)
 8000d9c:	f001 ff14 	bl	8002bc8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_SCL_Pin;
 8000da0:	2308      	movs	r3, #8
 8000da2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000da4:	2302      	movs	r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000db4:	2306      	movs	r3, #6
 8000db6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	482c      	ldr	r0, [pc, #176]	; (8000e70 <MX_SPI3_Init+0x12c>)
 8000dbe:	f001 ff03 	bl	8002bc8 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2105      	movs	r1, #5
 8000dc6:	482b      	ldr	r0, [pc, #172]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000dc8:	f7ff fb96 	bl	80004f8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000dcc:	2240      	movs	r2, #64	; 0x40
 8000dce:	2105      	movs	r1, #5
 8000dd0:	4828      	ldr	r0, [pc, #160]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000dd2:	f7ff fa95 	bl	8000300 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2105      	movs	r1, #5
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000ddc:	f7ff fb68 	bl	80004b0 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_CIRCULAR);
 8000de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de4:	2105      	movs	r1, #5
 8000de6:	4823      	ldr	r0, [pc, #140]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000de8:	f7ff faae 	bl	8000348 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2105      	movs	r1, #5
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000df2:	f7ff facd 	bl	8000390 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 8000df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dfa:	2105      	movs	r1, #5
 8000dfc:	481d      	ldr	r0, [pc, #116]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000dfe:	f7ff faeb 	bl	80003d8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_HALFWORD);
 8000e02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e06:	2105      	movs	r1, #5
 8000e08:	481a      	ldr	r0, [pc, #104]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000e0a:	f7ff fb09 	bl	8000420 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_HALFWORD);
 8000e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e12:	2105      	movs	r1, #5
 8000e14:	4817      	ldr	r0, [pc, #92]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000e16:	f7ff fb27 	bl	8000468 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <MX_SPI3_Init+0x130>)
 8000e1e:	f7ff fb8f 	bl	8000540 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e26:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e2a:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8000e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e30:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000e32:	2302      	movs	r3, #2
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000e40:	2308      	movs	r3, #8
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e44:	2300      	movs	r3, #0
 8000e46:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4808      	ldr	r0, [pc, #32]	; (8000e78 <MX_SPI3_Init+0x134>)
 8000e58:	f001 ff5a 	bl	8002d10 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_SPI3_Init+0x134>)
 8000e60:	f7ff fd58 	bl	8000914 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	3740      	adds	r7, #64	; 0x40
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	40020400 	.word	0x40020400
 8000e74:	40026000 	.word	0x40026000
 8000e78:	40003c00 	.word	0x40003c00

08000e7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f7ff fc97 	bl	80007c4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <MX_TIM1_Init+0x60>)
 8000eb2:	f001 fff1 	bl	8002e98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <MX_TIM1_Init+0x60>)
 8000eb8:	f7ff fd3f 	bl	800093a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM1_Init+0x60>)
 8000ec0:	f7ff fdd6 	bl	8000a70 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM1_Init+0x60>)
 8000ec8:	f7ff fde7 	bl	8000a9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM1_Init+0x60>)
 8000ece:	f7ff fdf7 	bl	8000ac0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40010000 	.word	0x40010000

08000ee0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b094      	sub	sp, #80	; 0x50
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2220      	movs	r2, #32
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fa7e 	bl	8003400 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff fc3d 	bl	8000794 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8000f1a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f20:	2300      	movs	r3, #0
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 209;
 8000f24:	23d1      	movs	r3, #209	; 0xd1
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000f2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f30:	4619      	mov	r1, r3
 8000f32:	481f      	ldr	r0, [pc, #124]	; (8000fb0 <MX_TIM3_Init+0xd0>)
 8000f34:	f001 ffb0 	bl	8002e98 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000f38:	481d      	ldr	r0, [pc, #116]	; (8000fb0 <MX_TIM3_Init+0xd0>)
 8000f3a:	f7ff fcfe 	bl	800093a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <MX_TIM3_Init+0xd0>)
 8000f42:	f7ff fd51 	bl	80009e8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000f46:	2360      	movs	r3, #96	; 0x60
 8000f48:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 104;
 8000f52:	2368      	movs	r3, #104	; 0x68
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <MX_TIM3_Init+0xd0>)
 8000f64:	f002 f832 	bl	8002fcc <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_TIM3_Init+0xd0>)
 8000f6c:	f7ff fcf6 	bl	800095c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000f70:	2100      	movs	r1, #0
 8000f72:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <MX_TIM3_Init+0xd0>)
 8000f74:	f7ff fd91 	bl	8000a9a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_TIM3_Init+0xd0>)
 8000f7a:	f7ff fda1 	bl	8000ac0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fbf0 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LCD_BLK_Pin;
 8000f84:	2310      	movs	r3, #16
 8000f86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LCD_BLK_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <MX_TIM3_Init+0xd4>)
 8000fa2:	f001 fe11 	bl	8002bc8 <LL_GPIO_Init>

}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000fbc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000fc0:	f7ff fbd0 	bl	8000764 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fc4:	f7ff f912 	bl	80001ec <__NVIC_GetPriorityGrouping>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff f962 	bl	8000298 <NVIC_EncodePriority>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	2010      	movs	r0, #16
 8000fda:	f7ff f933 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fde:	2010      	movs	r0, #16
 8000fe0:	f7ff f912 	bl	8000208 <__NVIC_EnableIRQ>

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001008:	2004      	movs	r0, #4
 800100a:	f7ff fbab 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800100e:	2020      	movs	r0, #32
 8001010:	f7ff fba8 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001014:	2080      	movs	r0, #128	; 0x80
 8001016:	f7ff fba5 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff fba2 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001020:	2002      	movs	r0, #2
 8001022:	f7ff fb9f 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 8001026:	2040      	movs	r0, #64	; 0x40
 8001028:	f7ff fb9c 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800102c:	2010      	movs	r0, #16
 800102e:	f7ff fb99 	bl	8000764 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001032:	2008      	movs	r0, #8
 8001034:	f7ff fb96 	bl	8000764 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin);
 8001038:	2116      	movs	r1, #22
 800103a:	48b8      	ldr	r0, [pc, #736]	; (800131c <MX_GPIO_Init+0x334>)
 800103c:	f7ff fdca 	bl	8000bd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ACP_RST_GPIO_Port, ACP_RST_Pin);
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	48b7      	ldr	r0, [pc, #732]	; (8001320 <MX_GPIO_Init+0x338>)
 8001044:	f7ff fdc6 	bl	8000bd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, RDX_Pin|WRX_DCX_Pin|LCD_DC_Pin|LCD_RES_Pin
 8001048:	f243 01b0 	movw	r1, #12464	; 0x30b0
 800104c:	48b5      	ldr	r0, [pc, #724]	; (8001324 <MX_GPIO_Init+0x33c>)
 800104e:	f7ff fdc1 	bl	8000bd4 <LL_GPIO_ResetOutputPin>
                          |LCD_CS_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, LD3_Pin|LD4_Pin);
 8001052:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001056:	48b4      	ldr	r0, [pc, #720]	; (8001328 <MX_GPIO_Init+0x340>)
 8001058:	f7ff fdbc 	bl	8000bd4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800105c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001060:	603b      	str	r3, [r7, #0]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001062:	2302      	movs	r3, #2
 8001064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8001072:	230c      	movs	r3, #12
 8001074:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001076:	463b      	mov	r3, r7
 8001078:	4619      	mov	r1, r3
 800107a:	48ac      	ldr	r0, [pc, #688]	; (800132c <MX_GPIO_Init+0x344>)
 800107c:	f001 fda4 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001080:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001084:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001086:	2302      	movs	r3, #2
 8001088:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001096:	2305      	movs	r3, #5
 8001098:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	48a3      	ldr	r0, [pc, #652]	; (800132c <MX_GPIO_Init+0x344>)
 80010a0:	f001 fd92 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80010a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010aa:	2302      	movs	r3, #2
 80010ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80010ba:	230e      	movs	r3, #14
 80010bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	489a      	ldr	r0, [pc, #616]	; (800132c <MX_GPIO_Init+0x344>)
 80010c4:	f001 fd80 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80010c8:	2301      	movs	r3, #1
 80010ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010cc:	2302      	movs	r3, #2
 80010ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80010dc:	230c      	movs	r3, #12
 80010de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80010e0:	463b      	mov	r3, r7
 80010e2:	4619      	mov	r1, r3
 80010e4:	488d      	ldr	r0, [pc, #564]	; (800131c <MX_GPIO_Init+0x334>)
 80010e6:	f001 fd6f 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80010ea:	2316      	movs	r3, #22
 80010ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010ee:	2301      	movs	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	463b      	mov	r3, r7
 8001100:	4619      	mov	r1, r3
 8001102:	4886      	ldr	r0, [pc, #536]	; (800131c <MX_GPIO_Init+0x334>)
 8001104:	f001 fd60 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001108:	f641 0358 	movw	r3, #6232	; 0x1858
 800110c:	603b      	str	r3, [r7, #0]
                          |R5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800110e:	2302      	movs	r3, #2
 8001110:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800111e:	230e      	movs	r3, #14
 8001120:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	487e      	ldr	r0, [pc, #504]	; (8001320 <MX_GPIO_Init+0x338>)
 8001128:	f001 fd4e 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001130:	2301      	movs	r3, #1
 8001132:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001140:	463b      	mov	r3, r7
 8001142:	4619      	mov	r1, r3
 8001144:	4876      	ldr	r0, [pc, #472]	; (8001320 <MX_GPIO_Init+0x338>)
 8001146:	f001 fd3f 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800114a:	2303      	movs	r3, #3
 800114c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800114e:	2302      	movs	r3, #2
 8001150:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 800115e:	2309      	movs	r3, #9
 8001160:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4872      	ldr	r0, [pc, #456]	; (8001330 <MX_GPIO_Init+0x348>)
 8001168:	f001 fd2e 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800116c:	2304      	movs	r3, #4
 800116e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	486c      	ldr	r0, [pc, #432]	; (8001330 <MX_GPIO_Init+0x348>)
 800117e:	f001 fd23 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001182:	f248 1333 	movw	r3, #33075	; 0x8133
 8001186:	603b      	str	r3, [r7, #0]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001188:	2302      	movs	r3, #2
 800118a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001194:	2300      	movs	r3, #0
 8001196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8001198:	230c      	movs	r3, #12
 800119a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119c:	463b      	mov	r3, r7
 800119e:	4619      	mov	r1, r3
 80011a0:	4861      	ldr	r0, [pc, #388]	; (8001328 <MX_GPIO_Init+0x340>)
 80011a2:	f001 fd11 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80011a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80011aa:	603b      	str	r3, [r7, #0]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011ac:	2302      	movs	r3, #2
 80011ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80011bc:	230c      	movs	r3, #12
 80011be:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	485b      	ldr	r0, [pc, #364]	; (8001334 <MX_GPIO_Init+0x34c>)
 80011c6:	f001 fcff 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011ca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011d0:	2302      	movs	r3, #2
 80011d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80011e0:	230e      	movs	r3, #14
 80011e2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4851      	ldr	r0, [pc, #324]	; (8001330 <MX_GPIO_Init+0x348>)
 80011ea:	f001 fced 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80011ee:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80011f2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011f4:	2302      	movs	r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8001204:	230c      	movs	r3, #12
 8001206:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4848      	ldr	r0, [pc, #288]	; (8001330 <MX_GPIO_Init+0x348>)
 800120e:	f001 fcdb 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001212:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001216:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001220:	463b      	mov	r3, r7
 8001222:	4619      	mov	r1, r3
 8001224:	4842      	ldr	r0, [pc, #264]	; (8001330 <MX_GPIO_Init+0x348>)
 8001226:	f001 fccf 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800122a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800122e:	603b      	str	r3, [r7, #0]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001230:	2302      	movs	r3, #2
 8001232:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8001240:	230c      	movs	r3, #12
 8001242:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4836      	ldr	r0, [pc, #216]	; (8001324 <MX_GPIO_Init+0x33c>)
 800124a:	f001 fcbd 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TE_Pin;
 800124e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001252:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4830      	ldr	r0, [pc, #192]	; (8001324 <MX_GPIO_Init+0x33c>)
 8001262:	f001 fcb1 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|LCD_DC_Pin|LCD_RES_Pin
 8001266:	f243 03b0 	movw	r3, #12464	; 0x30b0
 800126a:	603b      	str	r3, [r7, #0]
                          |LCD_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800126c:	2301      	movs	r3, #1
 800126e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4828      	ldr	r0, [pc, #160]	; (8001324 <MX_GPIO_Init+0x33c>)
 8001282:	f001 fca1 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001286:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800128a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800128c:	2302      	movs	r3, #2
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800129c:	230e      	movs	r3, #14
 800129e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <MX_GPIO_Init+0x340>)
 80012a6:	f001 fc8f 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80012aa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80012ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012b0:	2302      	movs	r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 80012c0:	230e      	movs	r3, #14
 80012c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <MX_GPIO_Init+0x334>)
 80012ca:	f001 fc7d 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012d4:	2302      	movs	r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012e4:	2307      	movs	r3, #7
 80012e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_GPIO_Init+0x338>)
 80012ee:	f001 fc6b 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012f2:	2348      	movs	r3, #72	; 0x48
 80012f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012f6:	2302      	movs	r3, #2
 80012f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8001306:	230e      	movs	r3, #14
 8001308:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_GPIO_Init+0x33c>)
 8001310:	f001 fc5a 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001314:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	e00d      	b.n	8001338 <MX_GPIO_Init+0x350>
 800131c:	40020800 	.word	0x40020800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40021800 	.word	0x40021800
 800132c:	40021400 	.word	0x40021400
 8001330:	40020400 	.word	0x40020400
 8001334:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001338:	2302      	movs	r3, #2
 800133a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8001348:	2309      	movs	r3, #9
 800134a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	485a      	ldr	r0, [pc, #360]	; (80014bc <MX_GPIO_Init+0x4d4>)
 8001352:	f001 fc39 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001356:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800135a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800135c:	2301      	movs	r3, #1
 800135e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136c:	463b      	mov	r3, r7
 800136e:	4619      	mov	r1, r3
 8001370:	4852      	ldr	r0, [pc, #328]	; (80014bc <MX_GPIO_Init+0x4d4>)
 8001372:	f001 fc29 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001376:	2360      	movs	r3, #96	; 0x60
 8001378:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800137a:	2302      	movs	r3, #2
 800137c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 800138a:	230c      	movs	r3, #12
 800138c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	484b      	ldr	r0, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x4d8>)
 8001394:	f001 fc18 	bl	8002bc8 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 8001398:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff fa29 	bl	80007f4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 80013a2:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fa24 	bl	80007f4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 80013ac:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fa1f 	bl	80007f4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE5);
 80013b6:	4943      	ldr	r1, [pc, #268]	; (80014c4 <MX_GPIO_Init+0x4dc>)
 80013b8:	2002      	movs	r0, #2
 80013ba:	f7ff fa1b 	bl	80007f4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);
 80013be:	4942      	ldr	r1, [pc, #264]	; (80014c8 <MX_GPIO_Init+0x4e0>)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fa17 	bl	80007f4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 80013ce:	2301      	movs	r3, #1
 80013d0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013d2:	2301      	movs	r3, #1
 80013d4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fa28 	bl	8002830 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013e4:	2301      	movs	r3, #1
 80013e6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 80013e8:	2301      	movs	r3, #1
 80013ea:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013ec:	2301      	movs	r3, #1
 80013ee:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fa1b 	bl	8002830 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80013fa:	2304      	movs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013fe:	2301      	movs	r3, #1
 8001400:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001402:	2301      	movs	r3, #1
 8001404:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001406:	2301      	movs	r3, #1
 8001408:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	4618      	mov	r0, r3
 8001410:	f001 fa0e 	bl	8002830 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8001414:	2320      	movs	r3, #32
 8001416:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001418:	2301      	movs	r3, #1
 800141a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 800141c:	2301      	movs	r3, #1
 800141e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001420:	2301      	movs	r3, #1
 8001422:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fa01 	bl	8002830 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800142e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001432:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001434:	2301      	movs	r3, #1
 8001436:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8001438:	2301      	movs	r3, #1
 800143a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800143c:	2301      	movs	r3, #1
 800143e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4618      	mov	r0, r3
 8001446:	f001 f9f3 	bl	8002830 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800144a:	2200      	movs	r2, #0
 800144c:	2101      	movs	r1, #1
 800144e:	481f      	ldr	r0, [pc, #124]	; (80014cc <MX_GPIO_Init+0x4e4>)
 8001450:	f7ff fb83 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_PULL_NO);
 8001454:	2200      	movs	r2, #0
 8001456:	2102      	movs	r1, #2
 8001458:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_GPIO_Init+0x4e4>)
 800145a:	f7ff fb7e 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 800145e:	2200      	movs	r2, #0
 8001460:	2104      	movs	r1, #4
 8001462:	481a      	ldr	r0, [pc, #104]	; (80014cc <MX_GPIO_Init+0x4e4>)
 8001464:	f7ff fb79 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(OTG_FS_OC_GPIO_Port, OTG_FS_OC_Pin, LL_GPIO_PULL_NO);
 8001468:	2200      	movs	r2, #0
 800146a:	2120      	movs	r1, #32
 800146c:	4818      	ldr	r0, [pc, #96]	; (80014d0 <MX_GPIO_Init+0x4e8>)
 800146e:	f7ff fb74 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(TP_INT1_GPIO_Port, TP_INT1_Pin, LL_GPIO_PULL_NO);
 8001472:	2200      	movs	r2, #0
 8001474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_GPIO_Init+0x4e4>)
 800147a:	f7ff fb6e 	bl	8000b5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800147e:	2200      	movs	r2, #0
 8001480:	2101      	movs	r1, #1
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <MX_GPIO_Init+0x4e4>)
 8001484:	f7ff fb2c 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_MODE_INPUT);
 8001488:	2200      	movs	r2, #0
 800148a:	2102      	movs	r1, #2
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <MX_GPIO_Init+0x4e4>)
 800148e:	f7ff fb27 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 8001492:	2200      	movs	r2, #0
 8001494:	2104      	movs	r1, #4
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_GPIO_Init+0x4e4>)
 8001498:	f7ff fb22 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(OTG_FS_OC_GPIO_Port, OTG_FS_OC_Pin, LL_GPIO_MODE_INPUT);
 800149c:	2200      	movs	r2, #0
 800149e:	2120      	movs	r1, #32
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <MX_GPIO_Init+0x4e8>)
 80014a2:	f7ff fb1d 	bl	8000ae0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TP_INT1_GPIO_Port, TP_INT1_Pin, LL_GPIO_MODE_INPUT);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_GPIO_Init+0x4e4>)
 80014ae:	f7ff fb17 	bl	8000ae0 <LL_GPIO_SetPinMode>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	00f00001 	.word	0x00f00001
 80014c8:	f0000003 	.word	0xf0000003
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020800 	.word	0x40020800

080014d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014e6:	f000 f9b5 	bl	8001854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40001000 	.word	0x40001000

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x8>
	...

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a29      	ldr	r2, [pc, #164]	; (8001618 <HAL_I2C_MspInit+0xc4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d14b      	bne.n	800160e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b28      	ldr	r3, [pc, #160]	; (800161c <HAL_I2C_MspInit+0xc8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a27      	ldr	r2, [pc, #156]	; (800161c <HAL_I2C_MspInit+0xc8>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <HAL_I2C_MspInit+0xc8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_I2C_MspInit+0xc8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a20      	ldr	r2, [pc, #128]	; (800161c <HAL_I2C_MspInit+0xc8>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <HAL_I2C_MspInit+0xc8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015c0:	2304      	movs	r3, #4
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <HAL_I2C_MspInit+0xcc>)
 80015cc:	f000 fa38 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d6:	2312      	movs	r3, #18
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015da:	2301      	movs	r3, #1
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015e2:	2304      	movs	r3, #4
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <HAL_I2C_MspInit+0xd0>)
 80015ee:	f000 fa27 	bl	8001a40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_I2C_MspInit+0xc8>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_I2C_MspInit+0xc8>)
 80015fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_I2C_MspInit+0xc8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40005c00 	.word	0x40005c00
 800161c:	40023800 	.word	0x40023800
 8001620:	40020800 	.word	0x40020800
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08e      	sub	sp, #56	; 0x38
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_InitTick+0xe4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <HAL_InitTick+0xe4>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6413      	str	r3, [r2, #64]	; 0x40
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_InitTick+0xe4>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001654:	f107 0210 	add.w	r2, r7, #16
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fd7a 	bl	8002158 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800166e:	f000 fd5f 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 8001672:	6378      	str	r0, [r7, #52]	; 0x34
 8001674:	e004      	b.n	8001680 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001676:	f000 fd5b 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 800167a:	4603      	mov	r3, r0
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_InitTick+0xe8>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	0c9b      	lsrs	r3, r3, #18
 800168a:	3b01      	subs	r3, #1
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_InitTick+0xec>)
 8001690:	4a21      	ldr	r2, [pc, #132]	; (8001718 <HAL_InitTick+0xf0>)
 8001692:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_InitTick+0xec>)
 8001696:	f240 32e7 	movw	r2, #999	; 0x3e7
 800169a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <HAL_InitTick+0xec>)
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_InitTick+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_InitTick+0xec>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_InitTick+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016b4:	4817      	ldr	r0, [pc, #92]	; (8001714 <HAL_InitTick+0xec>)
 80016b6:	f000 fd81 	bl	80021bc <HAL_TIM_Base_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11b      	bne.n	8001700 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016c8:	4812      	ldr	r0, [pc, #72]	; (8001714 <HAL_InitTick+0xec>)
 80016ca:	f000 fdd1 	bl	8002270 <HAL_TIM_Base_Start_IT>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016dc:	2036      	movs	r0, #54	; 0x36
 80016de:	f000 f9a1 	bl	8001a24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d808      	bhi.n	80016fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	2036      	movs	r0, #54	; 0x36
 80016ee:	f000 f97d 	bl	80019ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_InitTick+0xf4>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e002      	b.n	8001700 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001704:	4618      	mov	r0, r3
 8001706:	3738      	adds	r7, #56	; 0x38
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	431bde83 	.word	0x431bde83
 8001714:	2000007c 	.word	0x2000007c
 8001718:	40001000 	.word	0x40001000
 800171c:	20000004 	.word	0x20000004

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <TIM6_DAC_IRQHandler+0x10>)
 800178a:	f000 fde1 	bl	8002350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000007c 	.word	0x2000007c

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SystemInit+0x20>)
 800179e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <SystemInit+0x20>)
 80017a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017c0:	f7ff ffea 	bl	8001798 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	; (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f001 fde5 	bl	80033b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fa00 	bl	8000bf2 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001800:	08003450 	.word	0x08003450
  ldr r2, =_sbss
 8001804:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001808:	200000c8 	.word	0x200000c8

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_Init+0x40>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <HAL_Init+0x40>)
 8001826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_Init+0x40>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001838:	2003      	movs	r0, #3
 800183a:	f000 f8cc 	bl	80019d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183e:	200f      	movs	r0, #15
 8001840:	f7ff fef2 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001844:	f7ff fe5e 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	200000c4 	.word	0x200000c4

0800187c <__NVIC_SetPriorityGrouping>:
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_EnableIRQ>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	db0b      	blt.n	800190a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	f003 021f 	and.w	r2, r3, #31
 80018f8:	4907      	ldr	r1, [pc, #28]	; (8001918 <__NVIC_EnableIRQ+0x38>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	2001      	movs	r0, #1
 8001902:	fa00 f202 	lsl.w	r2, r0, r2
 8001906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000e100 	.word	0xe000e100

0800191c <__NVIC_SetPriority>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0a      	blt.n	8001946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	490c      	ldr	r1, [pc, #48]	; (8001968 <__NVIC_SetPriority+0x4c>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	0112      	lsls	r2, r2, #4
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	440b      	add	r3, r1
 8001940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001944:	e00a      	b.n	800195c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4908      	ldr	r1, [pc, #32]	; (800196c <__NVIC_SetPriority+0x50>)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	3b04      	subs	r3, #4
 8001954:	0112      	lsls	r2, r2, #4
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	440b      	add	r3, r1
 800195a:	761a      	strb	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000e100 	.word	0xe000e100
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <NVIC_EncodePriority>:
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f1c3 0307 	rsb	r3, r3, #7
 800198a:	2b04      	cmp	r3, #4
 800198c:	bf28      	it	cs
 800198e:	2304      	movcs	r3, #4
 8001990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3304      	adds	r3, #4
 8001996:	2b06      	cmp	r3, #6
 8001998:	d902      	bls.n	80019a0 <NVIC_EncodePriority+0x30>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3b03      	subs	r3, #3
 800199e:	e000      	b.n	80019a2 <NVIC_EncodePriority+0x32>
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	f04f 32ff 	mov.w	r2, #4294967295
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43da      	mvns	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	401a      	ands	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b8:	f04f 31ff 	mov.w	r1, #4294967295
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	43d9      	mvns	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	4313      	orrs	r3, r2
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3724      	adds	r7, #36	; 0x24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff4c 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 80019e4:	bf00      	nop
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fe:	f7ff ff61 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	6978      	ldr	r0, [r7, #20]
 8001a0a:	f7ff ffb1 	bl	8001970 <NVIC_EncodePriority>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff80 	bl	800191c <__NVIC_SetPriority>
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff54 	bl	80018e0 <__NVIC_EnableIRQ>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e177      	b.n	8001d4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8166 	bne.w	8001d46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d005      	beq.n	8001a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d017      	beq.n	8001b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d123      	bne.n	8001b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	69b9      	ldr	r1, [r7, #24]
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80c0 	beq.w	8001d46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be2:	4a61      	ldr	r2, [pc, #388]	; (8001d68 <HAL_GPIO_Init+0x328>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_GPIO_Init+0x32c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d037      	beq.n	8001c7e <HAL_GPIO_Init+0x23e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a57      	ldr	r2, [pc, #348]	; (8001d70 <HAL_GPIO_Init+0x330>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d031      	beq.n	8001c7a <HAL_GPIO_Init+0x23a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a56      	ldr	r2, [pc, #344]	; (8001d74 <HAL_GPIO_Init+0x334>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d02b      	beq.n	8001c76 <HAL_GPIO_Init+0x236>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a55      	ldr	r2, [pc, #340]	; (8001d78 <HAL_GPIO_Init+0x338>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d025      	beq.n	8001c72 <HAL_GPIO_Init+0x232>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_GPIO_Init+0x33c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d01f      	beq.n	8001c6e <HAL_GPIO_Init+0x22e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a53      	ldr	r2, [pc, #332]	; (8001d80 <HAL_GPIO_Init+0x340>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d019      	beq.n	8001c6a <HAL_GPIO_Init+0x22a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x344>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d013      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x348>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00d      	beq.n	8001c62 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x34c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x350>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_GPIO_Init+0x21a>
 8001c56:	2309      	movs	r3, #9
 8001c58:	e012      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	e010      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c5e:	2308      	movs	r3, #8
 8001c60:	e00e      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00c      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e00a      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c6a:	2305      	movs	r3, #5
 8001c6c:	e008      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c72:	2303      	movs	r3, #3
 8001c74:	e004      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_Init+0x240>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	f002 0203 	and.w	r2, r2, #3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c90:	4935      	ldr	r1, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x328>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <HAL_GPIO_Init+0x354>)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	2b0f      	cmp	r3, #15
 8001d50:	f67f ae84 	bls.w	8001a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40013800 	.word	0x40013800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40020800 	.word	0x40020800
 8001d78:	40020c00 	.word	0x40020c00
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40021400 	.word	0x40021400
 8001d84:	40021800 	.word	0x40021800
 8001d88:	40021c00 	.word	0x40021c00
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40022400 	.word	0x40022400
 8001d94:	40013c00 	.word	0x40013c00

08001d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e12b      	b.n	8002002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fbc8 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	; 0x24
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dfc:	f000 f998 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 8001e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a81      	ldr	r2, [pc, #516]	; (800200c <HAL_I2C_Init+0x274>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d807      	bhi.n	8001e1c <HAL_I2C_Init+0x84>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4a80      	ldr	r2, [pc, #512]	; (8002010 <HAL_I2C_Init+0x278>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	bf94      	ite	ls
 8001e14:	2301      	movls	r3, #1
 8001e16:	2300      	movhi	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e006      	b.n	8001e2a <HAL_I2C_Init+0x92>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a7d      	ldr	r2, [pc, #500]	; (8002014 <HAL_I2C_Init+0x27c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bf94      	ite	ls
 8001e24:	2301      	movls	r3, #1
 8001e26:	2300      	movhi	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e0e7      	b.n	8002002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4a78      	ldr	r2, [pc, #480]	; (8002018 <HAL_I2C_Init+0x280>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	4a6a      	ldr	r2, [pc, #424]	; (800200c <HAL_I2C_Init+0x274>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d802      	bhi.n	8001e6c <HAL_I2C_Init+0xd4>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	e009      	b.n	8001e80 <HAL_I2C_Init+0xe8>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	4a69      	ldr	r2, [pc, #420]	; (800201c <HAL_I2C_Init+0x284>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	3301      	adds	r3, #1
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	495c      	ldr	r1, [pc, #368]	; (800200c <HAL_I2C_Init+0x274>)
 8001e9c:	428b      	cmp	r3, r1
 8001e9e:	d819      	bhi.n	8001ed4 <HAL_I2C_Init+0x13c>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e59      	subs	r1, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eae:	1c59      	adds	r1, r3, #1
 8001eb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_I2C_Init+0x138>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1e59      	subs	r1, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ece:	e051      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e04f      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <HAL_I2C_Init+0x168>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	440b      	add	r3, r1
 8001eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	e012      	b.n	8001f26 <HAL_I2C_Init+0x18e>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1e58      	subs	r0, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	0099      	lsls	r1, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Init+0x196>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e022      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10e      	bne.n	8001f54 <HAL_I2C_Init+0x1bc>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1e58      	subs	r0, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	440b      	add	r3, r1
 8001f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f52:	e00f      	b.n	8001f74 <HAL_I2C_Init+0x1dc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1e58      	subs	r0, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	0099      	lsls	r1, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	6809      	ldr	r1, [r1, #0]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69da      	ldr	r2, [r3, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6911      	ldr	r1, [r2, #16]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	4311      	orrs	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	000186a0 	.word	0x000186a0
 8002010:	001e847f 	.word	0x001e847f
 8002014:	003d08ff 	.word	0x003d08ff
 8002018:	431bde83 	.word	0x431bde83
 800201c:	10624dd3 	.word	0x10624dd3

08002020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b20      	cmp	r3, #32
 8002034:	d129      	bne.n	800208a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2224      	movs	r2, #36	; 0x24
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0210 	bic.w	r2, r2, #16
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800208a:	2302      	movs	r3, #2
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d12a      	bne.n	8002108 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2224      	movs	r2, #36	; 0x24
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f023 030f 	bic.w	r3, r3, #15
 80020d8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	89fb      	ldrh	r3, [r7, #14]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	89fa      	ldrh	r2, [r7, #14]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
  }
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_RCC_GetHCLKFreq+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000000 	.word	0x20000000

08002130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002134:	f7ff fff0 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0a9b      	lsrs	r3, r3, #10
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	08003440 	.word	0x08003440

08002158 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	220f      	movs	r2, #15
 8002166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_GetClockConfig+0x5c>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_RCC_GetClockConfig+0x60>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	601a      	str	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f839 	bl	800225a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 f9c0 	bl	8002580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b01      	cmp	r3, #1
 8002282:	d001      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e04e      	b.n	8002326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a23      	ldr	r2, [pc, #140]	; (8002334 <HAL_TIM_Base_Start_IT+0xc4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d022      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x80>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b2:	d01d      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x80>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_TIM_Base_Start_IT+0xc8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d018      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x80>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_TIM_Base_Start_IT+0xcc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d013      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x80>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_TIM_Base_Start_IT+0xd0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00e      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x80>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_TIM_Base_Start_IT+0xd4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x80>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_TIM_Base_Start_IT+0xd8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x80>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_TIM_Base_Start_IT+0xdc>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d111      	bne.n	8002314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d010      	beq.n	8002324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002312:	e007      	b.n	8002324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40010000 	.word	0x40010000
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800
 8002340:	40000c00 	.word	0x40000c00
 8002344:	40010400 	.word	0x40010400
 8002348:	40014000 	.word	0x40014000
 800234c:	40001800 	.word	0x40001800

08002350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d020      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01b      	beq.n	80023b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0202 	mvn.w	r2, #2
 8002384:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8d2 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8c4 	bl	8002530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f8d5 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d020      	beq.n	8002400 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01b      	beq.n	8002400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0204 	mvn.w	r2, #4
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f8ac 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f89e 	bl	8002530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8af 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0208 	mvn.w	r2, #8
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2204      	movs	r2, #4
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f886 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f878 	bl	8002530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f889 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d020      	beq.n	8002498 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01b      	beq.n	8002498 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0210 	mvn.w	r2, #16
 8002468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2208      	movs	r2, #8
 800246e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f860 	bl	8002544 <HAL_TIM_IC_CaptureCallback>
 8002484:	e005      	b.n	8002492 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f852 	bl	8002530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f863 	bl	8002558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00c      	beq.n	80024bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d007      	beq.n	80024bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0201 	mvn.w	r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff f80c 	bl	80014d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00c      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f906 	bl	80026ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f834 	bl	800256c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0220 	mvn.w	r2, #32
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8d8 	bl	80026d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a46      	ldr	r2, [pc, #280]	; (80026ac <TIM_Base_SetConfig+0x12c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d013      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259e:	d00f      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a43      	ldr	r2, [pc, #268]	; (80026b0 <TIM_Base_SetConfig+0x130>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00b      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <TIM_Base_SetConfig+0x134>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a41      	ldr	r2, [pc, #260]	; (80026b8 <TIM_Base_SetConfig+0x138>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <TIM_Base_SetConfig+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a40      	ldr	r2, [pc, #256]	; (80026bc <TIM_Base_SetConfig+0x13c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d108      	bne.n	80025d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <TIM_Base_SetConfig+0x12c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d02b      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d027      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a32      	ldr	r2, [pc, #200]	; (80026b0 <TIM_Base_SetConfig+0x130>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d023      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a31      	ldr	r2, [pc, #196]	; (80026b4 <TIM_Base_SetConfig+0x134>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d01f      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a30      	ldr	r2, [pc, #192]	; (80026b8 <TIM_Base_SetConfig+0x138>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01b      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <TIM_Base_SetConfig+0x13c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d017      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a2e      	ldr	r2, [pc, #184]	; (80026c0 <TIM_Base_SetConfig+0x140>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2d      	ldr	r2, [pc, #180]	; (80026c4 <TIM_Base_SetConfig+0x144>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00f      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2c      	ldr	r2, [pc, #176]	; (80026c8 <TIM_Base_SetConfig+0x148>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d00b      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <TIM_Base_SetConfig+0x14c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d007      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <TIM_Base_SetConfig+0x150>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d003      	beq.n	8002632 <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <TIM_Base_SetConfig+0x154>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d108      	bne.n	8002644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <TIM_Base_SetConfig+0x12c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0xf8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <TIM_Base_SetConfig+0x13c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d103      	bne.n	8002680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f023 0201 	bic.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	611a      	str	r2, [r3, #16]
  }
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40000400 	.word	0x40000400
 80026b4:	40000800 	.word	0x40000800
 80026b8:	40000c00 	.word	0x40000c00
 80026bc:	40010400 	.word	0x40010400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800
 80026cc:	40001800 	.word	0x40001800
 80026d0:	40001c00 	.word	0x40001c00
 80026d4:	40002000 	.word	0x40002000

080026d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <LL_EXTI_EnableIT_0_31+0x20>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4904      	ldr	r1, [pc, #16]	; (8002720 <LL_EXTI_EnableIT_0_31+0x20>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40013c00 	.word	0x40013c00

08002724 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <LL_EXTI_DisableIT_0_31+0x24>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	43db      	mvns	r3, r3
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <LL_EXTI_DisableIT_0_31+0x24>)
 8002736:	4013      	ands	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40013c00 	.word	0x40013c00

0800274c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <LL_EXTI_EnableEvent_0_31+0x20>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]

}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40013c00 	.word	0x40013c00

08002770 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <LL_EXTI_DisableEvent_0_31+0x24>)
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	43db      	mvns	r3, r3
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002782:	4013      	ands	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40013c00 	.word	0x40013c00

08002798 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4904      	ldr	r1, [pc, #16]	; (80027b8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40013c00 	.word	0x40013c00

080027bc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]

}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	4904      	ldr	r1, [pc, #16]	; (8002804 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60cb      	str	r3, [r1, #12]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	40013c00 	.word	0x40013c00

08002808 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	43db      	mvns	r3, r3
 8002818:	4904      	ldr	r1, [pc, #16]	; (800282c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800281a:	4013      	ands	r3, r2
 800281c:	60cb      	str	r3, [r1, #12]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40013c00 	.word	0x40013c00

08002830 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	791b      	ldrb	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d065      	beq.n	8002910 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d06c      	beq.n	8002926 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	795b      	ldrb	r3, [r3, #5]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d01c      	beq.n	800288e <LL_EXTI_Init+0x5e>
 8002854:	2b02      	cmp	r3, #2
 8002856:	dc25      	bgt.n	80028a4 <LL_EXTI_Init+0x74>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <LL_EXTI_Init+0x32>
 800285c:	2b01      	cmp	r3, #1
 800285e:	d00b      	beq.n	8002878 <LL_EXTI_Init+0x48>
 8002860:	e020      	b.n	80028a4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff82 	bl	8002770 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff45 	bl	8002700 <LL_EXTI_EnableIT_0_31>
          break;
 8002876:	e018      	b.n	80028aa <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff51 	bl	8002724 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff60 	bl	800274c <LL_EXTI_EnableEvent_0_31>
          break;
 800288c:	e00d      	b.n	80028aa <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff34 	bl	8002700 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff55 	bl	800274c <LL_EXTI_EnableEvent_0_31>
          break;
 80028a2:	e002      	b.n	80028aa <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
          break;
 80028a8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	799b      	ldrb	r3, [r3, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d039      	beq.n	8002926 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	799b      	ldrb	r3, [r3, #6]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d01c      	beq.n	80028f4 <LL_EXTI_Init+0xc4>
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	dc25      	bgt.n	800290a <LL_EXTI_Init+0xda>
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d002      	beq.n	80028c8 <LL_EXTI_Init+0x98>
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d00b      	beq.n	80028de <LL_EXTI_Init+0xae>
 80028c6:	e020      	b.n	800290a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff9b 	bl	8002808 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ff5e 	bl	8002798 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80028dc:	e024      	b.n	8002928 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff ff6a 	bl	80027bc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff79 	bl	80027e4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028f2:	e019      	b.n	8002928 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff4d 	bl	8002798 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff6e 	bl	80027e4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002908:	e00e      	b.n	8002928 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
            break;
 800290e:	e00b      	b.n	8002928 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff05 	bl	8002724 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ff26 	bl	8002770 <LL_EXTI_DisableEvent_0_31>
 8002924:	e000      	b.n	8002928 <LL_EXTI_Init+0xf8>
      }
 8002926:	bf00      	nop
  }
  return status;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <LL_GPIO_SetPinMode>:
{
 8002932:	b480      	push	{r7}
 8002934:	b08b      	sub	sp, #44	; 0x2c
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	613b      	str	r3, [r7, #16]
  return result;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002958:	2320      	movs	r3, #32
 800295a:	e003      	b.n	8002964 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2103      	movs	r1, #3
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	401a      	ands	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	61fb      	str	r3, [r7, #28]
  return result;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e003      	b.n	8002992 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	fa01 f303 	lsl.w	r3, r1, r3
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	601a      	str	r2, [r3, #0]
}
 80029a0:	bf00      	nop
 80029a2:	372c      	adds	r7, #44	; 0x2c
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_GPIO_SetPinOutputType>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	43db      	mvns	r3, r3
 80029c0:	401a      	ands	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	431a      	orrs	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	605a      	str	r2, [r3, #4]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_GPIO_SetPinSpeed>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b08b      	sub	sp, #44	; 0x2c
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	613b      	str	r3, [r7, #16]
  return result;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002a02:	2320      	movs	r3, #32
 8002a04:	e003      	b.n	8002a0e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2103      	movs	r1, #3
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	401a      	ands	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	61fb      	str	r3, [r7, #28]
  return result;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e003      	b.n	8002a3c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	bf00      	nop
 8002a4c:	372c      	adds	r7, #44	; 0x2c
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_GPIO_SetPinPull>:
{
 8002a56:	b480      	push	{r7}
 8002a58:	b08b      	sub	sp, #44	; 0x2c
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	613b      	str	r3, [r7, #16]
  return result;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e003      	b.n	8002a88 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	401a      	ands	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	61fb      	str	r3, [r7, #28]
  return result;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002aaa:	2320      	movs	r3, #32
 8002aac:	e003      	b.n	8002ab6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	60da      	str	r2, [r3, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	372c      	adds	r7, #44	; 0x2c
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_GPIO_SetAFPin_0_7>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b08b      	sub	sp, #44	; 0x2c
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	613b      	str	r3, [r7, #16]
  return result;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e003      	b.n	8002b02 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	210f      	movs	r1, #15
 8002b06:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	61fb      	str	r3, [r7, #28]
  return result;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	fa01 f303 	lsl.w	r3, r1, r3
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	372c      	adds	r7, #44	; 0x2c
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_GPIO_SetAFPin_8_15>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b08b      	sub	sp, #44	; 0x2c
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	613b      	str	r3, [r7, #16]
  return result;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e003      	b.n	8002b7e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	210f      	movs	r1, #15
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	401a      	ands	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	61fb      	str	r3, [r7, #28]
  return result;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bbc:	bf00      	nop
 8002bbe:	372c      	adds	r7, #44	; 0x2c
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	617b      	str	r3, [r7, #20]
  return result;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <LL_GPIO_Init+0x2e>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e003      	b.n	8002bfe <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fab3 f383 	clz	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002c00:	e057      	b.n	8002cb2 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	4013      	ands	r3, r2
 8002c10:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d049      	beq.n	8002cac <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d003      	beq.n	8002c28 <LL_GPIO_Init+0x60>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d10d      	bne.n	8002c44 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6a39      	ldr	r1, [r7, #32]
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fed3 	bl	80029dc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6a39      	ldr	r1, [r7, #32]
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff feb4 	bl	80029ac <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	6a39      	ldr	r1, [r7, #32]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff02 	bl	8002a56 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d121      	bne.n	8002c9e <LL_GPIO_Init+0xd6>
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	60bb      	str	r3, [r7, #8]
  return result;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <LL_GPIO_Init+0xac>
    return 32U;
 8002c70:	2320      	movs	r3, #32
 8002c72:	e003      	b.n	8002c7c <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c7c:	2b07      	cmp	r3, #7
 8002c7e:	d807      	bhi.n	8002c90 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6a39      	ldr	r1, [r7, #32]
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff21 	bl	8002ad0 <LL_GPIO_SetAFPin_0_7>
 8002c8e:	e006      	b.n	8002c9e <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	461a      	mov	r2, r3
 8002c96:	6a39      	ldr	r1, [r7, #32]
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ff56 	bl	8002b4a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6a39      	ldr	r1, [r7, #32]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fe43 	bl	8002932 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	3301      	adds	r3, #1
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1a0      	bne.n	8002c02 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3728      	adds	r7, #40	; 0x28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <LL_SPI_IsEnabled>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d101      	bne.n	8002ce2 <LL_SPI_IsEnabled+0x18>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <LL_SPI_IsEnabled+0x1a>
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffd3 	bl	8002cca <LL_SPI_IsEnabled>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d139      	bne.n	8002d9e <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d32:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	6811      	ldr	r1, [r2, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	6852      	ldr	r2, [r2, #4]
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	4311      	orrs	r1, r2
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6912      	ldr	r2, [r2, #16]
 8002d50:	4311      	orrs	r1, r2
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	6952      	ldr	r2, [r2, #20]
 8002d56:	4311      	orrs	r1, r2
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6992      	ldr	r2, [r2, #24]
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	69d2      	ldr	r2, [r2, #28]
 8002d62:	4311      	orrs	r1, r2
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	6a12      	ldr	r2, [r2, #32]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 0204 	bic.w	r2, r3, #4
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8c:	d105      	bne.n	8002d9a <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	4619      	mov	r1, r3
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ffab 	bl	8002cf0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	61da      	str	r2, [r3, #28]
  return status;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <LL_TIM_SetPrescaler>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_TIM_SetAutoReload>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <LL_TIM_SetRepetitionCounter>:
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <LL_TIM_OC_SetCompareCH1>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_TIM_OC_SetCompareCH2>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_TIM_OC_SetCompareCH3>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_TIM_OC_SetCompareCH4>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	615a      	str	r2, [r3, #20]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <LL_TIM_Init+0x108>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d013      	beq.n	8002ed8 <LL_TIM_Init+0x40>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb6:	d00f      	beq.n	8002ed8 <LL_TIM_Init+0x40>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3a      	ldr	r2, [pc, #232]	; (8002fa4 <LL_TIM_Init+0x10c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00b      	beq.n	8002ed8 <LL_TIM_Init+0x40>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <LL_TIM_Init+0x110>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <LL_TIM_Init+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a38      	ldr	r2, [pc, #224]	; (8002fac <LL_TIM_Init+0x114>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <LL_TIM_Init+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a37      	ldr	r2, [pc, #220]	; (8002fb0 <LL_TIM_Init+0x118>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d106      	bne.n	8002ee6 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <LL_TIM_Init+0x108>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef4:	d027      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <LL_TIM_Init+0x10c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d023      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a29      	ldr	r2, [pc, #164]	; (8002fa8 <LL_TIM_Init+0x110>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a28      	ldr	r2, [pc, #160]	; (8002fac <LL_TIM_Init+0x114>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01b      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a27      	ldr	r2, [pc, #156]	; (8002fb0 <LL_TIM_Init+0x118>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d017      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a26      	ldr	r2, [pc, #152]	; (8002fb4 <LL_TIM_Init+0x11c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <LL_TIM_Init+0x120>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00f      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <LL_TIM_Init+0x124>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <LL_TIM_Init+0x128>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <LL_TIM_Init+0x12c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <LL_TIM_Init+0xae>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a21      	ldr	r2, [pc, #132]	; (8002fc8 <LL_TIM_Init+0x130>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d106      	bne.n	8002f54 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ff35 	bl	8002dd0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff21 	bl	8002db4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <LL_TIM_Init+0x108>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d003      	beq.n	8002f82 <LL_TIM_Init+0xea>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	; (8002fb0 <LL_TIM_Init+0x118>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d105      	bne.n	8002f8e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff2f 	bl	8002dec <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff72 	bl	8002e78 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40000c00 	.word	0x40000c00
 8002fb0:	40010400 	.word	0x40010400
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	40001800 	.word	0x40001800
 8002fc4:	40001c00 	.word	0x40001c00
 8002fc8:	40002000 	.word	0x40002000

08002fcc <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fe2:	d027      	beq.n	8003034 <LL_TIM_OC_Init+0x68>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fea:	d82a      	bhi.n	8003042 <LL_TIM_OC_Init+0x76>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	d018      	beq.n	8003026 <LL_TIM_OC_Init+0x5a>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffa:	d822      	bhi.n	8003042 <LL_TIM_OC_Init+0x76>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d003      	beq.n	800300a <LL_TIM_OC_Init+0x3e>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b10      	cmp	r3, #16
 8003006:	d007      	beq.n	8003018 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003008:	e01b      	b.n	8003042 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f81f 	bl	8003050 <OC1Config>
 8003012:	4603      	mov	r3, r0
 8003014:	75fb      	strb	r3, [r7, #23]
      break;
 8003016:	e015      	b.n	8003044 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f884 	bl	8003128 <OC2Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]
      break;
 8003024:	e00e      	b.n	8003044 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f8ed 	bl	8003208 <OC3Config>
 800302e:	4603      	mov	r3, r0
 8003030:	75fb      	strb	r3, [r7, #23]
      break;
 8003032:	e007      	b.n	8003044 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f956 	bl	80032e8 <OC4Config>
 800303c:	4603      	mov	r3, r0
 800303e:	75fb      	strb	r3, [r7, #23]
      break;
 8003040:	e000      	b.n	8003044 <LL_TIM_OC_Init+0x78>
      break;
 8003042:	bf00      	nop
  }

  return result;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f023 0201 	bic.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 0202 	bic.w	r2, r3, #2
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0201 	bic.w	r2, r3, #1
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <OC1Config+0xd0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <OC1Config+0x6a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <OC1Config+0xd4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d11e      	bne.n	80030f8 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 0208 	bic.w	r2, r3, #8
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4313      	orrs	r3, r2
 80030c8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f023 0204 	bic.w	r2, r3, #4
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fe7c 	bl	8002e08 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40010000 	.word	0x40010000
 8003124:	40010400 	.word	0x40010400

08003128 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0210 	bic.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0220 	bic.w	r2, r3, #32
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0210 	bic.w	r2, r3, #16
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <OC2Config+0xd8>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <OC2Config+0x70>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1c      	ldr	r2, [pc, #112]	; (8003204 <OC2Config+0xdc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d11f      	bne.n	80031d8 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	019b      	lsls	r3, r3, #6
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	019b      	lsls	r3, r3, #6
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fe1a 	bl	8002e24 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3718      	adds	r7, #24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40010000 	.word	0x40010000
 8003204:	40010400 	.word	0x40010400

08003208 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	021b      	lsls	r3, r3, #8
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <OC3Config+0xd8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <OC3Config+0x6e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <OC3Config+0xdc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d11f      	bne.n	80032b6 <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	029b      	lsls	r3, r3, #10
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	029b      	lsls	r3, r3, #10
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	015b      	lsls	r3, r3, #5
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fdb9 	bl	8002e40 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40010400 	.word	0x40010400

080032e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	031b      	lsls	r3, r3, #12
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	031b      	lsls	r3, r3, #12
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a11      	ldr	r2, [pc, #68]	; (8003390 <OC4Config+0xa8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <OC4Config+0x70>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <OC4Config+0xac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d107      	bne.n	8003368 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	019b      	lsls	r3, r3, #6
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fd6e 	bl	8002e5c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40010000 	.word	0x40010000
 8003394:	40010400 	.word	0x40010400

08003398 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <LL_SetSystemCoreClock+0x1c>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <__libc_init_array>:
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	4d0d      	ldr	r5, [pc, #52]	; (80033f0 <__libc_init_array+0x38>)
 80033bc:	4c0d      	ldr	r4, [pc, #52]	; (80033f4 <__libc_init_array+0x3c>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	2600      	movs	r6, #0
 80033c4:	42a6      	cmp	r6, r4
 80033c6:	d109      	bne.n	80033dc <__libc_init_array+0x24>
 80033c8:	4d0b      	ldr	r5, [pc, #44]	; (80033f8 <__libc_init_array+0x40>)
 80033ca:	4c0c      	ldr	r4, [pc, #48]	; (80033fc <__libc_init_array+0x44>)
 80033cc:	f000 f820 	bl	8003410 <_init>
 80033d0:	1b64      	subs	r4, r4, r5
 80033d2:	10a4      	asrs	r4, r4, #2
 80033d4:	2600      	movs	r6, #0
 80033d6:	42a6      	cmp	r6, r4
 80033d8:	d105      	bne.n	80033e6 <__libc_init_array+0x2e>
 80033da:	bd70      	pop	{r4, r5, r6, pc}
 80033dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e0:	4798      	blx	r3
 80033e2:	3601      	adds	r6, #1
 80033e4:	e7ee      	b.n	80033c4 <__libc_init_array+0xc>
 80033e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033ea:	4798      	blx	r3
 80033ec:	3601      	adds	r6, #1
 80033ee:	e7f2      	b.n	80033d6 <__libc_init_array+0x1e>
 80033f0:	08003448 	.word	0x08003448
 80033f4:	08003448 	.word	0x08003448
 80033f8:	08003448 	.word	0x08003448
 80033fc:	0800344c 	.word	0x0800344c

08003400 <memset>:
 8003400:	4402      	add	r2, r0
 8003402:	4603      	mov	r3, r0
 8003404:	4293      	cmp	r3, r2
 8003406:	d100      	bne.n	800340a <memset+0xa>
 8003408:	4770      	bx	lr
 800340a:	f803 1b01 	strb.w	r1, [r3], #1
 800340e:	e7f9      	b.n	8003404 <memset+0x4>

08003410 <_init>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	bf00      	nop
 8003414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003416:	bc08      	pop	{r3}
 8003418:	469e      	mov	lr, r3
 800341a:	4770      	bx	lr

0800341c <_fini>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	bf00      	nop
 8003420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003422:	bc08      	pop	{r3}
 8003424:	469e      	mov	lr, r3
 8003426:	4770      	bx	lr
