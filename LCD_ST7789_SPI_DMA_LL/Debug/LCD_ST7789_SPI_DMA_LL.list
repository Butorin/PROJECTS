
LCD_ST7789_SPI_DMA_LL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c5c  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d0  080076d0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  080076d0  080076d0  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076d0  080076d0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080076d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          000000c4  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b1d  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c08  00000000  00000000  00033bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00036808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001218  00000000  00000000  00037b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e7f  00000000  00000000  00038d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c68  00000000  00000000  00060be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0163  00000000  00000000  0007684f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001669b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051f0  00000000  00000000  00166a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000ac 	.word	0x200000ac
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004a5c 	.word	0x08004a5c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000b0 	.word	0x200000b0
 80001e8:	08004a5c 	.word	0x08004a5c

080001ec <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	460b      	mov	r3, r1
 80001f6:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	330c      	adds	r3, #12
 80001fc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	78fa      	ldrb	r2, [r7, #3]
 8000202:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <LL_SPI_TransmitData16>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	460b      	mov	r3, r1
 800021a:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	330c      	adds	r3, #12
 8000220:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	887a      	ldrh	r2, [r7, #2]
 8000226:	801a      	strh	r2, [r3, #0]
#else
  SPIx->DR = TxData;
#endif /* __GNUC__ */
}
 8000228:	bf00      	nop
 800022a:	3714      	adds	r7, #20
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <Display_TC_Callback>:

//коллбэк по прерыванию потока передачи
//этот обработчик необходимо прописать в функциях обработки прерываний в потоках DMA,
//которые используются дисплеями - stm32f4xx_it.c
void Display_TC_Callback(DMA_TypeDef *dma_x, uint32_t stream)
{
 8000234:	b480      	push	{r7}
 8000236:	b08b      	sub	sp, #44	; 0x2c
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
	//сбрасываем флаги прерываний
	uint8_t shift[8] = {0, 6, 16, 22, 0, 6, 16, 22}; //битовое смещение во флаговом регистре IFCR (L и H)
 800023e:	4a57      	ldr	r2, [pc, #348]	; (800039c <Display_TC_Callback+0x168>)
 8000240:	f107 030c 	add.w	r3, r7, #12
 8000244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000248:	e883 0003 	stmia.w	r3, {r0, r1}
	volatile uint32_t *ifcr_tx = (stream > 3) ? &(dma_x->HIFCR) : &(dma_x->LIFCR);
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	2b03      	cmp	r3, #3
 8000250:	d902      	bls.n	8000258 <Display_TC_Callback+0x24>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	330c      	adds	r3, #12
 8000256:	e001      	b.n	800025c <Display_TC_Callback+0x28>
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3308      	adds	r3, #8
 800025c:	623b      	str	r3, [r7, #32]
	*ifcr_tx = 0x3F<<shift[stream];
 800025e:	f107 020c 	add.w	r2, r7, #12
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	4413      	add	r3, r2
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	233f      	movs	r3, #63	; 0x3f
 800026c:	4093      	lsls	r3, r2
 800026e:	461a      	mov	r2, r3
 8000270:	6a3b      	ldr	r3, [r7, #32]
 8000272:	601a      	str	r2, [r3, #0]
	uint32_t stream_ct = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	61fb      	str	r3, [r7, #28]
	DMA_TypeDef *dma_ct = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
	LCD_Handler *lcd = LCD; //указатель на первый дисплей в списке
 800027c:	4b48      	ldr	r3, [pc, #288]	; (80003a0 <Display_TC_Callback+0x16c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	627b      	str	r3, [r7, #36]	; 0x24
	//проходим по списку дисплеев (пока есть следующий в списке)
	while (lcd) {
 8000282:	e081      	b.n	8000388 <Display_TC_Callback+0x154>
		//получаем параметры DMA потока дисплея
		dma_ct = lcd->spi_data.dma_tx.dma;
 8000284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000288:	61bb      	str	r3, [r7, #24]
		stream_ct = lcd->spi_data.dma_tx.stream;
 800028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800028e:	61fb      	str	r3, [r7, #28]
		//проверка на соответствие текущего потока DMA потоку, к которому привязан i-тый дисплей
		if (dma_ct == dma_x && stream_ct == stream) {
 8000290:	69ba      	ldr	r2, [r7, #24]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	d174      	bne.n	8000382 <Display_TC_Callback+0x14e>
 8000298:	69fa      	ldr	r2, [r7, #28]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d170      	bne.n	8000382 <Display_TC_Callback+0x14e>
			if (lcd->spi_data.cs_port) {//управление по cs поддерживается?
 80002a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00c      	beq.n	80002c2 <Display_TC_Callback+0x8e>
				//на выводе cs дисплея низкий уровень?
				if (lcd->spi_data.cs_port->ODR & lcd->spi_data.cs_pin) { //проверяем состояние пина выходного регистра порта
 80002a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80002b0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80002b4:	4013      	ands	r3, r2
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <Display_TC_Callback+0x8e>
					lcd = (LCD_Handler *)lcd->next;		   //если высокий уровень cs, то не этот дисплей активен
 80002ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80002be:	627b      	str	r3, [r7, #36]	; 0x24
					continue;							   //и переходим к следующему
 80002c0:	e062      	b.n	8000388 <Display_TC_Callback+0x154>
				}
			}
			//указатель на поток: aдрес контроллера + смещение
			DMA_Stream_TypeDef *dma_TX = ((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)dma_x + STREAM_OFFSET_TAB[stream])));
 80002c2:	4a38      	ldr	r2, [pc, #224]	; (80003a4 <Display_TC_Callback+0x170>)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	461a      	mov	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	617b      	str	r3, [r7, #20]
			//выключаем поток DMA
			dma_TX->CR &= ~DMA_SxCR_EN;
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f023 0201 	bic.w	r2, r3, #1
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	601a      	str	r2, [r3, #0]
			while (dma_TX->CR & DMA_SxCR_EN) ; //ждем отключения потока
 80002de:	bf00      	nop
 80002e0:	697b      	ldr	r3, [r7, #20]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1f9      	bne.n	80002e0 <Display_TC_Callback+0xac>
			if (lcd->size_mem) { //если переданы не все данные из памяти, то перезапускаем DMA и выходим из прерывания
 80002ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d01e      	beq.n	8000332 <Display_TC_Callback+0xfe>
				if (lcd->size_mem > 65535) {
 80002f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80002fc:	d30b      	bcc.n	8000316 <Display_TC_Callback+0xe2>
					dma_TX->NDTR = 65535;
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000304:	605a      	str	r2, [r3, #4]
					lcd->size_mem -= 65535;
 8000306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800030a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800030e:	3bff      	subs	r3, #255	; 0xff
 8000310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000312:	6613      	str	r3, [r2, #96]	; 0x60
 8000314:	e006      	b.n	8000324 <Display_TC_Callback+0xf0>
				}
				else {
					dma_TX->NDTR = lcd->size_mem;
 8000316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000318:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	605a      	str	r2, [r3, #4]
					lcd->size_mem = 0;
 800031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000320:	2200      	movs	r2, #0
 8000322:	661a      	str	r2, [r3, #96]	; 0x60
				}
				//включаем поток DMA
				dma_TX->CR |= (DMA_SxCR_EN);
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f043 0201 	orr.w	r2, r3, #1
 800032c:	697b      	ldr	r3, [r7, #20]
 800032e:	601a      	str	r2, [r3, #0]
				return;
 8000330:	e02e      	b.n	8000390 <Display_TC_Callback+0x15c>
				lcd->tmp_buf = 0;
				ENABLE_IRQ
			}
#endif
			//запрещаем SPI отправлять запросы к DMA
			lcd->spi_data.spi->CR2 &= ~SPI_CR2_TXDMAEN;
 8000332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033c:	f022 0202 	bic.w	r2, r2, #2
 8000340:	605a      	str	r2, [r3, #4]
			while (lcd->spi_data.spi->SR & SPI_SR_BSY) ; //ждем пока SPI освободится
 8000342:	bf00      	nop
 8000344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f8      	bne.n	8000344 <Display_TC_Callback+0x110>
			//отключаем дисплей от MK (притягиваем вывод CS дисплея к высокому уровню)
			if (!lcd->cs_control) { LCD_CS_HI }
 8000352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000354:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000358:	2b00      	cmp	r3, #0
 800035a:	d109      	bne.n	8000370 <Display_TC_Callback+0x13c>
 800035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800035e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000360:	2b00      	cmp	r3, #0
 8000362:	d005      	beq.n	8000370 <Display_TC_Callback+0x13c>
 8000364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000366:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800036c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800036e:	619a      	str	r2, [r3, #24]
			//выключаем spi
			lcd->spi_data.spi->CR1 &= ~SPI_CR1_SPE;
 8000370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800037a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800037e:	601a      	str	r2, [r3, #0]
			return;
 8000380:	e006      	b.n	8000390 <Display_TC_Callback+0x15c>
		}
		//переходим к следующему дисплею в списке
		lcd = (LCD_Handler *)lcd->next;
 8000382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000386:	627b      	str	r3, [r7, #36]	; 0x24
	while (lcd) {
 8000388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800038a:	2b00      	cmp	r3, #0
 800038c:	f47f af7a 	bne.w	8000284 <Display_TC_Callback+0x50>
	}
}
 8000390:	372c      	adds	r7, #44	; 0x2c
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	08004a74 	.word	0x08004a74
 80003a0:	200000c8 	.word	0x200000c8
 80003a4:	08004ac0 	.word	0x08004ac0

080003a8 <LCD_WRITE_DC>:
	lcd_write_command = 0,
	lcd_write_data
} lcd_dc_select;

inline static void LCD_WRITE_DC(LCD_Handler* lcd, uint8_t data, lcd_dc_select lcd_dc)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
 80003b4:	4613      	mov	r3, r2
 80003b6:	70bb      	strb	r3, [r7, #2]
	SPI_TypeDef *spi = lcd->spi_data.spi;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003bc:	60fb      	str	r3, [r7, #12]
	if (lcd_dc == lcd_write_command)  {
 80003be:	78bb      	ldrb	r3, [r7, #2]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d107      	bne.n	80003d4 <LCD_WRITE_DC+0x2c>
		LCD_DC_LOW
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80003c8:	461a      	mov	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003ce:	0412      	lsls	r2, r2, #16
 80003d0:	619a      	str	r2, [r3, #24]
 80003d2:	e004      	b.n	80003de <LCD_WRITE_DC+0x36>
	}
	else {
		LCD_DC_HI
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003dc:	619a      	str	r2, [r3, #24]
	}
	LL_SPI_TransmitData8(spi, data);
 80003de:	78fb      	ldrb	r3, [r7, #3]
 80003e0:	4619      	mov	r1, r3
 80003e2:	68f8      	ldr	r0, [r7, #12]
 80003e4:	f7ff ff02 	bl	80001ec <LL_SPI_TransmitData8>
	while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 80003e8:	bf00      	nop
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <LCD_WRITE_DC+0x42>
	while (spi->SR & SPI_SR_BSY)    ; //ждем когда SPI освободится
 80003f6:	bf00      	nop
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f9      	bne.n	80003f8 <LCD_WRITE_DC+0x50>
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <LCD_HardWareReset>:

void LCD_HardWareReset (LCD_Handler* lcd)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
	if (lcd->spi_data.reset_port) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	2b00      	cmp	r3, #0
 800041c:	d011      	beq.n	8000442 <LCD_HardWareReset+0x34>
		lcd->spi_data.reset_port->BSRR = (uint32_t)lcd->spi_data.reset_pin << 16U;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000422:	461a      	mov	r2, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000428:	0412      	lsls	r2, r2, #16
 800042a:	619a      	str	r2, [r3, #24]
		LL_mDelay(25);
 800042c:	2019      	movs	r0, #25
 800042e:	f004 fa6f 	bl	8004910 <LL_mDelay>
		lcd->spi_data.reset_port->BSRR = lcd->spi_data.reset_pin;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	619a      	str	r2, [r3, #24]
		LL_mDelay(25);
 800043c:	2019      	movs	r0, #25
 800043e:	f004 fa67 	bl	8004910 <LL_mDelay>
	}
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <LCD_String_Interpretator>:

//интерпретатор строк с управлящими кодами: "команда", "данные", "пауза", "завершение пакета"
void LCD_String_Interpretator(LCD_Handler* lcd, uint8_t *str)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
	SPI_TypeDef *spi = lcd->spi_data.spi;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000458:	60bb      	str	r3, [r7, #8]
	int i;
	while (LCD_GetState(lcd) == LCD_STATE_BUSY) ; //ждем когда дисплей освободится
 800045a:	bf00      	nop
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 fa16 	bl	800088e <LCD_GetState>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d0f9      	beq.n	800045c <LCD_String_Interpretator+0x12>
	if (!lcd->cs_control) { LCD_CS_LOW }
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800046e:	2b00      	cmp	r3, #0
 8000470:	d10b      	bne.n	800048a <LCD_String_Interpretator+0x40>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000476:	2b00      	cmp	r3, #0
 8000478:	d007      	beq.n	800048a <LCD_String_Interpretator+0x40>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000480:	461a      	mov	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000486:	0412      	lsls	r2, r2, #16
 8000488:	619a      	str	r2, [r3, #24]
	spi->CR1 &= ~ (SPI_CR1_BIDIMODE |  	//здесь задаем режим
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f423 422c 	bic.w	r2, r3, #44032	; 0xac00
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	601a      	str	r2, [r3, #0]
				   SPI_CR1_RXONLY |   	//  Transmit only
				   SPI_CR1_CRCEN | 		//выключаем аппаратный расчет CRC
				   SPI_CR1_DFF); 		//установим 8-битную передачу
	spi->CR1 |= SPI_CR1_SPE; // SPI включаем
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	601a      	str	r2, [r3, #0]
	while (1) {
		switch (*str++) {
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	603a      	str	r2, [r7, #0]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d039      	beq.n	8000522 <LCD_String_Interpretator+0xd8>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	dc3f      	bgt.n	8000532 <LCD_String_Interpretator+0xe8>
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d002      	beq.n	80004bc <LCD_String_Interpretator+0x72>
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d01e      	beq.n	80004f8 <LCD_String_Interpretator+0xae>
 80004ba:	e03a      	b.n	8000532 <LCD_String_Interpretator+0xe8>
			//управляющий код "команда"
			case LCD_UPR_COMMAND:
				//отправляем код команды контроллеру дисплея
				LCD_WRITE_DC(lcd, *str++, lcd_write_command);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	603a      	str	r2, [r7, #0]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4619      	mov	r1, r3
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f7ff ff6d 	bl	80003a8 <LCD_WRITE_DC>
				//количество параметров команды
				i = *str++;
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	1c5a      	adds	r2, r3, #1
 80004d2:	603a      	str	r2, [r7, #0]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	60fb      	str	r3, [r7, #12]
				//отправляем контроллеру дисплея параметры команды
				while(i--) {
 80004d8:	e008      	b.n	80004ec <LCD_String_Interpretator+0xa2>
					LCD_WRITE_DC(lcd, *str++, lcd_write_data);
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	1c5a      	adds	r2, r3, #1
 80004de:	603a      	str	r2, [r7, #0]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2201      	movs	r2, #1
 80004e4:	4619      	mov	r1, r3
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f7ff ff5e 	bl	80003a8 <LCD_WRITE_DC>
				while(i--) {
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	1e5a      	subs	r2, r3, #1
 80004f0:	60fa      	str	r2, [r7, #12]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1f1      	bne.n	80004da <LCD_String_Interpretator+0x90>
				}
				break;
 80004f6:	e032      	b.n	800055e <LCD_String_Interpretator+0x114>
			//управляющий код "данные"
			case LCD_UPR_DATA:
				//количество данных
				i = *str++;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	1c5a      	adds	r2, r3, #1
 80004fc:	603a      	str	r2, [r7, #0]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
				//отправляем контроллеру дисплея данные
				while(i--) {
 8000502:	e008      	b.n	8000516 <LCD_String_Interpretator+0xcc>
					LCD_WRITE_DC(lcd, *str++, lcd_write_data);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	603a      	str	r2, [r7, #0]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f7ff ff49 	bl	80003a8 <LCD_WRITE_DC>
				while(i--) {
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60fa      	str	r2, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f1      	bne.n	8000504 <LCD_String_Interpretator+0xba>
				}
				break;
 8000520:	e01d      	b.n	800055e <LCD_String_Interpretator+0x114>
			//управляющий код "пауза"
			case LCD_UPR_PAUSE:
				//ожидание в соответствии с параметром (0...255)
				LL_mDelay(*str++);
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	603a      	str	r2, [r7, #0]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f004 f9f0 	bl	8004910 <LL_mDelay>
				break;
 8000530:	e015      	b.n	800055e <LCD_String_Interpretator+0x114>
			//управляющий код "завершение пакета"
			case LCD_UPR_END:
			default:
				if (!lcd->cs_control) { LCD_CS_HI }
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000538:	2b00      	cmp	r3, #0
 800053a:	d109      	bne.n	8000550 <LCD_String_Interpretator+0x106>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	2b00      	cmp	r3, #0
 8000542:	d005      	beq.n	8000550 <LCD_String_Interpretator+0x106>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054e:	619a      	str	r2, [r3, #24]
				//выключаем spi
				spi->CR1 &= ~SPI_CR1_SPE;
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	601a      	str	r2, [r3, #0]
				return;
 800055c:	e000      	b.n	8000560 <LCD_String_Interpretator+0x116>
		switch (*str++) {
 800055e:	e7a0      	b.n	80004a2 <LCD_String_Interpretator+0x58>
		}
	}
}
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <LCD_DisplayAdd>:
							DisplaySleepOutCallback sleep_out,
							void *connection_data,
							LCD_DATA_BUS data_bus,
							LCD_BackLight_data bkl_data
					   )
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	4611      	mov	r1, r2
 8000574:	461a      	mov	r2, r3
 8000576:	460b      	mov	r3, r1
 8000578:	80fb      	strh	r3, [r7, #6]
 800057a:	4613      	mov	r3, r2
 800057c:	80bb      	strh	r3, [r7, #4]
#ifdef LCD_DYNAMIC_MEM
	LCD_Handler* lcd = (LCD_Handler*)malloc(sizeof(LCD_Handler));
#endif
	if (!lcd) return 0;
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d101      	bne.n	8000588 <LCD_DisplayAdd+0x20>
 8000584:	2300      	movs	r3, #0
 8000586:	e151      	b.n	800082c <LCD_DisplayAdd+0x2c4>
	memset(lcd, 0, sizeof(LCD_Handler));
 8000588:	2274      	movs	r2, #116	; 0x74
 800058a:	2100      	movs	r1, #0
 800058c:	68b8      	ldr	r0, [r7, #8]
 800058e:	f004 fa19 	bl	80049c4 <memset>
	LCD_DMA_TypeDef *hdma = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
	lcd->data_bus = data_bus;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800059c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	//инициализация данных подключения
	lcd->spi_data = *((LCD_SPI_Connected_data*)connection_data);
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80005a4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80005a8:	4615      	mov	r5, r2
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b2:	682b      	ldr	r3, [r5, #0]
 80005b4:	6023      	str	r3, [r4, #0]
	hdma = &lcd->spi_data.dma_tx;
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	3328      	adds	r3, #40	; 0x28
 80005ba:	61bb      	str	r3, [r7, #24]
	//настройка DMA
	if (hdma->dma) {
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d056      	beq.n	8000672 <LCD_DisplayAdd+0x10a>
		DMA_Stream_TypeDef *dma_x = ((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)hdma->dma + STREAM_OFFSET_TAB[hdma->stream])));
 80005c4:	69bb      	ldr	r3, [r7, #24]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	4a8b      	ldr	r2, [pc, #556]	; (80007fc <LCD_DisplayAdd+0x294>)
 80005d0:	5cd3      	ldrb	r3, [r2, r3]
 80005d2:	440b      	add	r3, r1
 80005d4:	617b      	str	r3, [r7, #20]
		dma_x->CR &= ~DMA_SxCR_EN; //отключаем канал DMA
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f023 0201 	bic.w	r2, r3, #1
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	601a      	str	r2, [r3, #0]
		while(dma_x->CR & DMA_SxCR_EN) ; //ждем отключения канала
 80005e2:	bf00      	nop
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f9      	bne.n	80005e4 <LCD_DisplayAdd+0x7c>
		if (lcd->data_bus == LCD_DATA_8BIT_BUS) {
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d10a      	bne.n	8000610 <LCD_DisplayAdd+0xa8>
			dma_x->CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	601a      	str	r2, [r3, #0]
			dma_x->CR |= LL_DMA_MDATAALIGN_BYTE | LL_DMA_PDATAALIGN_BYTE;
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	e010      	b.n	8000632 <LCD_DisplayAdd+0xca>
		}
		else if (lcd->data_bus == LCD_DATA_16BIT_BUS) {
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000616:	2b02      	cmp	r3, #2
 8000618:	d10b      	bne.n	8000632 <LCD_DisplayAdd+0xca>
			dma_x->CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE);
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	601a      	str	r2, [r3, #0]
			dma_x->CR |= LL_DMA_MDATAALIGN_HALFWORD | LL_DMA_PDATAALIGN_HALFWORD;
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f443 5220 	orr.w	r2, r3, #10240	; 0x2800
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	601a      	str	r2, [r3, #0]
		}
		//запрещаем прерывания по некоторым событиям канала передачи tx и режим двойного буфера
		dma_x->CR &= ~(DMA_SxCR_DMEIE | DMA_SxCR_HTIE | DMA_SxCR_DBM | DMA_SxCR_TEIE);
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800063a:	f023 030e 	bic.w	r3, r3, #14
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	6013      	str	r3, [r2, #0]
		dma_x->FCR &= ~DMA_SxFCR_FEIE;
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	615a      	str	r2, [r3, #20]
		//разрешаем прерывание по окончанию передачи
		dma_x->CR |= DMA_SxCR_TCIE;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f043 0210 	orr.w	r2, r3, #16
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	601a      	str	r2, [r3, #0]
		dma_x->CR &= ~DMA_SxCR_PINC; //инкремент адреса периферии отключен
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	601a      	str	r2, [r3, #0]
		dma_x->CR |= DMA_SxCR_MINC;  //инкремент адреса памяти включен
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	601a      	str	r2, [r3, #0]
	}
	//настройка ориентации дисплея и смещения начала координат
	uint16_t max_res = max(resolution1, resolution2);
 8000672:	88ba      	ldrh	r2, [r7, #4]
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	4293      	cmp	r3, r2
 8000678:	bf38      	it	cc
 800067a:	4613      	movcc	r3, r2
 800067c:	827b      	strh	r3, [r7, #18]
	uint16_t min_res = min(resolution1, resolution2);
 800067e:	88ba      	ldrh	r2, [r7, #4]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4293      	cmp	r3, r2
 8000684:	bf28      	it	cs
 8000686:	4613      	movcs	r3, r2
 8000688:	823b      	strh	r3, [r7, #16]
	if (orientation==PAGE_ORIENTATION_PORTRAIT || orientation==PAGE_ORIENTATION_PORTRAIT_MIRROR) {
 800068a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <LCD_DisplayAdd+0x132>
 8000692:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000696:	2b02      	cmp	r3, #2
 8000698:	d12f      	bne.n	80006fa <LCD_DisplayAdd+0x192>
		lcd->Width = min_res;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	8a3a      	ldrh	r2, [r7, #16]
 800069e:	809a      	strh	r2, [r3, #4]
		lcd->Height = max_res;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	8a7a      	ldrh	r2, [r7, #18]
 80006a4:	80da      	strh	r2, [r3, #6]
		lcd->Width_Controller = width_controller;
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80006aa:	801a      	strh	r2, [r3, #0]
		lcd->Height_Controller = height_controller;
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80006b0:	805a      	strh	r2, [r3, #2]
		if (orientation==PAGE_ORIENTATION_PORTRAIT) {
 80006b2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d106      	bne.n	80006c8 <LCD_DisplayAdd+0x160>
			lcd->x_offs = w_offs;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80006be:	815a      	strh	r2, [r3, #10]
			lcd->y_offs = h_offs;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80006c4:	819a      	strh	r2, [r3, #12]
		if (orientation==PAGE_ORIENTATION_PORTRAIT) {
 80006c6:	e055      	b.n	8000774 <LCD_DisplayAdd+0x20c>
		}
		else {
			lcd->x_offs = lcd->Width_Controller - lcd->Width - w_offs;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	881a      	ldrh	r2, [r3, #0]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b21a      	sxth	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	815a      	strh	r2, [r3, #10]
			lcd->y_offs = lcd->Height_Controller - lcd->Height - h_offs;
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	885a      	ldrh	r2, [r3, #2]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	88db      	ldrh	r3, [r3, #6]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b21a      	sxth	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	819a      	strh	r2, [r3, #12]
		if (orientation==PAGE_ORIENTATION_PORTRAIT) {
 80006f8:	e03c      	b.n	8000774 <LCD_DisplayAdd+0x20c>
		}
	}
	else if (orientation==PAGE_ORIENTATION_LANDSCAPE || orientation==PAGE_ORIENTATION_LANDSCAPE_MIRROR)	{
 80006fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d003      	beq.n	800070a <LCD_DisplayAdd+0x1a2>
 8000702:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000706:	2b03      	cmp	r3, #3
 8000708:	d12f      	bne.n	800076a <LCD_DisplayAdd+0x202>
		lcd->Width = max_res;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	8a7a      	ldrh	r2, [r7, #18]
 800070e:	809a      	strh	r2, [r3, #4]
		lcd->Height = min_res;
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	8a3a      	ldrh	r2, [r7, #16]
 8000714:	80da      	strh	r2, [r3, #6]
		lcd->Width_Controller = height_controller;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800071a:	801a      	strh	r2, [r3, #0]
		lcd->Height_Controller = width_controller;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000720:	805a      	strh	r2, [r3, #2]
		if (orientation==PAGE_ORIENTATION_LANDSCAPE) {
 8000722:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10f      	bne.n	800074a <LCD_DisplayAdd+0x1e2>
			lcd->x_offs = h_offs;
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800072e:	815a      	strh	r2, [r3, #10]
			lcd->y_offs = lcd->Height_Controller - lcd->Height - w_offs;
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	885a      	ldrh	r2, [r3, #2]
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	88db      	ldrh	r3, [r3, #6]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	b29a      	uxth	r2, r3
 800073c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	b29b      	uxth	r3, r3
 8000742:	b21a      	sxth	r2, r3
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	819a      	strh	r2, [r3, #12]
		if (orientation==PAGE_ORIENTATION_LANDSCAPE) {
 8000748:	e014      	b.n	8000774 <LCD_DisplayAdd+0x20c>
		}
		else {
			lcd->x_offs = lcd->Width_Controller - lcd->Width - h_offs;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	881a      	ldrh	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	889b      	ldrh	r3, [r3, #4]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	b29a      	uxth	r2, r3
 8000756:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	b21a      	sxth	r2, r3
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	815a      	strh	r2, [r3, #10]
			lcd->y_offs = w_offs;
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000766:	819a      	strh	r2, [r3, #12]
		if (orientation==PAGE_ORIENTATION_LANDSCAPE) {
 8000768:	e004      	b.n	8000774 <LCD_DisplayAdd+0x20c>
		}
	}
	else {
		LCD_Delete(lcd);
 800076a:	68b8      	ldr	r0, [r7, #8]
 800076c:	f000 f862 	bl	8000834 <LCD_Delete>
		return 0;
 8000770:	2300      	movs	r3, #0
 8000772:	e05b      	b.n	800082c <LCD_DisplayAdd+0x2c4>
	}

	if (lcd->Width_Controller < lcd->Width ||
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	881a      	ldrh	r2, [r3, #0]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	889b      	ldrh	r3, [r3, #4]
 800077c:	429a      	cmp	r2, r3
 800077e:	d30b      	bcc.n	8000798 <LCD_DisplayAdd+0x230>
		lcd->Height_Controller < lcd->Height ||
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	885a      	ldrh	r2, [r3, #2]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	88db      	ldrh	r3, [r3, #6]
	if (lcd->Width_Controller < lcd->Width ||
 8000788:	429a      	cmp	r2, r3
 800078a:	d305      	bcc.n	8000798 <LCD_DisplayAdd+0x230>
		lcd->Height_Controller < lcd->Height ||
 800078c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <LCD_DisplayAdd+0x230>
		init==NULL ||
 8000792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000794:	2b00      	cmp	r3, #0
 8000796:	d104      	bne.n	80007a2 <LCD_DisplayAdd+0x23a>
		set_win==NULL )	{
		LCD_Delete(lcd);
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	f000 f84b 	bl	8000834 <LCD_Delete>
		return 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	e044      	b.n	800082c <LCD_DisplayAdd+0x2c4>
	}
	lcd->Orientation = orientation;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80007a8:	721a      	strb	r2, [r3, #8]
	lcd->Init_callback = init;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007ae:	615a      	str	r2, [r3, #20]
	lcd->SetActiveWindow_callback = set_win;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80007b4:	619a      	str	r2, [r3, #24]
	lcd->SleepIn_callback = sleep_in;
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007ba:	61da      	str	r2, [r3, #28]
	lcd->SleepOut_callback = sleep_out;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007c0:	621a      	str	r2, [r3, #32]
	lcd->bkl_data = bkl_data;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80007c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd->display_number = 0;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	lcd->next = 0;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	2200      	movs	r2, #0
 80007de:	671a      	str	r2, [r3, #112]	; 0x70
	lcd->prev = 0;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	2200      	movs	r2, #0
 80007e4:	66da      	str	r2, [r3, #108]	; 0x6c
	lcd->tmp_buf = 0;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	2200      	movs	r2, #0
 80007ea:	65da      	str	r2, [r3, #92]	; 0x5c
	if (!lcds) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d101      	bne.n	80007f6 <LCD_DisplayAdd+0x28e>
		return lcd;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	e01a      	b.n	800082c <LCD_DisplayAdd+0x2c4>
	}
	LCD_Handler *prev = lcds;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	61fb      	str	r3, [r7, #28]
	while (prev->next) {
 80007fa:	e00c      	b.n	8000816 <LCD_DisplayAdd+0x2ae>
 80007fc:	08004ac0 	.word	0x08004ac0
		prev = (LCD_Handler *)prev->next;
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000804:	61fb      	str	r3, [r7, #28]
		lcd->display_number++;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800080c:	3301      	adds	r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	while (prev->next) {
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f0      	bne.n	8000800 <LCD_DisplayAdd+0x298>
	}
	lcd->prev = (void*)prev;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	66da      	str	r2, [r3, #108]	; 0x6c
	prev->next = (void*)lcd;
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	671a      	str	r2, [r3, #112]	; 0x70
	return lcd;
 800082a:	68bb      	ldr	r3, [r7, #8]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bdb0      	pop	{r4, r5, r7, pc}

08000834 <LCD_Delete>:

//удаляет дисплей
void LCD_Delete(LCD_Handler* lcd)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	if (lcd) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d004      	beq.n	800084c <LCD_Delete+0x18>
#ifdef LCD_DYNAMIC_MEM
		if (lcd->tmp_buf) {
			free(lcd->tmp_buf);
		}
#endif
		memset(lcd, 0, sizeof(LCD_Handler));
 8000842:	2274      	movs	r2, #116	; 0x74
 8000844:	2100      	movs	r1, #0
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f004 f8bc 	bl	80049c4 <memset>
#ifdef LCD_DYNAMIC_MEM
		free(lcd);
#endif
	}
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <LCD_Init>:

//инициализирует дисплей
void LCD_Init(LCD_Handler* lcd)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	LCD_HardWareReset(lcd);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fdd6 	bl	800040e <LCD_HardWareReset>
	LCD_String_Interpretator(lcd, lcd->Init_callback(lcd->Orientation));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	7a12      	ldrb	r2, [r2, #8]
 800086a:	4610      	mov	r0, r2
 800086c:	4798      	blx	r3
 800086e:	4603      	mov	r3, r0
 8000870:	4619      	mov	r1, r3
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff fde9 	bl	800044a <LCD_String_Interpretator>
	LCD_SetBackLight(lcd, lcd->bkl_data.bk_percent);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f819 	bl	80008b8 <LCD_SetBackLight>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <LCD_GetState>:
}

//возвращает статус дисплея: занят либо свободен (требуется для отправки новых данных на дисплей)
//дисплей занят, если занято spi, к которому он подключен
inline LCD_State LCD_GetState(LCD_Handler* lcd)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	if (lcd->spi_data.spi->CR1 & SPI_CR1_SPE) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <LCD_GetState+0x1a>
		return LCD_STATE_BUSY;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <LCD_GetState+0x1c>
	}
	return LCD_STATE_READY;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
	...

080008b8 <LCD_SetBackLight>:

//управление подсветкой
void LCD_SetBackLight(LCD_Handler* lcd, uint8_t bk_percent)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	if (bk_percent > 100) {
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	2b64      	cmp	r3, #100	; 0x64
 80008c8:	d901      	bls.n	80008ce <LCD_SetBackLight+0x16>
		bk_percent = 100;
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	70fb      	strb	r3, [r7, #3]
	}
	lcd->bkl_data.bk_percent = bk_percent;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	78fa      	ldrb	r2, [r7, #3]
 80008d2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	//подсветка с использованием PWM
	if (lcd->bkl_data.htim_bk) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d04b      	beq.n	8000976 <LCD_SetBackLight+0xbe>
		//вычисляем % яркости, как часть от периода счетчика
		uint32_t bk_value = lcd->bkl_data.htim_bk->ARR * bk_percent / 100;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e4:	78fa      	ldrb	r2, [r7, #3]
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	4a31      	ldr	r2, [pc, #196]	; (80009b0 <LCD_SetBackLight+0xf8>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	095b      	lsrs	r3, r3, #5
 80008f2:	60fb      	str	r3, [r7, #12]
		//задаем скважность PWM конкретного канала
		switch(lcd->bkl_data.channel_htim_bk) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008fc:	d01c      	beq.n	8000938 <LCD_SetBackLight+0x80>
 80008fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000902:	d81e      	bhi.n	8000942 <LCD_SetBackLight+0x8a>
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d011      	beq.n	800092e <LCD_SetBackLight+0x76>
 800090a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800090e:	d818      	bhi.n	8000942 <LCD_SetBackLight+0x8a>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d002      	beq.n	800091a <LCD_SetBackLight+0x62>
 8000914:	2b10      	cmp	r3, #16
 8000916:	d005      	beq.n	8000924 <LCD_SetBackLight+0x6c>
				break;
			case LL_TIM_CHANNEL_CH4:
				lcd->bkl_data.htim_bk->CCR4 = bk_value;
				break;
			default:
				break;
 8000918:	e013      	b.n	8000942 <LCD_SetBackLight+0x8a>
				lcd->bkl_data.htim_bk->CCR1 = bk_value;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000922:	e00f      	b.n	8000944 <LCD_SetBackLight+0x8c>
				lcd->bkl_data.htim_bk->CCR2 = bk_value;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 800092c:	e00a      	b.n	8000944 <LCD_SetBackLight+0x8c>
				lcd->bkl_data.htim_bk->CCR3 = bk_value;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000936:	e005      	b.n	8000944 <LCD_SetBackLight+0x8c>
				lcd->bkl_data.htim_bk->CCR4 = bk_value;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	641a      	str	r2, [r3, #64]	; 0x40
				break;
 8000940:	e000      	b.n	8000944 <LCD_SetBackLight+0x8c>
				break;
 8000942:	bf00      	nop
		}
		//если таймер не запущен, то запускаем его
		if (!(lcd->bkl_data.htim_bk->CR1 & TIM_CR1_CEN)) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	2b00      	cmp	r3, #0
 8000950:	d127      	bne.n	80009a2 <LCD_SetBackLight+0xea>
			//включаем канал
			lcd->bkl_data.htim_bk->CCER |= lcd->bkl_data.channel_htim_bk;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	6a19      	ldr	r1, [r3, #32]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	430a      	orrs	r2, r1
 8000962:	621a      	str	r2, [r3, #32]
			//включаем счетчик
			lcd->bkl_data.htim_bk->CR1 |= TIM_CR1_CEN;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f042 0201 	orr.w	r2, r2, #1
 8000972:	601a      	str	r2, [r3, #0]
		}
		else {
			lcd->bkl_data.blk_port->BSRR = (uint32_t)lcd->bkl_data.blk_pin << 16U;
		}
	}
}
 8000974:	e015      	b.n	80009a2 <LCD_SetBackLight+0xea>
	else if (lcd->bkl_data.blk_port) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800097a:	2b00      	cmp	r3, #0
 800097c:	d011      	beq.n	80009a2 <LCD_SetBackLight+0xea>
		if (bk_percent) {
 800097e:	78fb      	ldrb	r3, [r7, #3]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d006      	beq.n	8000992 <LCD_SetBackLight+0xda>
			lcd->bkl_data.blk_port->BSRR = lcd->bkl_data.blk_pin;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800098e:	619a      	str	r2, [r3, #24]
}
 8000990:	e007      	b.n	80009a2 <LCD_SetBackLight+0xea>
			lcd->bkl_data.blk_port->BSRR = (uint32_t)lcd->bkl_data.blk_pin << 16U;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8000998:	461a      	mov	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800099e:	0412      	lsls	r2, r2, #16
 80009a0:	619a      	str	r2, [r3, #24]
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	51eb851f 	.word	0x51eb851f

080009b4 <LCD_SetActiveWindow>:
	LCD_SetBackLight(lcd, lcd->bkl_data.bk_percent);
}

//установка на дисплее окна вывода
void LCD_SetActiveWindow(LCD_Handler* lcd, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80009b4:	b5b0      	push	{r4, r5, r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	4608      	mov	r0, r1
 80009be:	4611      	mov	r1, r2
 80009c0:	461a      	mov	r2, r3
 80009c2:	4603      	mov	r3, r0
 80009c4:	817b      	strh	r3, [r7, #10]
 80009c6:	460b      	mov	r3, r1
 80009c8:	813b      	strh	r3, [r7, #8]
 80009ca:	4613      	mov	r3, r2
 80009cc:	80fb      	strh	r3, [r7, #6]
	LCD_String_Interpretator(lcd, lcd->SetActiveWindow_callback(x1 + lcd->x_offs, y1 + lcd->y_offs, x2 + lcd->x_offs, y2 + lcd->y_offs));
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	699c      	ldr	r4, [r3, #24]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	897b      	ldrh	r3, [r7, #10]
 80009dc:	4413      	add	r3, r2
 80009de:	b298      	uxth	r0, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	893b      	ldrh	r3, [r7, #8]
 80009ea:	4413      	add	r3, r2
 80009ec:	b299      	uxth	r1, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	88fb      	ldrh	r3, [r7, #6]
 80009f8:	4413      	add	r3, r2
 80009fa:	b29d      	uxth	r5, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	8c3b      	ldrh	r3, [r7, #32]
 8000a06:	4413      	add	r3, r2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	462a      	mov	r2, r5
 8000a0c:	47a0      	blx	r4
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4619      	mov	r1, r3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fd19 	bl	800044a <LCD_String_Interpretator>
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bdb0      	pop	{r4, r5, r7, pc}

08000a20 <LCD_WriteData>:

//вывод блока данных на дисплей
void LCD_WriteData(LCD_Handler *lcd, uint16_t *data, uint32_t len)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	SPI_TypeDef *spi = lcd->spi_data.spi;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	613b      	str	r3, [r7, #16]
	while (LCD_GetState(lcd) == LCD_STATE_BUSY) ; //ждем когда дисплей освободится
 8000a32:	bf00      	nop
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ff2a 	bl	800088e <LCD_GetState>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d0f9      	beq.n	8000a34 <LCD_WriteData+0x14>
	if (!lcd->cs_control) { LCD_CS_LOW }
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10b      	bne.n	8000a62 <LCD_WriteData+0x42>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <LCD_WriteData+0x42>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000a58:	461a      	mov	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	0412      	lsls	r2, r2, #16
 8000a60:	619a      	str	r2, [r3, #24]
	if (!lcd->dc_control) { LCD_DC_HI  }
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d104      	bne.n	8000a76 <LCD_WriteData+0x56>
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a74:	619a      	str	r2, [r3, #24]
	spi->CR1 &= ~ (SPI_CR1_BIDIMODE |  	//здесь задаем режим
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f423 422c 	bic.w	r2, r3, #44032	; 0xac00
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	601a      	str	r2, [r3, #0]
				   SPI_CR1_RXONLY |   	//  Transmit only
				   SPI_CR1_CRCEN | 		//выключаем аппаратный расчет CRC
				   SPI_CR1_DFF); 		//8-битная передача
	if (lcd->data_bus == LCD_DATA_16BIT_BUS) {
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d105      	bne.n	8000a98 <LCD_WriteData+0x78>
		spi->CR1 |= SPI_CR1_DFF; //16-битная передача
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	601a      	str	r2, [r3, #0]
	}
	spi->CR1 |= SPI_CR1_SPE; //SPI включаем
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	601a      	str	r2, [r3, #0]
	if (lcd->data_bus == LCD_DATA_16BIT_BUS) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d115      	bne.n	8000ada <LCD_WriteData+0xba>
		while (len--) {
 8000aae:	e00e      	b.n	8000ace <LCD_WriteData+0xae>
			LL_SPI_TransmitData16(spi, *data++); //записываем данные в регистр
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c9a      	adds	r2, r3, #2
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	6938      	ldr	r0, [r7, #16]
 8000abc:	f7ff fba8 	bl	8000210 <LL_SPI_TransmitData16>
			while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 8000ac0:	bf00      	nop
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f9      	beq.n	8000ac2 <LCD_WriteData+0xa2>
		while (len--) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1e5a      	subs	r2, r3, #1
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1eb      	bne.n	8000ab0 <LCD_WriteData+0x90>
 8000ad8:	e019      	b.n	8000b0e <LCD_WriteData+0xee>
		}
	}
	else {
		len *= 2;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
		uint8_t *data1 = (uint8_t*)data;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	617b      	str	r3, [r7, #20]
		while (len--)	{
 8000ae4:	e00e      	b.n	8000b04 <LCD_WriteData+0xe4>
			LL_SPI_TransmitData8(spi, *data1++); //записываем данные в регистр
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	617a      	str	r2, [r7, #20]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	6938      	ldr	r0, [r7, #16]
 8000af2:	f7ff fb7b 	bl	80001ec <LL_SPI_TransmitData8>
			while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 8000af6:	bf00      	nop
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f9      	beq.n	8000af8 <LCD_WriteData+0xd8>
		while (len--)	{
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	1e5a      	subs	r2, r3, #1
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1eb      	bne.n	8000ae6 <LCD_WriteData+0xc6>
		}
	}
	while (spi->SR & SPI_SR_BSY) ; //ждем когда SPI освободится
 8000b0e:	bf00      	nop
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1f9      	bne.n	8000b10 <LCD_WriteData+0xf0>
	if (!lcd->cs_control) { LCD_CS_HI }
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d109      	bne.n	8000b3a <LCD_WriteData+0x11a>
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <LCD_WriteData+0x11a>
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	619a      	str	r2, [r3, #24]
	//выключаем spi
	spi->CR1 &= ~SPI_CR1_SPE;
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	601a      	str	r2, [r3, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <LCD_FillWindow>:
	}
	LCD_WriteData(lcd, data, len);
}

void LCD_FillWindow(LCD_Handler* lcd, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint32_t color)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b090      	sub	sp, #64	; 0x40
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	4608      	mov	r0, r1
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4603      	mov	r3, r0
 8000b60:	817b      	strh	r3, [r7, #10]
 8000b62:	460b      	mov	r3, r1
 8000b64:	813b      	strh	r3, [r7, #8]
 8000b66:	4613      	mov	r3, r2
 8000b68:	80fb      	strh	r3, [r7, #6]
	uint16_t tmp;
	if (x1 > x2) { tmp = x1; x1 = x2; x2 = tmp; }
 8000b6a:	897a      	ldrh	r2, [r7, #10]
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d905      	bls.n	8000b7e <LCD_FillWindow+0x2e>
 8000b72:	897b      	ldrh	r3, [r7, #10]
 8000b74:	867b      	strh	r3, [r7, #50]	; 0x32
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	817b      	strh	r3, [r7, #10]
 8000b7a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b7c:	80fb      	strh	r3, [r7, #6]
	if (y1 > y2) { tmp = y1; y1 = y2; y2 = tmp; }
 8000b7e:	893a      	ldrh	r2, [r7, #8]
 8000b80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d907      	bls.n	8000b98 <LCD_FillWindow+0x48>
 8000b88:	893b      	ldrh	r3, [r7, #8]
 8000b8a:	867b      	strh	r3, [r7, #50]	; 0x32
 8000b8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b90:	813b      	strh	r3, [r7, #8]
 8000b92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	if (x1 > lcd->Width - 1 || y1 > lcd->Height - 1) return;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	889b      	ldrh	r3, [r3, #4]
 8000b9c:	897a      	ldrh	r2, [r7, #10]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	f080 813f 	bcs.w	8000e22 <LCD_FillWindow+0x2d2>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	88db      	ldrh	r3, [r3, #6]
 8000ba8:	893a      	ldrh	r2, [r7, #8]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	f080 8139 	bcs.w	8000e22 <LCD_FillWindow+0x2d2>
	if (x2 > lcd->Width - 1)  x2 = lcd->Width - 1;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	889b      	ldrh	r3, [r3, #4]
 8000bb4:	88fa      	ldrh	r2, [r7, #6]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d303      	bcc.n	8000bc2 <LCD_FillWindow+0x72>
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	889b      	ldrh	r3, [r3, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	80fb      	strh	r3, [r7, #6]
	if (y2 > lcd->Height - 1) y2 = lcd->Height - 1;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	88db      	ldrh	r3, [r3, #6]
 8000bc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d304      	bcc.n	8000bd8 <LCD_FillWindow+0x88>
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	88db      	ldrh	r3, [r3, #6]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint32_t len = (x2 - x1 + 1) * (y2 - y1 + 1); //количество закрашиваемых пикселей
 8000bd8:	88fa      	ldrh	r2, [r7, #6]
 8000bda:	897b      	ldrh	r3, [r7, #10]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	3301      	adds	r3, #1
 8000be0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8000be4:	893a      	ldrh	r2, [r7, #8]
 8000be6:	1a8a      	subs	r2, r1, r2
 8000be8:	3201      	adds	r2, #1
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
	LCD_SetActiveWindow(lcd, x1, y1, x2, y2);
 8000bf0:	88f8      	ldrh	r0, [r7, #6]
 8000bf2:	893a      	ldrh	r2, [r7, #8]
 8000bf4:	8979      	ldrh	r1, [r7, #10]
 8000bf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f7ff fed8 	bl	80009b4 <LCD_SetActiveWindow>
	if (!lcd->cs_control) LCD_CS_LOW
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10b      	bne.n	8000c26 <LCD_FillWindow+0xd6>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <LCD_FillWindow+0xd6>
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	0412      	lsls	r2, r2, #16
 8000c24:	619a      	str	r2, [r3, #24]
	if (!lcd->dc_control) LCD_DC_HI
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d104      	bne.n	8000c3a <LCD_FillWindow+0xea>
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c38:	619a      	str	r2, [r3, #24]
	uint16_t color16 = lcd->fill_color = LCD_Color_24b_to_16b(lcd, color);
 8000c3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f000 fb5d 	bl	80012fc <LCD_Color_24b_to_16b>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8000c52:	863b      	strh	r3, [r7, #48]	; 0x30
	SPI_TypeDef *spi = lcd->spi_data.spi;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
	spi->CR1 &= ~ (SPI_CR1_BIDIMODE |  	//здесь задаем режим
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f423 422c 	bic.w	r2, r3, #44032	; 0xac00
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	601a      	str	r2, [r3, #0]
				   SPI_CR1_RXONLY |   	//  Transmit only
				   SPI_CR1_CRCEN | 		//выключаем аппаратный расчет CRC
				   SPI_CR1_DFF); 		//8-битная передача
	if (lcd->data_bus == LCD_DATA_16BIT_BUS) {
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d105      	bne.n	8000c7c <LCD_FillWindow+0x12c>
		spi->CR1 |= SPI_CR1_DFF; //16-битная передача
 8000c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	601a      	str	r2, [r3, #0]
	}
	spi->CR1 |= SPI_CR1_SPE; // SPI включаем
 8000c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c86:	601a      	str	r2, [r3, #0]
	if (lcd->spi_data.dma_tx.dma)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d068      	beq.n	8000d62 <LCD_FillWindow+0x212>
	{
		if (lcd->data_bus == LCD_DATA_8BIT_BUS)	{
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d102      	bne.n	8000ca0 <LCD_FillWindow+0x150>
			len *= 2;
 8000c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
		}
		DMA_TypeDef *dma_x = lcd->spi_data.dma_tx.dma;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t stream = lcd->spi_data.dma_tx.stream;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	623b      	str	r3, [r7, #32]
		DMA_Stream_TypeDef *dma_TX = ((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)dma_x + STREAM_OFFSET_TAB[stream])));
 8000cac:	4a5f      	ldr	r2, [pc, #380]	; (8000e2c <LCD_FillWindow+0x2dc>)
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	4413      	add	r3, r2
 8000cba:	61fb      	str	r3, [r7, #28]
		uint8_t shift[8] = {0, 6, 16, 22, 0, 6, 16, 22}; //битовое смещение во флаговых регистрах IFCR (L и H)
 8000cbc:	4a5c      	ldr	r2, [pc, #368]	; (8000e30 <LCD_FillWindow+0x2e0>)
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc6:	e883 0003 	stmia.w	r3, {r0, r1}
		volatile uint32_t *ifcr_tx = (stream > 3) ? &(dma_x->HIFCR) : &(dma_x->LIFCR);
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d902      	bls.n	8000cd6 <LCD_FillWindow+0x186>
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	330c      	adds	r3, #12
 8000cd4:	e001      	b.n	8000cda <LCD_FillWindow+0x18a>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	3308      	adds	r3, #8
 8000cda:	61bb      	str	r3, [r7, #24]
		//сбрасываем флаги прерываний tx
		*ifcr_tx = 0x3F<<shift[stream];
 8000cdc:	f107 0210 	add.w	r2, r7, #16
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	233f      	movs	r3, #63	; 0x3f
 8000cea:	4093      	lsls	r3, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	601a      	str	r2, [r3, #0]
		//разрешаем spi отправлять запросы к DMA
		spi->CR2 |= SPI_CR2_TXDMAEN;
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f043 0202 	orr.w	r2, r3, #2
 8000cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfc:	605a      	str	r2, [r3, #4]
		//настраиваем адреса, длину, инкременты
		dma_TX->PAR = (uint32_t)(&spi->DR); //приемник периферия - адрес регистра DR spi
 8000cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d00:	330c      	adds	r3, #12
 8000d02:	461a      	mov	r2, r3
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	609a      	str	r2, [r3, #8]
		dma_TX->M0AR = (uint32_t)&lcd->fill_color; //источник память - адрес буфера исходящих данных
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3368      	adds	r3, #104	; 0x68
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	60da      	str	r2, [r3, #12]
		dma_TX->CR &= ~DMA_SxCR_PINC; //инкремент адреса периферии отключен
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	601a      	str	r2, [r3, #0]
		dma_TX->CR &= ~DMA_SxCR_MINC; //инкремент адреса памяти отключен
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	601a      	str	r2, [r3, #0]
		if (len <= 65535) {
 8000d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d30:	d206      	bcs.n	8000d40 <LCD_FillWindow+0x1f0>
			dma_TX->NDTR = (uint32_t)len; //размер передаваемых данных
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d36:	605a      	str	r2, [r3, #4]
			lcd->size_mem = 0;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	661a      	str	r2, [r3, #96]	; 0x60
 8000d3e:	e009      	b.n	8000d54 <LCD_FillWindow+0x204>
		}
		else {
			dma_TX->NDTR = 65535;
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d46:	605a      	str	r2, [r3, #4]
			lcd->size_mem = len - 65535;
 8000d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4a:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8000d4e:	3bff      	subs	r3, #255	; 0xff
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	6613      	str	r3, [r2, #96]	; 0x60
		}
		dma_TX->CR |= (DMA_SxCR_EN); //включение канала передачи (старт DMA передачи)
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f043 0201 	orr.w	r2, r3, #1
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	e060      	b.n	8000e24 <LCD_FillWindow+0x2d4>
		return;
	}
	if (lcd->data_bus == LCD_DATA_16BIT_BUS) {
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d112      	bne.n	8000d92 <LCD_FillWindow+0x242>
		while(len--) {
 8000d6c:	e00b      	b.n	8000d86 <LCD_FillWindow+0x236>
			LL_SPI_TransmitData16(spi, color16); //записываем данные в регистр
 8000d6e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d70:	4619      	mov	r1, r3
 8000d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d74:	f7ff fa4c 	bl	8000210 <LL_SPI_TransmitData16>
			while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 8000d78:	bf00      	nop
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f9      	beq.n	8000d7a <LCD_FillWindow+0x22a>
		while(len--) {
 8000d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	637a      	str	r2, [r7, #52]	; 0x34
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1ee      	bne.n	8000d6e <LCD_FillWindow+0x21e>
 8000d90:	e02a      	b.n	8000de8 <LCD_FillWindow+0x298>
		}
	}
	else {
		uint8_t color1 = color16 & 0xFF, color2 = color16 >> 8;
 8000d92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000d98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		while(len--) {
 8000da2:	e01c      	b.n	8000dde <LCD_FillWindow+0x28e>
			LL_SPI_TransmitData8(spi, color1);
 8000da4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000da8:	4619      	mov	r1, r3
 8000daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dac:	f7ff fa1e 	bl	80001ec <LL_SPI_TransmitData8>
			while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 8000db0:	bf00      	nop
 8000db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f9      	beq.n	8000db2 <LCD_FillWindow+0x262>
			LL_SPI_TransmitData8(spi, color2);
 8000dbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000dc6:	f7ff fa11 	bl	80001ec <LL_SPI_TransmitData8>
			while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 8000dca:	bf00      	nop
 8000dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0f9      	beq.n	8000dcc <LCD_FillWindow+0x27c>
			len--;
 8000dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
		while(len--) {
 8000dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	637a      	str	r2, [r7, #52]	; 0x34
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1dd      	bne.n	8000da4 <LCD_FillWindow+0x254>
		}
	}
	while (spi->SR & SPI_SR_BSY) ; //ждем когда SPI освободится
 8000de8:	bf00      	nop
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f9      	bne.n	8000dea <LCD_FillWindow+0x29a>
	if (!lcd->cs_control) LCD_CS_HI
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d109      	bne.n	8000e14 <LCD_FillWindow+0x2c4>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d005      	beq.n	8000e14 <LCD_FillWindow+0x2c4>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	619a      	str	r2, [r3, #24]
	//выключаем spi
	spi->CR1 &= ~SPI_CR1_SPE;
 8000e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e000      	b.n	8000e24 <LCD_FillWindow+0x2d4>
	if (x1 > lcd->Width - 1 || y1 > lcd->Height - 1) return;
 8000e22:	bf00      	nop
}
 8000e24:	3738      	adds	r7, #56	; 0x38
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	08004ac0 	.word	0x08004ac0
 8000e30:	08004a74 	.word	0x08004a74

08000e34 <LCD_Fill>:

/* Закрашивает весь дисплей заданным цветом */
void LCD_Fill(LCD_Handler* lcd, uint32_t color)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	LCD_FillWindow(lcd, 0, 0, lcd->Width - 1, lcd->Height - 1, color);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	889b      	ldrh	r3, [r3, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	b299      	uxth	r1, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	88db      	ldrh	r3, [r3, #6]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	9201      	str	r2, [sp, #4]
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	460b      	mov	r3, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fe78 	bl	8000b50 <LCD_FillWindow>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <LCD_DrawPixel>:

/* Рисует точку в заданных координатах */
void LCD_DrawPixel(LCD_Handler* lcd, int16_t x, int16_t y, uint32_t color)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	460b      	mov	r3, r1
 8000e74:	817b      	strh	r3, [r7, #10]
 8000e76:	4613      	mov	r3, r2
 8000e78:	813b      	strh	r3, [r7, #8]
	if (x > lcd->Width - 1 || y > lcd->Height - 1 || x < 0 || y < 0)	return;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	889b      	ldrh	r3, [r3, #4]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dd25      	ble.n	8000ed4 <LCD_DrawPixel+0x6c>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	88db      	ldrh	r3, [r3, #6]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dd1e      	ble.n	8000ed4 <LCD_DrawPixel+0x6c>
 8000e96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db1a      	blt.n	8000ed4 <LCD_DrawPixel+0x6c>
 8000e9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db16      	blt.n	8000ed4 <LCD_DrawPixel+0x6c>
	LCD_SetActiveWindow(lcd, x, y, x, y);
 8000ea6:	8979      	ldrh	r1, [r7, #10]
 8000ea8:	893a      	ldrh	r2, [r7, #8]
 8000eaa:	8978      	ldrh	r0, [r7, #10]
 8000eac:	893b      	ldrh	r3, [r7, #8]
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff fd7e 	bl	80009b4 <LCD_SetActiveWindow>
	uint16_t color1 = LCD_Color_24b_to_16b(lcd, color);
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 fa1e 	bl	80012fc <LCD_Color_24b_to_16b>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	82fb      	strh	r3, [r7, #22]
	LCD_WriteData(lcd, &color1, 1);
 8000ec4:	f107 0316 	add.w	r3, r7, #22
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff fda7 	bl	8000a20 <LCD_WriteData>
 8000ed2:	e000      	b.n	8000ed6 <LCD_DrawPixel+0x6e>
	if (x > lcd->Width - 1 || y > lcd->Height - 1 || x < 0 || y < 0)	return;
 8000ed4:	bf00      	nop
}
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <LCD_WriteChar>:
 *    LCD_SYMBOL_PRINT_FAST - быстрый вывод с полным затиранием знакоместа;
 *    LCD_SYMBOL_PRINT_PSETBYPSET - вывод символа по точкам, при этом цвет окружения bgcolor игнорируется (режим наложения).
 * Ширина символа до 32 пикселей (4 байта на строку). Высота символа библиотекой не ограничивается.
 */
void LCD_WriteChar(LCD_Handler* lcd, uint16_t x, uint16_t y, char ch, FontDef *font, uint32_t txcolor, uint32_t bgcolor, LCD_PrintSymbolMode modesym)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b090      	sub	sp, #64	; 0x40
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	817b      	strh	r3, [r7, #10]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	813b      	strh	r3, [r7, #8]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	71fb      	strb	r3, [r7, #7]
	int i, j, k;
	uint32_t tmp = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint8_t *b = font->data;
 8000efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t color;
	uint16_t txcolor16 = LCD_Color_24b_to_16b(lcd, txcolor);
 8000f00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f000 f9fa 	bl	80012fc <LCD_Color_24b_to_16b>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t bgcolor16 = LCD_Color_24b_to_16b(lcd, bgcolor);
 8000f0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f000 f9f4 	bl	80012fc <LCD_Color_24b_to_16b>
 8000f14:	4603      	mov	r3, r0
 8000f16:	84bb      	strh	r3, [r7, #36]	; 0x24
	ch = ch < font->firstcode || ch > font->lastcode ? 0: ch - font->firstcode;
 8000f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f1a:	7a1b      	ldrb	r3, [r3, #8]
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d30a      	bcc.n	8000f38 <LCD_WriteChar+0x5c>
 8000f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f24:	7a5b      	ldrb	r3, [r3, #9]
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d805      	bhi.n	8000f38 <LCD_WriteChar+0x5c>
 8000f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f2e:	7a1b      	ldrb	r3, [r3, #8]
 8000f30:	79fa      	ldrb	r2, [r7, #7]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	e000      	b.n	8000f3a <LCD_WriteChar+0x5e>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71fb      	strb	r3, [r7, #7]
	int bytes_per_line = ((font->width - 1) >> 3) + 1;
 8000f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	10db      	asrs	r3, r3, #3
 8000f44:	3301      	adds	r3, #1
 8000f46:	623b      	str	r3, [r7, #32]
	if (bytes_per_line > 4) { //Поддержка ширины символов до 32 пикселей (4 байта на строку)
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	f300 814c 	bgt.w	80011e8 <LCD_WriteChar+0x30c>
		return;
	}
	k = 1 << ((bytes_per_line << 3) - 1);
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	3b01      	subs	r3, #1
 8000f56:	2201      	movs	r2, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	61fb      	str	r3, [r7, #28]
	b += ch * bytes_per_line * font->height;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	6a3a      	ldr	r2, [r7, #32]
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f68:	7852      	ldrb	r2, [r2, #1]
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	4413      	add	r3, r2
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_TypeDef *spi = lcd->spi_data.spi;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	61bb      	str	r3, [r7, #24]
	if (modesym == LCD_SYMBOL_PRINT_FAST) {
 8000f7c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f040 80d7 	bne.w	8001134 <LCD_WriteChar+0x258>
		LCD_SetActiveWindow(lcd, x, y, x + font->width - 1, y + font->height - 1);
 8000f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	897b      	ldrh	r3, [r7, #10]
 8000f8e:	4413      	add	r3, r2
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	b298      	uxth	r0, r3
 8000f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	893b      	ldrh	r3, [r7, #8]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	893a      	ldrh	r2, [r7, #8]
 8000fa8:	8979      	ldrh	r1, [r7, #10]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4603      	mov	r3, r0
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f7ff fd00 	bl	80009b4 <LCD_SetActiveWindow>
		LCD_CS_LOW
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <LCD_WriteChar+0xf0>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	0412      	lsls	r2, r2, #16
 8000fca:	619a      	str	r2, [r3, #24]
		LCD_DC_HI
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd4:	619a      	str	r2, [r3, #24]
		spi->CR1 &= ~SPI_CR1_SPE; // SPI выключаем, чтобы изменить параметры
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	601a      	str	r2, [r3, #0]
		spi->CR1 &= ~ (SPI_CR1_BIDIMODE |  	//здесь задаем режим
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f423 422c 	bic.w	r2, r3, #44032	; 0xac00
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	601a      	str	r2, [r3, #0]
					   SPI_CR1_RXONLY |   	//  Transmit only
					   SPI_CR1_CRCEN | 		//выключаем аппаратный расчет CRC
					   SPI_CR1_DFF); 		//8-битная передача
		if (lcd->data_bus == LCD_DATA_16BIT_BUS) {
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d105      	bne.n	8001004 <LCD_WriteChar+0x128>
			spi->CR1 |= SPI_CR1_DFF; //16-битная передача
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]
		}
		spi->CR1 |= SPI_CR1_SPE; // SPI включаем
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	601a      	str	r2, [r3, #0]
		for (i = 0; i < font->height; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
 8001014:	e069      	b.n	80010ea <LCD_WriteChar+0x20e>
			if (bytes_per_line == 1)      { tmp = *((uint8_t*)b);  }
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d103      	bne.n	8001024 <LCD_WriteChar+0x148>
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001022:	e01b      	b.n	800105c <LCD_WriteChar+0x180>
			else if (bytes_per_line == 2) { tmp = *((uint16_t*)b); }
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d103      	bne.n	8001032 <LCD_WriteChar+0x156>
 800102a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001030:	e014      	b.n	800105c <LCD_WriteChar+0x180>
			else if (bytes_per_line == 3) { tmp = (*((uint8_t*)b)) | ((*((uint8_t*)(b + 1))) << 8) |  ((*((uint8_t*)(b + 2))) << 16); }
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d10e      	bne.n	8001056 <LCD_WriteChar+0x17a>
 8001038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001040:	3301      	adds	r3, #1
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	431a      	orrs	r2, r3
 8001048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104a:	3302      	adds	r3, #2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	4313      	orrs	r3, r2
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001054:	e002      	b.n	800105c <LCD_WriteChar+0x180>
			else { tmp = *((uint32_t*)b); }
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
			b += bytes_per_line;
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001060:	4413      	add	r3, r2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; j < font->width; j++)
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
 8001068:	e036      	b.n	80010d8 <LCD_WriteChar+0x1fc>
			{
				color = (tmp << j) & k ? txcolor16: bgcolor16;
 800106a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	409a      	lsls	r2, r3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <LCD_WriteChar+0x1a0>
 8001078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800107a:	e000      	b.n	800107e <LCD_WriteChar+0x1a2>
 800107c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107e:	82fb      	strh	r3, [r7, #22]
				while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 8001080:	bf00      	nop
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f9      	beq.n	8001082 <LCD_WriteChar+0x1a6>
				if (lcd->data_bus == LCD_DATA_16BIT_BUS) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001094:	2b02      	cmp	r3, #2
 8001096:	d105      	bne.n	80010a4 <LCD_WriteChar+0x1c8>
					LL_SPI_TransmitData16(spi, color);
 8001098:	8afb      	ldrh	r3, [r7, #22]
 800109a:	4619      	mov	r1, r3
 800109c:	69b8      	ldr	r0, [r7, #24]
 800109e:	f7ff f8b7 	bl	8000210 <LL_SPI_TransmitData16>
 80010a2:	e016      	b.n	80010d2 <LCD_WriteChar+0x1f6>
				}
				else {
					uint8_t color1 = color & 0xFF, color2 = color >> 8;
 80010a4:	8afb      	ldrh	r3, [r7, #22]
 80010a6:	757b      	strb	r3, [r7, #21]
 80010a8:	8afb      	ldrh	r3, [r7, #22]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	753b      	strb	r3, [r7, #20]
					LL_SPI_TransmitData8(spi, color1);
 80010b0:	7d7b      	ldrb	r3, [r7, #21]
 80010b2:	4619      	mov	r1, r3
 80010b4:	69b8      	ldr	r0, [r7, #24]
 80010b6:	f7ff f899 	bl	80001ec <LL_SPI_TransmitData8>
					while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 80010ba:	bf00      	nop
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f9      	beq.n	80010bc <LCD_WriteChar+0x1e0>
					LL_SPI_TransmitData8(spi, color2);
 80010c8:	7d3b      	ldrb	r3, [r7, #20]
 80010ca:	4619      	mov	r1, r3
 80010cc:	69b8      	ldr	r0, [r7, #24]
 80010ce:	f7ff f88d 	bl	80001ec <LL_SPI_TransmitData8>
			for (j = 0; j < font->width; j++)
 80010d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d4:	3301      	adds	r3, #1
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
 80010d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e0:	4293      	cmp	r3, r2
 80010e2:	dbc2      	blt.n	800106a <LCD_WriteChar+0x18e>
		for (i = 0; i < font->height; i++) {
 80010e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e6:	3301      	adds	r3, #1
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
 80010ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	461a      	mov	r2, r3
 80010f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f2:	4293      	cmp	r3, r2
 80010f4:	db8f      	blt.n	8001016 <LCD_WriteChar+0x13a>
				}
			}
		}
		while (!(spi->SR & SPI_SR_TXE)) ; //ждем окончания передачи
 80010f6:	bf00      	nop
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f9      	beq.n	80010f8 <LCD_WriteChar+0x21c>
		while (spi->SR & SPI_SR_BSY) ; //ждем когда SPI освободится
 8001104:	bf00      	nop
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <LCD_WriteChar+0x22a>
		//выключаем spi
		spi->CR1 &= ~SPI_CR1_SPE;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	601a      	str	r2, [r3, #0]
		LCD_CS_HI
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	2b00      	cmp	r3, #0
 8001124:	d061      	beq.n	80011ea <LCD_WriteChar+0x30e>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	619a      	str	r2, [r3, #24]
 8001132:	e05a      	b.n	80011ea <LCD_WriteChar+0x30e>
	}
	else {
		for (i = 0; i < font->height; i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
 8001138:	e04f      	b.n	80011da <LCD_WriteChar+0x2fe>
			if (bytes_per_line == 1) { tmp = *((uint8_t*)b); }
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d103      	bne.n	8001148 <LCD_WriteChar+0x26c>
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001146:	e01e      	b.n	8001186 <LCD_WriteChar+0x2aa>
			else if (bytes_per_line == 2) { tmp = *((uint16_t*)b); }
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d103      	bne.n	8001156 <LCD_WriteChar+0x27a>
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	881b      	ldrh	r3, [r3, #0]
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001154:	e017      	b.n	8001186 <LCD_WriteChar+0x2aa>
			else if (bytes_per_line == 3) { tmp = (*((uint8_t*)b)) | ((*((uint8_t*)(b + 1))) << 8) |  ((*((uint8_t*)(b + 2))) << 16); }
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d10e      	bne.n	800117a <LCD_WriteChar+0x29e>
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001164:	3301      	adds	r3, #1
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	431a      	orrs	r2, r3
 800116c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116e:	3302      	adds	r3, #2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	041b      	lsls	r3, r3, #16
 8001174:	4313      	orrs	r3, r2
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001178:	e005      	b.n	8001186 <LCD_WriteChar+0x2aa>
			else if (bytes_per_line == 4) { tmp = *((uint32_t*)b); }
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	2b04      	cmp	r3, #4
 800117e:	d102      	bne.n	8001186 <LCD_WriteChar+0x2aa>
 8001180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
			b += bytes_per_line;
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800118a:	4413      	add	r3, r2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; j < font->width; j++) {
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
 8001192:	e019      	b.n	80011c8 <LCD_WriteChar+0x2ec>
				if ((tmp << j) & k) {
 8001194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001198:	409a      	lsls	r2, r3
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00f      	beq.n	80011c2 <LCD_WriteChar+0x2e6>
					LCD_DrawPixel(lcd, x + j, y + i, txcolor);
 80011a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	897b      	ldrh	r3, [r7, #10]
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b219      	sxth	r1, r3
 80011ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	893b      	ldrh	r3, [r7, #8]
 80011b4:	4413      	add	r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff fe53 	bl	8000e68 <LCD_DrawPixel>
			for (j = 0; j < font->width; j++) {
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	3301      	adds	r3, #1
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
 80011c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	4293      	cmp	r3, r2
 80011d2:	dbdf      	blt.n	8001194 <LCD_WriteChar+0x2b8>
		for (i = 0; i < font->height; i++) {
 80011d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d6:	3301      	adds	r3, #1
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
 80011da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	461a      	mov	r2, r3
 80011e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e2:	4293      	cmp	r3, r2
 80011e4:	dba9      	blt.n	800113a <LCD_WriteChar+0x25e>
 80011e6:	e000      	b.n	80011ea <LCD_WriteChar+0x30e>
		return;
 80011e8:	bf00      	nop
				}
			}
		}
	}
}
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <LCD_WriteString>:
//вывод строки str текста с позиции x, y, шрифтом font, цветом букв color, цветом окружения bgcolor
//modesym - определяет, как выводить текст:
//LCD_SYMBOL_PRINT_FAST - быстрый вывод с полным затиранием знакоместа
//LCD_SYMBOL_PRINT_PSETBYPSET - вывод по точкам, при этом цвет окружения bgcolor игнорируется (позволяет накладывать надписи на картинки)
void LCD_WriteString(LCD_Handler* lcd, uint16_t x, uint16_t y, const char *str, FontDef *font, uint32_t color, uint32_t bgcolor, LCD_PrintSymbolMode modesym)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af04      	add	r7, sp, #16
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	817b      	strh	r3, [r7, #10]
 80011fe:	4613      	mov	r3, r2
 8001200:	813b      	strh	r3, [r7, #8]
	while (*str) {
 8001202:	e031      	b.n	8001268 <LCD_WriteString+0x78>
		if (x + font->width > lcd->Width) {
 8001204:	897b      	ldrh	r3, [r7, #10]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	4413      	add	r3, r2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	8892      	ldrh	r2, [r2, #4]
 8001210:	4293      	cmp	r3, r2
 8001212:	dd0f      	ble.n	8001234 <LCD_WriteString+0x44>
			x = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	817b      	strh	r3, [r7, #10]
			y += font->height;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	785b      	ldrb	r3, [r3, #1]
 800121c:	b29a      	uxth	r2, r3
 800121e:	893b      	ldrh	r3, [r7, #8]
 8001220:	4413      	add	r3, r2
 8001222:	813b      	strh	r3, [r7, #8]
			if (y + font->height > lcd->Height) {
 8001224:	893b      	ldrh	r3, [r7, #8]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	7852      	ldrb	r2, [r2, #1]
 800122a:	4413      	add	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	88d2      	ldrh	r2, [r2, #6]
 8001230:	4293      	cmp	r3, r2
 8001232:	dc1e      	bgt.n	8001272 <LCD_WriteString+0x82>
				break;
			}
		}
		LCD_WriteChar(lcd, x, y, *str, font, color, bgcolor, modesym);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7818      	ldrb	r0, [r3, #0]
 8001238:	893a      	ldrh	r2, [r7, #8]
 800123a:	8979      	ldrh	r1, [r7, #10]
 800123c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001240:	9303      	str	r3, [sp, #12]
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	4603      	mov	r3, r0
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f7ff fe43 	bl	8000edc <LCD_WriteChar>
		x += font->width;
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b29a      	uxth	r2, r3
 800125c:	897b      	ldrh	r3, [r7, #10]
 800125e:	4413      	add	r3, r2
 8001260:	817b      	strh	r3, [r7, #10]
		str++;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3301      	adds	r3, #1
 8001266:	607b      	str	r3, [r7, #4]
	while (*str) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1c9      	bne.n	8001204 <LCD_WriteString+0x14>
 8001270:	e000      	b.n	8001274 <LCD_WriteString+0x84>
				break;
 8001272:	bf00      	nop
	}
	lcd->AtPos.x = x;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	897a      	ldrh	r2, [r7, #10]
 8001278:	81da      	strh	r2, [r3, #14]
	lcd->AtPos.y = y;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	893a      	ldrh	r2, [r7, #8]
 800127e:	821a      	strh	r2, [r3, #16]
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <LCD_Color>:

inline uint16_t LCD_Color (LCD_Handler *lcd, uint8_t r, uint8_t g, uint8_t b)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	70fb      	strb	r3, [r7, #3]
 800129a:	460b      	mov	r3, r1
 800129c:	70bb      	strb	r3, [r7, #2]
 800129e:	4613      	mov	r3, r2
 80012a0:	707b      	strb	r3, [r7, #1]
	uint16_t color = (((uint16_t)r & 0xF8) << 8) | (((uint16_t)g & 0xFC) << 3) | (((uint16_t)b >> 3));
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012ac:	f023 0307 	bic.w	r3, r3, #7
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	78bb      	ldrb	r3, [r7, #2]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	787b      	ldrb	r3, [r7, #1]
 80012c4:	08db      	lsrs	r3, r3, #3
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	81fb      	strh	r3, [r7, #14]
	if (lcd->data_bus == LCD_DATA_8BIT_BUS) {//8-битная передача
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d109      	bne.n	80012ee <LCD_Color+0x66>
		color = (color >> 8) | ((color & 0xFF) << 8);
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	b29b      	uxth	r3, r3
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	81fb      	strh	r3, [r7, #14]
	}
	return color;
 80012ee:	89fb      	ldrh	r3, [r7, #14]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LCD_Color_24b_to_16b>:

inline uint16_t LCD_Color_24b_to_16b(LCD_Handler *lcd, uint32_t color)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
	uint8_t r = (color >> 16) & 0xff;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color >> 8) & 0xff;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	73bb      	strb	r3, [r7, #14]
	uint8_t b = color & 0xff;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	737b      	strb	r3, [r7, #13]
	return LCD_Color(lcd, r, g, b);
 8001316:	7b7b      	ldrb	r3, [r7, #13]
 8001318:	7bba      	ldrb	r2, [r7, #14]
 800131a:	7bf9      	ldrb	r1, [r7, #15]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffb3 	bl	8001288 <LCD_Color>
 8001322:	4603      	mov	r3, r0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <ST7789_MemoryDataAccessControlConfig>:
									LCD_UPR_PAUSE, 120,
									LCD_UPR_END
								};

static uint8_t ST7789_MemoryDataAccessControlConfig(uint8_t mirror_x, uint8_t mirror_y, uint8_t exchange_xy, uint8_t mirror_color, uint8_t refresh_v, uint8_t refresh_h)
{
 800132c:	b490      	push	{r4, r7}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4604      	mov	r4, r0
 8001334:	4608      	mov	r0, r1
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	71fb      	strb	r3, [r7, #7]
 800133e:	4603      	mov	r3, r0
 8001340:	71bb      	strb	r3, [r7, #6]
 8001342:	460b      	mov	r3, r1
 8001344:	717b      	strb	r3, [r7, #5]
 8001346:	4613      	mov	r3, r2
 8001348:	713b      	strb	r3, [r7, #4]
	uint8_t mem_config = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
	if (mirror_x) 		mem_config |= ST7789_MADCTL_MX;
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <ST7789_MemoryDataAccessControlConfig+0x30>
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135a:	73fb      	strb	r3, [r7, #15]
	if (mirror_y) 		mem_config |= ST7789_MADCTL_MY;
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <ST7789_MemoryDataAccessControlConfig+0x3e>
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001368:	73fb      	strb	r3, [r7, #15]
	if (exchange_xy) 	mem_config |= ST7789_MADCTL_MV;
 800136a:	797b      	ldrb	r3, [r7, #5]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <ST7789_MemoryDataAccessControlConfig+0x4c>
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	73fb      	strb	r3, [r7, #15]
	if (mirror_color) 	mem_config |= ST7789_MADCTL_BGR;
 8001378:	793b      	ldrb	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <ST7789_MemoryDataAccessControlConfig+0x5a>
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	73fb      	strb	r3, [r7, #15]
	if (refresh_v)		mem_config |= ST7789_MADCTL_ML;
 8001386:	7e3b      	ldrb	r3, [r7, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <ST7789_MemoryDataAccessControlConfig+0x68>
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	73fb      	strb	r3, [r7, #15]
	if (refresh_h)		mem_config |= ST7789_MADCTL_MH;
 8001394:	7f3b      	ldrb	r3, [r7, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <ST7789_MemoryDataAccessControlConfig+0x76>
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	73fb      	strb	r3, [r7, #15]
	return mem_config;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc90      	pop	{r4, r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <ST7789_Init>:

uint8_t* ST7789_Init(uint8_t orientation)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	uint8_t mem_config = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
	if (orientation == PAGE_ORIENTATION_PORTRAIT) 				mem_config = ST7789_MemoryDataAccessControlConfig(0, 0, 0, 0, 0, 0);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10c      	bne.n	80013de <ST7789_Init+0x2e>
 80013c4:	2300      	movs	r3, #0
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	2300      	movs	r3, #0
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ffaa 	bl	800132c <ST7789_MemoryDataAccessControlConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e02e      	b.n	800143c <ST7789_Init+0x8c>
	else if (orientation == PAGE_ORIENTATION_PORTRAIT_MIRROR) 	mem_config = ST7789_MemoryDataAccessControlConfig(1, 1, 0, 0, 1, 1);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d10c      	bne.n	80013fe <ST7789_Init+0x4e>
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2301      	movs	r3, #1
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	2101      	movs	r1, #1
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff ff9a 	bl	800132c <ST7789_MemoryDataAccessControlConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e01e      	b.n	800143c <ST7789_Init+0x8c>
	else if (orientation == PAGE_ORIENTATION_LANDSCAPE) 		mem_config = ST7789_MemoryDataAccessControlConfig(1, 0, 1, 0, 0, 1);
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10c      	bne.n	800141e <ST7789_Init+0x6e>
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	2201      	movs	r2, #1
 8001410:	2100      	movs	r1, #0
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff ff8a 	bl	800132c <ST7789_MemoryDataAccessControlConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e00e      	b.n	800143c <ST7789_Init+0x8c>
	else if (orientation == PAGE_ORIENTATION_LANDSCAPE_MIRROR) 	mem_config = ST7789_MemoryDataAccessControlConfig(0, 1, 1, 0, 1, 0);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d10b      	bne.n	800143c <ST7789_Init+0x8c>
 8001424:	2300      	movs	r3, #0
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2301      	movs	r3, #1
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	2201      	movs	r2, #1
 8001430:	2101      	movs	r1, #1
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff ff7a 	bl	800132c <ST7789_MemoryDataAccessControlConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
	st7789_init_str[23] = mem_config;
 800143c:	4a03      	ldr	r2, [pc, #12]	; (800144c <ST7789_Init+0x9c>)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	75d3      	strb	r3, [r2, #23]
	return st7789_init_str;
 8001442:	4b02      	ldr	r3, [pc, #8]	; (800144c <ST7789_Init+0x9c>)
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000000c 	.word	0x2000000c

08001450 <ST7789_SetWindow>:

uint8_t* ST7789_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001450:	b490      	push	{r4, r7}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	80fb      	strh	r3, [r7, #6]
 8001462:	4603      	mov	r3, r0
 8001464:	80bb      	strh	r3, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	803b      	strh	r3, [r7, #0]
	st7789_setwin_str[3] = x0 >> 8; 	st7789_setwin_str[4] = x0 & 0xFF;
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <ST7789_SetWindow+0x7c>)
 8001478:	70da      	strb	r2, [r3, #3]
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <ST7789_SetWindow+0x7c>)
 8001480:	711a      	strb	r2, [r3, #4]
	st7789_setwin_str[5] = x1 >> 8; 	st7789_setwin_str[6] = x1 & 0xFF;
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b29b      	uxth	r3, r3
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <ST7789_SetWindow+0x7c>)
 800148c:	715a      	strb	r2, [r3, #5]
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <ST7789_SetWindow+0x7c>)
 8001494:	719a      	strb	r2, [r3, #6]
	st7789_setwin_str[10] = y0 >> 8; 	st7789_setwin_str[11] = y0 & 0xFF;
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b29b      	uxth	r3, r3
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <ST7789_SetWindow+0x7c>)
 80014a0:	729a      	strb	r2, [r3, #10]
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <ST7789_SetWindow+0x7c>)
 80014a8:	72da      	strb	r2, [r3, #11]
	st7789_setwin_str[12] = y1 >> 8; 	st7789_setwin_str[13] = y1 & 0xFF;
 80014aa:	883b      	ldrh	r3, [r7, #0]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <ST7789_SetWindow+0x7c>)
 80014b4:	731a      	strb	r2, [r3, #12]
 80014b6:	883b      	ldrh	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <ST7789_SetWindow+0x7c>)
 80014bc:	735a      	strb	r2, [r3, #13]
	return st7789_setwin_str;
 80014be:	4b03      	ldr	r3, [pc, #12]	; (80014cc <ST7789_SetWindow+0x7c>)
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc90      	pop	{r4, r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000007c 	.word	0x2000007c

080014d0 <ST7789_SleepIn>:

uint8_t* ST7789_SleepIn(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	return st7789_sleepin_str;
 80014d4:	4b02      	ldr	r3, [pc, #8]	; (80014e0 <ST7789_SleepIn+0x10>)
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	20000090 	.word	0x20000090

080014e4 <ST7789_SleepOut>:

uint8_t* ST7789_SleepOut(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
	return st7789_sleepout_str;
 80014e8:	4b02      	ldr	r3, [pc, #8]	; (80014f4 <ST7789_SleepOut+0x10>)
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000098 	.word	0x20000098

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LL_DMA_SetDataTransferDirection+0x44>)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001670:	4908      	ldr	r1, [pc, #32]	; (8001694 <LL_DMA_SetDataTransferDirection+0x44>)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	440b      	add	r3, r1
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	440b      	add	r3, r1
 800167e:	4619      	mov	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	08007688 	.word	0x08007688

08001698 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <LL_DMA_SetMode+0x44>)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80016b8:	4908      	ldr	r1, [pc, #32]	; (80016dc <LL_DMA_SetMode+0x44>)
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	440b      	add	r3, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	440b      	add	r3, r1
 80016c6:	4619      	mov	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	08007688 	.word	0x08007688

080016e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <LL_DMA_SetPeriphIncMode+0x44>)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001700:	4908      	ldr	r1, [pc, #32]	; (8001724 <LL_DMA_SetPeriphIncMode+0x44>)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	440b      	add	r3, r1
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	440b      	add	r3, r1
 800170e:	4619      	mov	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	08007688 	.word	0x08007688

08001728 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001734:	4a0d      	ldr	r2, [pc, #52]	; (800176c <LL_DMA_SetMemoryIncMode+0x44>)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001748:	4908      	ldr	r1, [pc, #32]	; (800176c <LL_DMA_SetMemoryIncMode+0x44>)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	440b      	add	r3, r1
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	440b      	add	r3, r1
 8001756:	4619      	mov	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	08007688 	.word	0x08007688

08001770 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LL_DMA_SetPeriphSize+0x44>)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4413      	add	r3, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8001790:	4908      	ldr	r1, [pc, #32]	; (80017b4 <LL_DMA_SetPeriphSize+0x44>)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	440b      	add	r3, r1
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	440b      	add	r3, r1
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	08007688 	.word	0x08007688

080017b8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <LL_DMA_SetMemorySize+0x44>)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4413      	add	r3, r2
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <LL_DMA_SetMemorySize+0x44>)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	440b      	add	r3, r1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	440b      	add	r3, r1
 80017e6:	4619      	mov	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	08007688 	.word	0x08007688

08001800 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001820:	4908      	ldr	r1, [pc, #32]	; (8001844 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	440b      	add	r3, r1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	440b      	add	r3, r1
 800182e:	4619      	mov	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	08007688 	.word	0x08007688

08001848 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <LL_DMA_SetChannelSelection+0x44>)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	4413      	add	r3, r2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001868:	4908      	ldr	r1, [pc, #32]	; (800188c <LL_DMA_SetChannelSelection+0x44>)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	440b      	add	r3, r1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	440b      	add	r3, r1
 8001876:	4619      	mov	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	08007688 	.word	0x08007688

08001890 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <LL_DMA_DisableFifoMode+0x3c>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <LL_DMA_DisableFifoMode+0x3c>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	440a      	add	r2, r1
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	4611      	mov	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	440a      	add	r2, r1
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6153      	str	r3, [r2, #20]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	08007688 	.word	0x08007688

080018d0 <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <LL_RCC_HSE_EnableCSS+0x1c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <LL_RCC_HSE_EnableCSS+0x1c>)
 80018da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <LL_RCC_HSE_Enable+0x1c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <LL_RCC_HSE_Enable+0x1c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800

08001910 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <LL_RCC_HSE_IsReady+0x24>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <LL_RCC_SetSysClkSource+0x24>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 0203 	bic.w	r2, r3, #3
 8001948:	4904      	ldr	r1, [pc, #16]	; (800195c <LL_RCC_SetSysClkSource+0x24>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40023800 	.word	0x40023800

08001960 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <LL_RCC_GetSysClkSource+0x18>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800

0800197c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <LL_RCC_SetAHBPrescaler+0x24>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40023800 	.word	0x40023800

080019a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b4:	4904      	ldr	r1, [pc, #16]	; (80019c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	608b      	str	r3, [r1, #8]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	40023800 	.word	0x40023800

080019cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019dc:	4904      	ldr	r1, [pc, #16]	; (80019f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	40023800 	.word	0x40023800

080019f4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <LL_RCC_SetTIMPrescaler+0x28>)
 80019fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a06:	4905      	ldr	r1, [pc, #20]	; (8001a1c <LL_RCC_SetTIMPrescaler+0x28>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40023800 	.word	0x40023800

08001a20 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <LL_RCC_PLL_Enable+0x1c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <LL_RCC_PLL_Enable+0x1c>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800

08001a40 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <LL_RCC_PLL_IsReady+0x24>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a50:	bf0c      	ite	eq
 8001a52:	2301      	moveq	r3, #1
 8001a54:	2300      	movne	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	68f9      	ldr	r1, [r7, #12]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	0192      	lsls	r2, r2, #6
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	ffbf8000 	.word	0xffbf8000

08001ab4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001aec:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4013      	ands	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40023800 	.word	0x40023800

08001b14 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40023800 	.word	0x40023800

08001b44 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <LL_SYSCFG_SetEXTISource+0x68>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	ea02 0103 	and.w	r1, r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	0c1b      	lsrs	r3, r3, #16
 8001b68:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	e003      	b.n	8001b88 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	fa03 f202 	lsl.w	r2, r3, r2
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <LL_SYSCFG_SetEXTISource+0x68>)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	430a      	orrs	r2, r1
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001b9e:	bf00      	nop
 8001ba0:	371c      	adds	r7, #28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40013800 	.word	0x40013800

08001bb0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <LL_FLASH_SetLatency+0x24>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 020f 	bic.w	r2, r3, #15
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <LL_FLASH_SetLatency+0x24>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	600b      	str	r3, [r1, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40023c00 	.word	0x40023c00

08001bd8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <LL_FLASH_GetLatency+0x18>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <LL_PWR_DisableOverDriveMode>:
  * @brief  Disable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_DisableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableOverDriveMode(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <LL_PWR_DisableOverDriveMode+0x1c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <LL_PWR_DisableOverDriveMode+0x1c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40007000 	.word	0x40007000

08001c14 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c24:	4904      	ldr	r1, [pc, #16]	; (8001c38 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40007000 	.word	0x40007000

08001c3c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000

08001c64 <LL_SPI_SetStandard>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f023 0210 	bic.w	r2, r3, #16
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	605a      	str	r2, [r3, #4]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	601a      	str	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d01c      	beq.n	8001cf6 <LL_TIM_OC_DisableFast+0x4a>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d017      	beq.n	8001cf2 <LL_TIM_OC_DisableFast+0x46>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d012      	beq.n	8001cee <LL_TIM_OC_DisableFast+0x42>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d00d      	beq.n	8001cea <LL_TIM_OC_DisableFast+0x3e>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd4:	d007      	beq.n	8001ce6 <LL_TIM_OC_DisableFast+0x3a>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cdc:	d101      	bne.n	8001ce2 <LL_TIM_OC_DisableFast+0x36>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	e00a      	b.n	8001cf8 <LL_TIM_OC_DisableFast+0x4c>
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	e008      	b.n	8001cf8 <LL_TIM_OC_DisableFast+0x4c>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	e006      	b.n	8001cf8 <LL_TIM_OC_DisableFast+0x4c>
 8001cea:	2303      	movs	r3, #3
 8001cec:	e004      	b.n	8001cf8 <LL_TIM_OC_DisableFast+0x4c>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e002      	b.n	8001cf8 <LL_TIM_OC_DisableFast+0x4c>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_TIM_OC_DisableFast+0x4c>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3318      	adds	r3, #24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <LL_TIM_OC_DisableFast+0x84>)
 8001d04:	5cd3      	ldrb	r3, [r2, r3]
 8001d06:	440b      	add	r3, r1
 8001d08:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	4908      	ldr	r1, [pc, #32]	; (8001d34 <LL_TIM_OC_DisableFast+0x88>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	4619      	mov	r1, r3
 8001d16:	2304      	movs	r3, #4
 8001d18:	408b      	lsls	r3, r1
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	601a      	str	r2, [r3, #0]

}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	08007690 	.word	0x08007690
 8001d34:	08007698 	.word	0x08007698

08001d38 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d01c      	beq.n	8001d82 <LL_TIM_OC_EnablePreload+0x4a>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d017      	beq.n	8001d7e <LL_TIM_OC_EnablePreload+0x46>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d012      	beq.n	8001d7a <LL_TIM_OC_EnablePreload+0x42>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	2b40      	cmp	r3, #64	; 0x40
 8001d58:	d00d      	beq.n	8001d76 <LL_TIM_OC_EnablePreload+0x3e>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d60:	d007      	beq.n	8001d72 <LL_TIM_OC_EnablePreload+0x3a>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d101      	bne.n	8001d6e <LL_TIM_OC_EnablePreload+0x36>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e00a      	b.n	8001d84 <LL_TIM_OC_EnablePreload+0x4c>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e008      	b.n	8001d84 <LL_TIM_OC_EnablePreload+0x4c>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e006      	b.n	8001d84 <LL_TIM_OC_EnablePreload+0x4c>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e004      	b.n	8001d84 <LL_TIM_OC_EnablePreload+0x4c>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <LL_TIM_OC_EnablePreload+0x4c>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <LL_TIM_OC_EnablePreload+0x4c>
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3318      	adds	r3, #24
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <LL_TIM_OC_EnablePreload+0x80>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	440b      	add	r3, r1
 8001d94:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <LL_TIM_OC_EnablePreload+0x84>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	4619      	mov	r1, r3
 8001da2:	2308      	movs	r3, #8
 8001da4:	408b      	lsls	r3, r1
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	08007690 	.word	0x08007690
 8001dbc:	08007698 	.word	0x08007698

08001dc0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dd2:	f023 0307 	bic.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	613b      	str	r3, [r7, #16]
  return result;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001e56:	2320      	movs	r3, #32
 8001e58:	e003      	b.n	8001e62 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	2103      	movs	r1, #3
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	61fb      	str	r3, [r7, #28]
  return result;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001e84:	2320      	movs	r3, #32
 8001e86:	e003      	b.n	8001e90 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	372c      	adds	r7, #44	; 0x2c
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b08b      	sub	sp, #44	; 0x2c
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	613b      	str	r3, [r7, #16]
  return result;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	2103      	movs	r1, #3
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	401a      	ands	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	61fb      	str	r3, [r7, #28]
  return result;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001efe:	2320      	movs	r3, #32
 8001f00:	e003      	b.n	8001f0a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	431a      	orrs	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	60da      	str	r2, [r3, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	372c      	adds	r7, #44	; 0x2c
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	b0c5      	sub	sp, #276	; 0x114
 8001f48:	af10      	add	r7, sp, #64	; 0x40

  /* USER CODE BEGIN 1 */
	/* включаем кэширование инструкций */
	#if (INSTRUCTION_CACHE_ENABLE != 0U)
		((FLASH_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x3C00UL))->ACR |= (0x1UL << (9U));
 8001f4a:	4b7c      	ldr	r3, [pc, #496]	; (800213c <main+0x1f8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7b      	ldr	r2, [pc, #492]	; (800213c <main+0x1f8>)
 8001f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f54:	6013      	str	r3, [r2, #0]
	#endif
	/* включаем кэширование данных */
	#if (DATA_CACHE_ENABLE != 0U)
		((FLASH_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x3C00UL))->ACR |= (0x1UL << (10U));
 8001f56:	4b79      	ldr	r3, [pc, #484]	; (800213c <main+0x1f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a78      	ldr	r2, [pc, #480]	; (800213c <main+0x1f8>)
 8001f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f60:	6013      	str	r3, [r2, #0]
	#endif
	/* включаем систему предварительной выборки инструкций*/
	#if (PREFETCH_ENABLE != 0U)
		((FLASH_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x3C00UL))->ACR |= (0x1UL << (8U));
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <main+0x1f8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a75      	ldr	r2, [pc, #468]	; (800213c <main+0x1f8>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6e:	f000 ff0b 	bl	8002d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f72:	f000 f903 	bl	800217c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8001f76:	4b72      	ldr	r3, [pc, #456]	; (8002140 <main+0x1fc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <main+0x200>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fb42 	bl	800160c <SysTick_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f000 fae0 	bl	800254c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f8c:	f000 fac6 	bl	800251c <MX_DMA_Init>
  MX_I2C3_Init();
 8001f90:	f000 f94a 	bl	8002228 <MX_I2C3_Init>
  MX_SPI3_Init();
 8001f94:	f000 f988 	bl	80022a8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001f98:	f000 fa22 	bl	80023e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001f9c:	f000 fa52 	bl	8002444 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_DMA_TypeDef        dma_tx  = { DMA1,
 8001fa0:	4a69      	ldr	r2, [pc, #420]	; (8002148 <main+0x204>)
 8001fa2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001faa:	e883 0003 	stmia.w	r3, {r0, r1}
  		                             LL_DMA_STREAM_5
  };

  LCD_BackLight_data     bkl_data= { TIM3,                // Яркость дисплея
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <main+0x208>)
 8001fb0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  								     0,
  								     0,
  								     50
  };

  LCD_SPI_Connected_data spi_con = { SPI3,                // SPI соединение
 8001fba:	4b65      	ldr	r3, [pc, #404]	; (8002150 <main+0x20c>)
 8001fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001fc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fc4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fd0:	4b60      	ldr	r3, [pc, #384]	; (8002154 <main+0x210>)
 8001fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001fdc:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <main+0x210>)
 8001fde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8001fe8:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <main+0x210>)
 8001fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4

  #ifndef LCD_DYNAMIC_MEM
    LCD_Handler lcd1;
  #endif
    /*  Для дисплея на контроллере ST7789   */
  LCD = LCD_DisplayAdd(       LCD,
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <main+0x214>)
 8001ff6:	681d      	ldr	r5, [r3, #0]
 8001ff8:	f107 0610 	add.w	r6, r7, #16
 8001ffc:	ac0b      	add	r4, sp, #44	; 0x2c
 8001ffe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002008:	2302      	movs	r3, #2
 800200a:	930a      	str	r3, [sp, #40]	; 0x28
 800200c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002010:	9309      	str	r3, [sp, #36]	; 0x24
 8002012:	4b52      	ldr	r3, [pc, #328]	; (800215c <main+0x218>)
 8002014:	9308      	str	r3, [sp, #32]
 8002016:	4b52      	ldr	r3, [pc, #328]	; (8002160 <main+0x21c>)
 8002018:	9307      	str	r3, [sp, #28]
 800201a:	4b52      	ldr	r3, [pc, #328]	; (8002164 <main+0x220>)
 800201c:	9306      	str	r3, [sp, #24]
 800201e:	4b52      	ldr	r3, [pc, #328]	; (8002168 <main+0x224>)
 8002020:	9305      	str	r3, [sp, #20]
 8002022:	2300      	movs	r3, #0
 8002024:	9304      	str	r3, [sp, #16]
 8002026:	2300      	movs	r3, #0
 8002028:	9303      	str	r3, [sp, #12]
 800202a:	2300      	movs	r3, #0
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	23f0      	movs	r3, #240	; 0xf0
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	23f0      	movs	r3, #240	; 0xf0
 800203a:	22f0      	movs	r2, #240	; 0xf0
 800203c:	4631      	mov	r1, r6
 800203e:	4628      	mov	r0, r5
 8002040:	f7fe fa92 	bl	8000568 <LCD_DisplayAdd>
 8002044:	4603      	mov	r3, r0
 8002046:	4a44      	ldr	r2, [pc, #272]	; (8002158 <main+0x214>)
 8002048:	6013      	str	r3, [r2, #0]
						&spi_con,
						LCD_DATA_16BIT_BUS,
						bkl_data );
*/

  LCD_Handler *lcd = LCD; //указатель на первый дисплей в списке
 800204a:	4b43      	ldr	r3, [pc, #268]	; (8002158 <main+0x214>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  LCD_Init(lcd);
 8002052:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002056:	f7fe fbfd 	bl	8000854 <LCD_Init>
  LCD_Fill(lcd, COLOR_RED);
 800205a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 800205e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002062:	f7fe fee7 	bl	8000e34 <LCD_Fill>
  LCD_WriteString(lcd, 0, 0, "VIKTORIA", &Font_15x25, COLOR_YELLOW, COLOR_BLUE, LCD_SYMBOL_PRINT_FAST);
 8002066:	2300      	movs	r3, #0
 8002068:	9303      	str	r3, [sp, #12]
 800206a:	23ff      	movs	r3, #255	; 0xff
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <main+0x228>)
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <main+0x22c>)
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <main+0x230>)
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8002080:	f7ff f8b6 	bl	80011f0 <LCD_WriteString>
  LL_mDelay(2000);
 8002084:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002088:	f002 fc42 	bl	8004910 <LL_mDelay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tick;
  uint32_t frames;
  char buff[10];
  uint8_t r = 0, g = 0, b = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8002092:	2300      	movs	r3, #0
 8002094:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8002098:	2300      	movs	r3, #0
 800209a:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
  while (1)
  {
  	  frames = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  	  tick = millis;
 80020a4:	4b34      	ldr	r3, [pc, #208]	; (8002178 <main+0x234>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  while (millis - tick < 1000)
 80020ac:	e022      	b.n	80020f4 <main+0x1b0>
  	  {
  		  LCD_Fill(lcd, (r << 16) | (g << 8) | b);
 80020ae:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80020b2:	041a      	lsls	r2, r3, #16
 80020b4:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	431a      	orrs	r2, r3
 80020bc:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80020c0:	4313      	orrs	r3, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80020c8:	f7fe feb4 	bl	8000e34 <LCD_Fill>

  		  r++;
 80020cc:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80020d0:	3301      	adds	r3, #1
 80020d2:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
  		  g += 2;
 80020d6:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80020da:	3302      	adds	r3, #2
 80020dc:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
  		  b += 4;
 80020e0:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 80020e4:	3304      	adds	r3, #4
 80020e6:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
  		  for (uint32_t i = 0; i<100000; i++)
		  {
			  __NOP();
		  }
  		  */
  		  frames++;
 80020ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020ee:	3301      	adds	r3, #1
 80020f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  	  while (millis - tick < 1000)
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <main+0x234>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002102:	d3d4      	bcc.n	80020ae <main+0x16a>
  	  }
  	  utoa(frames, buff, 10);
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	220a      	movs	r2, #10
 8002108:	4619      	mov	r1, r3
 800210a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800210e:	f002 fca3 	bl	8004a58 <utoa>
  	  LCD_WriteString(lcd, 0, 0, buff, &Font_15x25, COLOR_YELLOW, COLOR_BLUE, LCD_SYMBOL_PRINT_FAST);
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	9203      	str	r2, [sp, #12]
 8002118:	22ff      	movs	r2, #255	; 0xff
 800211a:	9202      	str	r2, [sp, #8]
 800211c:	4a13      	ldr	r2, [pc, #76]	; (800216c <main+0x228>)
 800211e:	9201      	str	r2, [sp, #4]
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <main+0x22c>)
 8002122:	9200      	str	r2, [sp, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800212c:	f7ff f860 	bl	80011f0 <LCD_WriteString>
  	  LL_mDelay(1000);
 8002130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002134:	f002 fbec 	bl	8004910 <LL_mDelay>
  	  frames = 0;
 8002138:	e7b1      	b.n	800209e <main+0x15a>
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00
 8002140:	200000a0 	.word	0x200000a0
 8002144:	10624dd3 	.word	0x10624dd3
 8002148:	08004aa8 	.word	0x08004aa8
 800214c:	08004ab0 	.word	0x08004ab0
 8002150:	40003c00 	.word	0x40003c00
 8002154:	40020c00 	.word	0x40020c00
 8002158:	200000c8 	.word	0x200000c8
 800215c:	080014e5 	.word	0x080014e5
 8002160:	080014d1 	.word	0x080014d1
 8002164:	08001451 	.word	0x08001451
 8002168:	080013b1 	.word	0x080013b1
 800216c:	00ffff00 	.word	0x00ffff00
 8002170:	20000000 	.word	0x20000000
 8002174:	08004a9c 	.word	0x08004a9c
 8002178:	20000120 	.word	0x20000120

0800217c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002180:	2002      	movs	r0, #2
 8002182:	f7ff fd15 	bl	8001bb0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002186:	bf00      	nop
 8002188:	f7ff fd26 	bl	8001bd8 <LL_FLASH_GetLatency>
 800218c:	4603      	mov	r3, r0
 800218e:	2b02      	cmp	r3, #2
 8002190:	d1fa      	bne.n	8002188 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8002192:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002196:	f7ff fd3d 	bl	8001c14 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_DisableOverDriveMode();
 800219a:	f7ff fd2b 	bl	8001bf4 <LL_PWR_DisableOverDriveMode>
  LL_RCC_HSE_Enable();
 800219e:	f7ff fba7 	bl	80018f0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80021a2:	bf00      	nop
 80021a4:	f7ff fbb4 	bl	8001910 <LL_RCC_HSE_IsReady>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d1fa      	bne.n	80021a4 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_HSE_EnableCSS();
 80021ae:	f7ff fb8f 	bl	80018d0 <LL_RCC_HSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 72, LL_RCC_PLLP_DIV_2);
 80021b2:	2300      	movs	r3, #0
 80021b4:	2248      	movs	r2, #72	; 0x48
 80021b6:	2104      	movs	r1, #4
 80021b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80021bc:	f7ff fc54 	bl	8001a68 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80021c0:	f7ff fc2e 	bl	8001a20 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80021c4:	bf00      	nop
 80021c6:	f7ff fc3b 	bl	8001a40 <LL_RCC_PLL_IsReady>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d1fa      	bne.n	80021c6 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 80021d0:	bf00      	nop
 80021d2:	f7ff fd33 	bl	8001c3c <LL_PWR_IsActiveFlag_VOS>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0fa      	beq.n	80021d2 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fbcd 	bl	800197c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80021e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021e6:	f7ff fbdd 	bl	80019a4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff fbee 	bl	80019cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80021f0:	2002      	movs	r0, #2
 80021f2:	f7ff fba1 	bl	8001938 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80021f6:	bf00      	nop
 80021f8:	f7ff fbb2 	bl	8001960 <LL_RCC_GetSysClkSource>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d1fa      	bne.n	80021f8 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8002202:	4808      	ldr	r0, [pc, #32]	; (8002224 <SystemClock_Config+0xa8>)
 8002204:	f002 fbaa 	bl	800495c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002208:	200f      	movs	r0, #15
 800220a:	f000 fcbf 	bl	8002b8c <HAL_InitTick>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002214:	f000 fc22 	bl	8002a5c <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fbeb 	bl	80019f4 <LL_RCC_SetTIMPrescaler>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	044aa200 	.word	0x044aa200

08002228 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <MX_I2C3_Init+0x74>)
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <MX_I2C3_Init+0x78>)
 8002230:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_I2C3_Init+0x74>)
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <MX_I2C3_Init+0x7c>)
 8002236:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <MX_I2C3_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_I2C3_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_I2C3_Init+0x74>)
 8002246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800224a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <MX_I2C3_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_I2C3_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_I2C3_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_I2C3_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <MX_I2C3_Init+0x74>)
 8002266:	f001 f853 	bl	8003310 <HAL_I2C_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002270:	f000 fbf4 	bl	8002a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002274:	2100      	movs	r1, #0
 8002276:	4809      	ldr	r0, [pc, #36]	; (800229c <MX_I2C3_Init+0x74>)
 8002278:	f001 f98e 	bl	8003598 <HAL_I2CEx_ConfigAnalogFilter>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002282:	f000 fbeb 	bl	8002a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002286:	2100      	movs	r1, #0
 8002288:	4804      	ldr	r0, [pc, #16]	; (800229c <MX_I2C3_Init+0x74>)
 800228a:	f001 f9c1 	bl	8003610 <HAL_I2CEx_ConfigDigitalFilter>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002294:	f000 fbe2 	bl	8002a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200000cc 	.word	0x200000cc
 80022a0:	40005c00 	.word	0x40005c00
 80022a4:	000186a0 	.word	0x000186a0

080022a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b090      	sub	sp, #64	; 0x40
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80022ae:	f107 0318 	add.w	r3, r7, #24
 80022b2:	2228      	movs	r2, #40	; 0x28
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f002 fb84 	bl	80049c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	463b      	mov	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80022cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022d0:	f7ff fc08 	bl	8001ae4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80022d4:	2004      	movs	r0, #4
 80022d6:	f7ff fbed 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022da:	2002      	movs	r0, #2
 80022dc:	f7ff fbea 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC12   ------> SPI3_MOSI
  PB3   ------> SPI3_SCK
  */
  GPIO_InitStruct.Pin = LCD_SDA_Pin;
 80022e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022e6:	2302      	movs	r3, #2
 80022e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022ea:	2303      	movs	r3, #3
 80022ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80022f6:	2306      	movs	r3, #6
 80022f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 80022fa:	463b      	mov	r3, r7
 80022fc:	4619      	mov	r1, r3
 80022fe:	4834      	ldr	r0, [pc, #208]	; (80023d0 <MX_SPI3_Init+0x128>)
 8002300:	f001 ff1e 	bl	8004140 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_SCL_Pin;
 8002304:	2308      	movs	r3, #8
 8002306:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002308:	2302      	movs	r3, #2
 800230a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002314:	2301      	movs	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002318:	2306      	movs	r3, #6
 800231a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LCD_SCL_GPIO_Port, &GPIO_InitStruct);
 800231c:	463b      	mov	r3, r7
 800231e:	4619      	mov	r1, r3
 8002320:	482c      	ldr	r0, [pc, #176]	; (80023d4 <MX_SPI3_Init+0x12c>)
 8002322:	f001 ff0d 	bl	8004140 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_TX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_5, LL_DMA_CHANNEL_0);
 8002326:	2200      	movs	r2, #0
 8002328:	2105      	movs	r1, #5
 800232a:	482b      	ldr	r0, [pc, #172]	; (80023d8 <MX_SPI3_Init+0x130>)
 800232c:	f7ff fa8c 	bl	8001848 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002330:	2240      	movs	r2, #64	; 0x40
 8002332:	2105      	movs	r1, #5
 8002334:	4828      	ldr	r0, [pc, #160]	; (80023d8 <MX_SPI3_Init+0x130>)
 8002336:	f7ff f98b 	bl	8001650 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_5, LL_DMA_PRIORITY_LOW);
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	4826      	ldr	r0, [pc, #152]	; (80023d8 <MX_SPI3_Init+0x130>)
 8002340:	f7ff fa5e 	bl	8001800 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MODE_CIRCULAR);
 8002344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002348:	2105      	movs	r1, #5
 800234a:	4823      	ldr	r0, [pc, #140]	; (80023d8 <MX_SPI3_Init+0x130>)
 800234c:	f7ff f9a4 	bl	8001698 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_PERIPH_NOINCREMENT);
 8002350:	2200      	movs	r2, #0
 8002352:	2105      	movs	r1, #5
 8002354:	4820      	ldr	r0, [pc, #128]	; (80023d8 <MX_SPI3_Init+0x130>)
 8002356:	f7ff f9c3 	bl	80016e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_5, LL_DMA_MEMORY_INCREMENT);
 800235a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235e:	2105      	movs	r1, #5
 8002360:	481d      	ldr	r0, [pc, #116]	; (80023d8 <MX_SPI3_Init+0x130>)
 8002362:	f7ff f9e1 	bl	8001728 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_5, LL_DMA_PDATAALIGN_HALFWORD);
 8002366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236a:	2105      	movs	r1, #5
 800236c:	481a      	ldr	r0, [pc, #104]	; (80023d8 <MX_SPI3_Init+0x130>)
 800236e:	f7ff f9ff 	bl	8001770 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_5, LL_DMA_MDATAALIGN_HALFWORD);
 8002372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002376:	2105      	movs	r1, #5
 8002378:	4817      	ldr	r0, [pc, #92]	; (80023d8 <MX_SPI3_Init+0x130>)
 800237a:	f7ff fa1d 	bl	80017b8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_5);
 800237e:	2105      	movs	r1, #5
 8002380:	4815      	ldr	r0, [pc, #84]	; (80023d8 <MX_SPI3_Init+0x130>)
 8002382:	f7ff fa85 	bl	8001890 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800238a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800238e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8002390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002394:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002396:	2302      	movs	r3, #2
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80023b0:	230a      	movs	r3, #10
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80023b4:	f107 0318 	add.w	r3, r7, #24
 80023b8:	4619      	mov	r1, r3
 80023ba:	4808      	ldr	r0, [pc, #32]	; (80023dc <MX_SPI3_Init+0x134>)
 80023bc:	f001 ff64 	bl	8004288 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80023c0:	2100      	movs	r1, #0
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <MX_SPI3_Init+0x134>)
 80023c4:	f7ff fc4e 	bl	8001c64 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3740      	adds	r7, #64	; 0x40
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020400 	.word	0x40020400
 80023d8:	40026000 	.word	0x40026000
 80023dc:	40003c00 	.word	0x40003c00

080023e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7ff fb8d 	bl	8001b14 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8002402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002406:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4619      	mov	r1, r3
 8002414:	480a      	ldr	r0, [pc, #40]	; (8002440 <MX_TIM1_Init+0x60>)
 8002416:	f001 fffb 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800241a:	4809      	ldr	r0, [pc, #36]	; (8002440 <MX_TIM1_Init+0x60>)
 800241c:	f7ff fc35 	bl	8001c8a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002420:	2100      	movs	r1, #0
 8002422:	4807      	ldr	r0, [pc, #28]	; (8002440 <MX_TIM1_Init+0x60>)
 8002424:	f7ff fccc 	bl	8001dc0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002428:	2100      	movs	r1, #0
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_TIM1_Init+0x60>)
 800242c:	f7ff fcdd 	bl	8001dea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <MX_TIM1_Init+0x60>)
 8002432:	f7ff fced 	bl	8001e10 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40010000 	.word	0x40010000

08002444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b094      	sub	sp, #80	; 0x50
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800244a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800245a:	f107 031c 	add.w	r3, r7, #28
 800245e:	2220      	movs	r2, #32
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f002 faae 	bl	80049c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002478:	2002      	movs	r0, #2
 800247a:	f7ff fb33 	bl	8001ae4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800247e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002482:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002484:	2300      	movs	r3, #0
 8002486:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 179;
 8002488:	23b3      	movs	r3, #179	; 0xb3
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002490:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002494:	4619      	mov	r1, r3
 8002496:	481f      	ldr	r0, [pc, #124]	; (8002514 <MX_TIM3_Init+0xd0>)
 8002498:	f001 ffba 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800249c:	481d      	ldr	r0, [pc, #116]	; (8002514 <MX_TIM3_Init+0xd0>)
 800249e:	f7ff fbf4 	bl	8001c8a <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80024a2:	2101      	movs	r1, #1
 80024a4:	481b      	ldr	r0, [pc, #108]	; (8002514 <MX_TIM3_Init+0xd0>)
 80024a6:	f7ff fc47 	bl	8001d38 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80024aa:	2360      	movs	r3, #96	; 0x60
 80024ac:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 89;
 80024b6:	2359      	movs	r3, #89	; 0x59
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80024ba:	2300      	movs	r3, #0
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	461a      	mov	r2, r3
 80024c4:	2101      	movs	r1, #1
 80024c6:	4813      	ldr	r0, [pc, #76]	; (8002514 <MX_TIM3_Init+0xd0>)
 80024c8:	f002 f83c 	bl	8004544 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80024cc:	2101      	movs	r1, #1
 80024ce:	4811      	ldr	r0, [pc, #68]	; (8002514 <MX_TIM3_Init+0xd0>)
 80024d0:	f7ff fbec 	bl	8001cac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80024d4:	2100      	movs	r1, #0
 80024d6:	480f      	ldr	r0, [pc, #60]	; (8002514 <MX_TIM3_Init+0xd0>)
 80024d8:	f7ff fc87 	bl	8001dea <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_TIM3_Init+0xd0>)
 80024de:	f7ff fc97 	bl	8001e10 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80024e2:	2002      	movs	r0, #2
 80024e4:	f7ff fae6 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB4   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LCD_BLK_Pin;
 80024e8:	2310      	movs	r3, #16
 80024ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80024ec:	2302      	movs	r3, #2
 80024ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80024fc:	2302      	movs	r3, #2
 80024fe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LCD_BLK_GPIO_Port, &GPIO_InitStruct);
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	4619      	mov	r1, r3
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_TIM3_Init+0xd4>)
 8002506:	f001 fe1b 	bl	8004140 <LL_GPIO_Init>

}
 800250a:	bf00      	nop
 800250c:	3750      	adds	r7, #80	; 0x50
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40000400 	.word	0x40000400
 8002518:	40020400 	.word	0x40020400

0800251c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002520:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002524:	f7ff fac6 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002528:	f7fe ffe6 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 800252c:	4603      	mov	r3, r0
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f836 	bl	80015a4 <NVIC_EncodePriority>
 8002538:	4603      	mov	r3, r0
 800253a:	4619      	mov	r1, r3
 800253c:	2010      	movs	r0, #16
 800253e:	f7ff f807 	bl	8001550 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002542:	2010      	movs	r0, #16
 8002544:	f7fe ffe6 	bl	8001514 <__NVIC_EnableIRQ>

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002552:	f107 0318 	add.w	r3, r7, #24
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	463b      	mov	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800256c:	2004      	movs	r0, #4
 800256e:	f7ff faa1 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8002572:	2020      	movs	r0, #32
 8002574:	f7ff fa9e 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002578:	2080      	movs	r0, #128	; 0x80
 800257a:	f7ff fa9b 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800257e:	2001      	movs	r0, #1
 8002580:	f7ff fa98 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002584:	2002      	movs	r0, #2
 8002586:	f7ff fa95 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
 800258a:	2040      	movs	r0, #64	; 0x40
 800258c:	f7ff fa92 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8002590:	2010      	movs	r0, #16
 8002592:	f7ff fa8f 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8002596:	2008      	movs	r0, #8
 8002598:	f7ff fa8c 	bl	8001ab4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin);
 800259c:	2116      	movs	r1, #22
 800259e:	48b8      	ldr	r0, [pc, #736]	; (8002880 <MX_GPIO_Init+0x334>)
 80025a0:	f7ff fcc0 	bl	8001f24 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ACP_RST_GPIO_Port, ACP_RST_Pin);
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	48b7      	ldr	r0, [pc, #732]	; (8002884 <MX_GPIO_Init+0x338>)
 80025a8:	f7ff fcbc 	bl	8001f24 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, RDX_Pin|WRX_DCX_Pin|LCD_DC_Pin|LCD_RES_Pin
 80025ac:	f243 01b0 	movw	r1, #12464	; 0x30b0
 80025b0:	48b5      	ldr	r0, [pc, #724]	; (8002888 <MX_GPIO_Init+0x33c>)
 80025b2:	f7ff fcb7 	bl	8001f24 <LL_GPIO_ResetOutputPin>
                          |LCD_CS_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, LD3_Pin|LD4_Pin);
 80025b6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80025ba:	48b4      	ldr	r0, [pc, #720]	; (800288c <MX_GPIO_Init+0x340>)
 80025bc:	f7ff fcb2 	bl	8001f24 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80025c0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80025c4:	603b      	str	r3, [r7, #0]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025c6:	2302      	movs	r3, #2
 80025c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80025d6:	230c      	movs	r3, #12
 80025d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025da:	463b      	mov	r3, r7
 80025dc:	4619      	mov	r1, r3
 80025de:	48ac      	ldr	r0, [pc, #688]	; (8002890 <MX_GPIO_Init+0x344>)
 80025e0:	f001 fdae 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80025e4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025ea:	2302      	movs	r3, #2
 80025ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80025fa:	2305      	movs	r3, #5
 80025fc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025fe:	463b      	mov	r3, r7
 8002600:	4619      	mov	r1, r3
 8002602:	48a3      	ldr	r0, [pc, #652]	; (8002890 <MX_GPIO_Init+0x344>)
 8002604:	f001 fd9c 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800260e:	2302      	movs	r3, #2
 8002610:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800261e:	230e      	movs	r3, #14
 8002620:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002622:	463b      	mov	r3, r7
 8002624:	4619      	mov	r1, r3
 8002626:	489a      	ldr	r0, [pc, #616]	; (8002890 <MX_GPIO_Init+0x344>)
 8002628:	f001 fd8a 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800262c:	2301      	movs	r3, #1
 800262e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002630:	2302      	movs	r3, #2
 8002632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8002640:	230c      	movs	r3, #12
 8002642:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002644:	463b      	mov	r3, r7
 8002646:	4619      	mov	r1, r3
 8002648:	488d      	ldr	r0, [pc, #564]	; (8002880 <MX_GPIO_Init+0x334>)
 800264a:	f001 fd79 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800264e:	2316      	movs	r3, #22
 8002650:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002652:	2301      	movs	r3, #1
 8002654:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002662:	463b      	mov	r3, r7
 8002664:	4619      	mov	r1, r3
 8002666:	4886      	ldr	r0, [pc, #536]	; (8002880 <MX_GPIO_Init+0x334>)
 8002668:	f001 fd6a 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800266c:	f641 0358 	movw	r3, #6232	; 0x1858
 8002670:	603b      	str	r3, [r7, #0]
                          |R5_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002672:	2302      	movs	r3, #2
 8002674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8002682:	230e      	movs	r3, #14
 8002684:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	463b      	mov	r3, r7
 8002688:	4619      	mov	r1, r3
 800268a:	487e      	ldr	r0, [pc, #504]	; (8002884 <MX_GPIO_Init+0x338>)
 800268c:	f001 fd58 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002694:	2301      	movs	r3, #1
 8002696:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80026a4:	463b      	mov	r3, r7
 80026a6:	4619      	mov	r1, r3
 80026a8:	4876      	ldr	r0, [pc, #472]	; (8002884 <MX_GPIO_Init+0x338>)
 80026aa:	f001 fd49 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80026ae:	2303      	movs	r3, #3
 80026b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026b2:	2302      	movs	r3, #2
 80026b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 80026c2:	2309      	movs	r3, #9
 80026c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	463b      	mov	r3, r7
 80026c8:	4619      	mov	r1, r3
 80026ca:	4872      	ldr	r0, [pc, #456]	; (8002894 <MX_GPIO_Init+0x348>)
 80026cc:	f001 fd38 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80026d0:	2304      	movs	r3, #4
 80026d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80026dc:	463b      	mov	r3, r7
 80026de:	4619      	mov	r1, r3
 80026e0:	486c      	ldr	r0, [pc, #432]	; (8002894 <MX_GPIO_Init+0x348>)
 80026e2:	f001 fd2d 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80026e6:	f248 1333 	movw	r3, #33075	; 0x8133
 80026ea:	603b      	str	r3, [r7, #0]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026ec:	2302      	movs	r3, #2
 80026ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026f8:	2300      	movs	r3, #0
 80026fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80026fc:	230c      	movs	r3, #12
 80026fe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002700:	463b      	mov	r3, r7
 8002702:	4619      	mov	r1, r3
 8002704:	4861      	ldr	r0, [pc, #388]	; (800288c <MX_GPIO_Init+0x340>)
 8002706:	f001 fd1b 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800270a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800270e:	603b      	str	r3, [r7, #0]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002710:	2302      	movs	r3, #2
 8002712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002714:	2303      	movs	r3, #3
 8002716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8002720:	230c      	movs	r3, #12
 8002722:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002724:	463b      	mov	r3, r7
 8002726:	4619      	mov	r1, r3
 8002728:	485b      	ldr	r0, [pc, #364]	; (8002898 <MX_GPIO_Init+0x34c>)
 800272a:	f001 fd09 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800272e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002732:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002734:	2302      	movs	r3, #2
 8002736:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8002744:	230e      	movs	r3, #14
 8002746:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	463b      	mov	r3, r7
 800274a:	4619      	mov	r1, r3
 800274c:	4851      	ldr	r0, [pc, #324]	; (8002894 <MX_GPIO_Init+0x348>)
 800274e:	f001 fcf7 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002752:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002756:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002758:	2302      	movs	r3, #2
 800275a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8002768:	230c      	movs	r3, #12
 800276a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	463b      	mov	r3, r7
 800276e:	4619      	mov	r1, r3
 8002770:	4848      	ldr	r0, [pc, #288]	; (8002894 <MX_GPIO_Init+0x348>)
 8002772:	f001 fce5 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800277a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002784:	463b      	mov	r3, r7
 8002786:	4619      	mov	r1, r3
 8002788:	4842      	ldr	r0, [pc, #264]	; (8002894 <MX_GPIO_Init+0x348>)
 800278a:	f001 fcd9 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800278e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002792:	603b      	str	r3, [r7, #0]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002794:	2302      	movs	r3, #2
 8002796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80027a4:	230c      	movs	r3, #12
 80027a6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a8:	463b      	mov	r3, r7
 80027aa:	4619      	mov	r1, r3
 80027ac:	4836      	ldr	r0, [pc, #216]	; (8002888 <MX_GPIO_Init+0x33c>)
 80027ae:	f001 fcc7 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TE_Pin;
 80027b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80027b8:	2300      	movs	r3, #0
 80027ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80027c0:	463b      	mov	r3, r7
 80027c2:	4619      	mov	r1, r3
 80027c4:	4830      	ldr	r0, [pc, #192]	; (8002888 <MX_GPIO_Init+0x33c>)
 80027c6:	f001 fcbb 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|LCD_DC_Pin|LCD_RES_Pin
 80027ca:	f243 03b0 	movw	r3, #12464	; 0x30b0
 80027ce:	603b      	str	r3, [r7, #0]
                          |LCD_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027d0:	2301      	movs	r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e0:	463b      	mov	r3, r7
 80027e2:	4619      	mov	r1, r3
 80027e4:	4828      	ldr	r0, [pc, #160]	; (8002888 <MX_GPIO_Init+0x33c>)
 80027e6:	f001 fcab 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80027ea:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80027ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027f0:	2302      	movs	r3, #2
 80027f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8002800:	230e      	movs	r3, #14
 8002802:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002804:	463b      	mov	r3, r7
 8002806:	4619      	mov	r1, r3
 8002808:	4820      	ldr	r0, [pc, #128]	; (800288c <MX_GPIO_Init+0x340>)
 800280a:	f001 fc99 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800280e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002812:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002814:	2302      	movs	r3, #2
 8002816:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 8002824:	230e      	movs	r3, #14
 8002826:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002828:	463b      	mov	r3, r7
 800282a:	4619      	mov	r1, r3
 800282c:	4814      	ldr	r0, [pc, #80]	; (8002880 <MX_GPIO_Init+0x334>)
 800282e:	f001 fc87 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002832:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002836:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002838:	2302      	movs	r3, #2
 800283a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800283c:	2303      	movs	r3, #3
 800283e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002848:	2307      	movs	r3, #7
 800284a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	463b      	mov	r3, r7
 800284e:	4619      	mov	r1, r3
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <MX_GPIO_Init+0x338>)
 8002852:	f001 fc75 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002856:	2348      	movs	r3, #72	; 0x48
 8002858:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800285a:	2302      	movs	r3, #2
 800285c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_14;
 800286a:	230e      	movs	r3, #14
 800286c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286e:	463b      	mov	r3, r7
 8002870:	4619      	mov	r1, r3
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_GPIO_Init+0x33c>)
 8002874:	f001 fc64 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002878:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	e00d      	b.n	800289c <MX_GPIO_Init+0x350>
 8002880:	40020800 	.word	0x40020800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020c00 	.word	0x40020c00
 800288c:	40021800 	.word	0x40021800
 8002890:	40021400 	.word	0x40021400
 8002894:	40020400 	.word	0x40020400
 8002898:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800289c:	2302      	movs	r3, #2
 800289e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 80028ac:	2309      	movs	r3, #9
 80028ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b0:	463b      	mov	r3, r7
 80028b2:	4619      	mov	r1, r3
 80028b4:	485a      	ldr	r0, [pc, #360]	; (8002a20 <MX_GPIO_Init+0x4d4>)
 80028b6:	f001 fc43 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80028ba:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80028be:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028c0:	2301      	movs	r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028d0:	463b      	mov	r3, r7
 80028d2:	4619      	mov	r1, r3
 80028d4:	4852      	ldr	r0, [pc, #328]	; (8002a20 <MX_GPIO_Init+0x4d4>)
 80028d6:	f001 fc33 	bl	8004140 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80028da:	2360      	movs	r3, #96	; 0x60
 80028dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028de:	2302      	movs	r3, #2
 80028e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80028ee:	230c      	movs	r3, #12
 80028f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	463b      	mov	r3, r7
 80028f4:	4619      	mov	r1, r3
 80028f6:	484b      	ldr	r0, [pc, #300]	; (8002a24 <MX_GPIO_Init+0x4d8>)
 80028f8:	f001 fc22 	bl	8004140 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 80028fc:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff f91f 	bl	8001b44 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 8002906:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800290a:	2000      	movs	r0, #0
 800290c:	f7ff f91a 	bl	8001b44 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8002910:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8002914:	2000      	movs	r0, #0
 8002916:	f7ff f915 	bl	8001b44 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE5);
 800291a:	4943      	ldr	r1, [pc, #268]	; (8002a28 <MX_GPIO_Init+0x4dc>)
 800291c:	2002      	movs	r0, #2
 800291e:	f7ff f911 	bl	8001b44 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);
 8002922:	4942      	ldr	r1, [pc, #264]	; (8002a2c <MX_GPIO_Init+0x4e0>)
 8002924:	2000      	movs	r0, #0
 8002926:	f7ff f90d 	bl	8001b44 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800292a:	2301      	movs	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8002932:	2301      	movs	r3, #1
 8002934:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002936:	2301      	movs	r3, #1
 8002938:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800293a:	f107 0318 	add.w	r3, r7, #24
 800293e:	4618      	mov	r0, r3
 8002940:	f001 fa32 	bl	8003da8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002948:	2301      	movs	r3, #1
 800294a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 800294c:	2301      	movs	r3, #1
 800294e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002950:	2301      	movs	r3, #1
 8002952:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002954:	f107 0318 	add.w	r3, r7, #24
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fa25 	bl	8003da8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800295e:	2304      	movs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8002966:	2301      	movs	r3, #1
 8002968:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800296a:	2301      	movs	r3, #1
 800296c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800296e:	f107 0318 	add.w	r3, r7, #24
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fa18 	bl	8003da8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8002978:	2320      	movs	r3, #32
 800297a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800297c:	2301      	movs	r3, #1
 800297e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8002980:	2301      	movs	r3, #1
 8002982:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002984:	2301      	movs	r3, #1
 8002986:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002988:	f107 0318 	add.w	r3, r7, #24
 800298c:	4618      	mov	r0, r3
 800298e:	f001 fa0b 	bl	8003da8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8002992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002996:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002998:	2301      	movs	r3, #1
 800299a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 800299c:	2301      	movs	r3, #1
 800299e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80029a0:	2301      	movs	r3, #1
 80029a2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 f9fd 	bl	8003da8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2101      	movs	r1, #1
 80029b2:	481f      	ldr	r0, [pc, #124]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 80029b4:	f7ff fa79 	bl	8001eaa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_PULL_NO);
 80029b8:	2200      	movs	r2, #0
 80029ba:	2102      	movs	r1, #2
 80029bc:	481c      	ldr	r0, [pc, #112]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 80029be:	f7ff fa74 	bl	8001eaa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2104      	movs	r1, #4
 80029c6:	481a      	ldr	r0, [pc, #104]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 80029c8:	f7ff fa6f 	bl	8001eaa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(OTG_FS_OC_GPIO_Port, OTG_FS_OC_Pin, LL_GPIO_PULL_NO);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2120      	movs	r1, #32
 80029d0:	4818      	ldr	r0, [pc, #96]	; (8002a34 <MX_GPIO_Init+0x4e8>)
 80029d2:	f7ff fa6a 	bl	8001eaa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(TP_INT1_GPIO_Port, TP_INT1_Pin, LL_GPIO_PULL_NO);
 80029d6:	2200      	movs	r2, #0
 80029d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029dc:	4814      	ldr	r0, [pc, #80]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 80029de:	f7ff fa64 	bl	8001eaa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80029e2:	2200      	movs	r2, #0
 80029e4:	2101      	movs	r1, #1
 80029e6:	4812      	ldr	r0, [pc, #72]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 80029e8:	f7ff fa22 	bl	8001e30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_MODE_INPUT);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2102      	movs	r1, #2
 80029f0:	480f      	ldr	r0, [pc, #60]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 80029f2:	f7ff fa1d 	bl	8001e30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2104      	movs	r1, #4
 80029fa:	480d      	ldr	r0, [pc, #52]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 80029fc:	f7ff fa18 	bl	8001e30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(OTG_FS_OC_GPIO_Port, OTG_FS_OC_Pin, LL_GPIO_MODE_INPUT);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2120      	movs	r1, #32
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <MX_GPIO_Init+0x4e8>)
 8002a06:	f7ff fa13 	bl	8001e30 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TP_INT1_GPIO_Port, TP_INT1_Pin, LL_GPIO_MODE_INPUT);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a10:	4807      	ldr	r0, [pc, #28]	; (8002a30 <MX_GPIO_Init+0x4e4>)
 8002a12:	f7ff fa0d 	bl	8001e30 <LL_GPIO_SetPinMode>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a16:	bf00      	nop
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021800 	.word	0x40021800
 8002a24:	40020400 	.word	0x40020400
 8002a28:	00f00001 	.word	0x00f00001
 8002a2c:	f0000003 	.word	0xf0000003
 8002a30:	40020000 	.word	0x40020000
 8002a34:	40020800 	.word	0x40020800

08002a38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a4a:	f000 f9bf 	bl	8002dcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40001000 	.word	0x40001000

08002a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <Error_Handler+0x8>
	...

08002a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a08      	ldr	r2, [pc, #32]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_MspInit+0x4c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a29      	ldr	r2, [pc, #164]	; (8002b7c <HAL_I2C_MspInit+0xc4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d14b      	bne.n	8002b72 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a27      	ldr	r2, [pc, #156]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b18:	2312      	movs	r3, #18
 8002b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b24:	2304      	movs	r3, #4
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4815      	ldr	r0, [pc, #84]	; (8002b84 <HAL_I2C_MspInit+0xcc>)
 8002b30:	f000 fa42 	bl	8002fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3a:	2312      	movs	r3, #18
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b46:	2304      	movs	r3, #4
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480d      	ldr	r0, [pc, #52]	; (8002b88 <HAL_I2C_MspInit+0xd0>)
 8002b52:	f000 fa31 	bl	8002fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_I2C_MspInit+0xc8>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40005c00 	.word	0x40005c00
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020000 	.word	0x40020000

08002b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	4b33      	ldr	r3, [pc, #204]	; (8002c70 <HAL_InitTick+0xe4>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	4a32      	ldr	r2, [pc, #200]	; (8002c70 <HAL_InitTick+0xe4>)
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6413      	str	r3, [r2, #64]	; 0x40
 8002bac:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <HAL_InitTick+0xe4>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bb8:	f107 0210 	add.w	r2, r7, #16
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fd84 	bl	80036d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bd2:	f000 fd69 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8002bd6:	6378      	str	r0, [r7, #52]	; 0x34
 8002bd8:	e004      	b.n	8002be4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bda:	f000 fd65 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8002bde:	4603      	mov	r3, r0
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <HAL_InitTick+0xe8>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9b      	lsrs	r3, r3, #18
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bf2:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_InitTick+0xec>)
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_InitTick+0xf0>)
 8002bf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	; (8002c78 <HAL_InitTick+0xec>)
 8002bfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bfe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_InitTick+0xec>)
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c06:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <HAL_InitTick+0xec>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_InitTick+0xec>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c12:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_InitTick+0xec>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c18:	4817      	ldr	r0, [pc, #92]	; (8002c78 <HAL_InitTick+0xec>)
 8002c1a:	f000 fd8b 	bl	8003734 <HAL_TIM_Base_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d11b      	bne.n	8002c64 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c2c:	4812      	ldr	r0, [pc, #72]	; (8002c78 <HAL_InitTick+0xec>)
 8002c2e:	f000 fddb 	bl	80037e8 <HAL_TIM_Base_Start_IT>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c40:	2036      	movs	r0, #54	; 0x36
 8002c42:	f000 f9ab 	bl	8002f9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d808      	bhi.n	8002c5e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	2036      	movs	r0, #54	; 0x36
 8002c52:	f000 f987 	bl	8002f64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_InitTick+0xf4>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e002      	b.n	8002c64 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3738      	adds	r7, #56	; 0x38
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	20000124 	.word	0x20000124
 8002c7c:	40001000 	.word	0x40001000
 8002c80:	200000a4 	.word	0x200000a4

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c88:	e7fe      	b.n	8002c88 <NMI_Handler+0x4>

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <MemManage_Handler+0x4>

08002c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	e7fe      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	millis++;
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <SysTick_Handler+0x18>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	4a03      	ldr	r2, [pc, #12]	; (8002ce4 <SysTick_Handler+0x18>)
 8002cd8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	20000120 	.word	0x20000120

08002ce8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	Display_TC_Callback(DMA1, LL_DMA_STREAM_5);
 8002cec:	2105      	movs	r1, #5
 8002cee:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <DMA1_Stream5_IRQHandler+0x10>)
 8002cf0:	f7fd faa0 	bl	8000234 <Display_TC_Callback>
  /* USER CODE END DMA1_Stream5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40026000 	.word	0x40026000

08002cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <TIM6_DAC_IRQHandler+0x10>)
 8002d02:	f000 fde1 	bl	80038c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000124 	.word	0x20000124

08002d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d14:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <SystemInit+0x20>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <SystemInit+0x20>)
 8002d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d38:	f7ff ffea 	bl	8002d10 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d3e:	490d      	ldr	r1, [pc, #52]	; (8002d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d54:	4c0a      	ldr	r4, [pc, #40]	; (8002d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d62:	f001 fe0b 	bl	800497c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d66:	f7ff f8ed 	bl	8001f44 <main>
  bx  lr    
 8002d6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d74:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002d78:	080076d8 	.word	0x080076d8
  ldr r2, =_sbss
 8002d7c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002d80:	20000170 	.word	0x20000170

08002d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <ADC_IRQHandler>
	...

08002d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <HAL_Init+0x40>)
 8002d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_Init+0x40>)
 8002d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da4:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a07      	ldr	r2, [pc, #28]	; (8002dc8 <HAL_Init+0x40>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db0:	2003      	movs	r0, #3
 8002db2:	f000 f8cc 	bl	8002f4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002db6:	200f      	movs	r0, #15
 8002db8:	f7ff fee8 	bl	8002b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dbc:	f7ff fe54 	bl	8002a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00

08002dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x20>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_IncTick+0x24>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_IncTick+0x24>)
 8002dde:	6013      	str	r3, [r2, #0]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	200000a8 	.word	0x200000a8
 8002df0:	2000016c 	.word	0x2000016c

08002df4 <__NVIC_SetPriorityGrouping>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	; (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	; (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	; (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ff4c 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f76:	f7ff ff61 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002f7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	6978      	ldr	r0, [r7, #20]
 8002f82:	f7ff ffb1 	bl	8002ee8 <NVIC_EncodePriority>
 8002f86:	4602      	mov	r2, r0
 8002f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff80 	bl	8002e94 <__NVIC_SetPriority>
}
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff54 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	e177      	b.n	80032c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8166 	bne.w	80032be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d005      	beq.n	800300a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003006:	2b02      	cmp	r3, #2
 8003008:	d130      	bne.n	800306c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	2203      	movs	r2, #3
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d017      	beq.n	80030a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	69b9      	ldr	r1, [r7, #24]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80c0 	beq.w	80032be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_GPIO_Init+0x324>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_GPIO_Init+0x324>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314c:	6453      	str	r3, [r2, #68]	; 0x44
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_GPIO_Init+0x324>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315a:	4a61      	ldr	r2, [pc, #388]	; (80032e0 <HAL_GPIO_Init+0x328>)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	220f      	movs	r2, #15
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_GPIO_Init+0x32c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d037      	beq.n	80031f6 <HAL_GPIO_Init+0x23e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a57      	ldr	r2, [pc, #348]	; (80032e8 <HAL_GPIO_Init+0x330>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d031      	beq.n	80031f2 <HAL_GPIO_Init+0x23a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a56      	ldr	r2, [pc, #344]	; (80032ec <HAL_GPIO_Init+0x334>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02b      	beq.n	80031ee <HAL_GPIO_Init+0x236>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a55      	ldr	r2, [pc, #340]	; (80032f0 <HAL_GPIO_Init+0x338>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d025      	beq.n	80031ea <HAL_GPIO_Init+0x232>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_GPIO_Init+0x33c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01f      	beq.n	80031e6 <HAL_GPIO_Init+0x22e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a53      	ldr	r2, [pc, #332]	; (80032f8 <HAL_GPIO_Init+0x340>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d019      	beq.n	80031e2 <HAL_GPIO_Init+0x22a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_GPIO_Init+0x344>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_GPIO_Init+0x226>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a51      	ldr	r2, [pc, #324]	; (8003300 <HAL_GPIO_Init+0x348>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00d      	beq.n	80031da <HAL_GPIO_Init+0x222>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a50      	ldr	r2, [pc, #320]	; (8003304 <HAL_GPIO_Init+0x34c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <HAL_GPIO_Init+0x21e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4f      	ldr	r2, [pc, #316]	; (8003308 <HAL_GPIO_Init+0x350>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_GPIO_Init+0x21a>
 80031ce:	2309      	movs	r3, #9
 80031d0:	e012      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031d2:	230a      	movs	r3, #10
 80031d4:	e010      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031d6:	2308      	movs	r3, #8
 80031d8:	e00e      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031da:	2307      	movs	r3, #7
 80031dc:	e00c      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031de:	2306      	movs	r3, #6
 80031e0:	e00a      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031e2:	2305      	movs	r3, #5
 80031e4:	e008      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031e6:	2304      	movs	r3, #4
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031ea:	2303      	movs	r3, #3
 80031ec:	e004      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_GPIO_Init+0x240>
 80031f6:	2300      	movs	r3, #0
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f002 0203 	and.w	r2, r2, #3
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	4093      	lsls	r3, r2
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003208:	4935      	ldr	r1, [pc, #212]	; (80032e0 <HAL_GPIO_Init+0x328>)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003216:	4b3d      	ldr	r3, [pc, #244]	; (800330c <HAL_GPIO_Init+0x354>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323a:	4a34      	ldr	r2, [pc, #208]	; (800330c <HAL_GPIO_Init+0x354>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003240:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_GPIO_Init+0x354>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003264:	4a29      	ldr	r2, [pc, #164]	; (800330c <HAL_GPIO_Init+0x354>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_GPIO_Init+0x354>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <HAL_GPIO_Init+0x354>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_GPIO_Init+0x354>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b8:	4a14      	ldr	r2, [pc, #80]	; (800330c <HAL_GPIO_Init+0x354>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3301      	adds	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	f67f ae84 	bls.w	8002fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40020400 	.word	0x40020400
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020c00 	.word	0x40020c00
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40021400 	.word	0x40021400
 80032fc:	40021800 	.word	0x40021800
 8003300:	40021c00 	.word	0x40021c00
 8003304:	40022000 	.word	0x40022000
 8003308:	40022400 	.word	0x40022400
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e12b      	b.n	800357a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d106      	bne.n	800333c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fbbe 	bl	8002ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2224      	movs	r2, #36	; 0x24
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003374:	f000 f998 	bl	80036a8 <HAL_RCC_GetPCLK1Freq>
 8003378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a81      	ldr	r2, [pc, #516]	; (8003584 <HAL_I2C_Init+0x274>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d807      	bhi.n	8003394 <HAL_I2C_Init+0x84>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a80      	ldr	r2, [pc, #512]	; (8003588 <HAL_I2C_Init+0x278>)
 8003388:	4293      	cmp	r3, r2
 800338a:	bf94      	ite	ls
 800338c:	2301      	movls	r3, #1
 800338e:	2300      	movhi	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e006      	b.n	80033a2 <HAL_I2C_Init+0x92>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a7d      	ldr	r2, [pc, #500]	; (800358c <HAL_I2C_Init+0x27c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	bf94      	ite	ls
 800339c:	2301      	movls	r3, #1
 800339e:	2300      	movhi	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e0e7      	b.n	800357a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a78      	ldr	r2, [pc, #480]	; (8003590 <HAL_I2C_Init+0x280>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	0c9b      	lsrs	r3, r3, #18
 80033b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a6a      	ldr	r2, [pc, #424]	; (8003584 <HAL_I2C_Init+0x274>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d802      	bhi.n	80033e4 <HAL_I2C_Init+0xd4>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3301      	adds	r3, #1
 80033e2:	e009      	b.n	80033f8 <HAL_I2C_Init+0xe8>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <HAL_I2C_Init+0x284>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	3301      	adds	r3, #1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800340a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	495c      	ldr	r1, [pc, #368]	; (8003584 <HAL_I2C_Init+0x274>)
 8003414:	428b      	cmp	r3, r1
 8003416:	d819      	bhi.n	800344c <HAL_I2C_Init+0x13c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e59      	subs	r1, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fbb1 f3f3 	udiv	r3, r1, r3
 8003426:	1c59      	adds	r1, r3, #1
 8003428:	f640 73fc 	movw	r3, #4092	; 0xffc
 800342c:	400b      	ands	r3, r1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_I2C_Init+0x138>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e59      	subs	r1, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003446:	e051      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 8003448:	2304      	movs	r3, #4
 800344a:	e04f      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <HAL_I2C_Init+0x168>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e012      	b.n	800349e <HAL_I2C_Init+0x18e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	0099      	lsls	r1, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Init+0x196>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e022      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10e      	bne.n	80034cc <HAL_I2C_Init+0x1bc>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1e58      	subs	r0, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6859      	ldr	r1, [r3, #4]
 80034b6:	460b      	mov	r3, r1
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	440b      	add	r3, r1
 80034bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ca:	e00f      	b.n	80034ec <HAL_I2C_Init+0x1dc>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	0099      	lsls	r1, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	6809      	ldr	r1, [r1, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800351a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6911      	ldr	r1, [r2, #16]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68d2      	ldr	r2, [r2, #12]
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	430b      	orrs	r3, r1
 800352e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	000186a0 	.word	0x000186a0
 8003588:	001e847f 	.word	0x001e847f
 800358c:	003d08ff 	.word	0x003d08ff
 8003590:	431bde83 	.word	0x431bde83
 8003594:	10624dd3 	.word	0x10624dd3

08003598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d129      	bne.n	8003602 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2224      	movs	r2, #36	; 0x24
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0210 	bic.w	r2, r2, #16
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0201 	orr.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	d12a      	bne.n	8003680 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2224      	movs	r2, #36	; 0x24
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0201 	bic.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	f023 030f 	bic.w	r3, r3, #15
 8003650:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	b29a      	uxth	r2, r3
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	4313      	orrs	r3, r2
 800365a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	89fa      	ldrh	r2, [r7, #14]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e000      	b.n	8003682 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
  }
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003696:	681b      	ldr	r3, [r3, #0]
}
 8003698:	4618      	mov	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	200000a0 	.word	0x200000a0

080036a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036ac:	f7ff fff0 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0a9b      	lsrs	r3, r3, #10
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080076a0 	.word	0x080076a0

080036d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	220f      	movs	r2, #15
 80036de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0203 	and.w	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_RCC_GetClockConfig+0x5c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCC_GetClockConfig+0x60>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 020f 	and.w	r2, r3, #15
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	40023c00 	.word	0x40023c00

08003734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e041      	b.n	80037ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f839 	bl	80037d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f000 f9c0 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e04e      	b.n	800389e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a23      	ldr	r2, [pc, #140]	; (80038ac <HAL_TIM_Base_Start_IT+0xc4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d022      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x80>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382a:	d01d      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x80>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d018      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x80>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d013      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x80>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00e      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x80>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d009      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x80>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d004      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x80>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d111      	bne.n	800388c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b06      	cmp	r3, #6
 8003878:	d010      	beq.n	800389c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f042 0201 	orr.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	e007      	b.n	800389c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800
 80038b8:	40000c00 	.word	0x40000c00
 80038bc:	40010400 	.word	0x40010400
 80038c0:	40014000 	.word	0x40014000
 80038c4:	40001800 	.word	0x40001800

080038c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d020      	beq.n	800392c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0202 	mvn.w	r2, #2
 80038fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8d2 	bl	8003abc <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8c4 	bl	8003aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f8d5 	bl	8003ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d020      	beq.n	8003978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01b      	beq.n	8003978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0204 	mvn.w	r2, #4
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8ac 	bl	8003abc <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f89e 	bl	8003aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f8af 	bl	8003ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d020      	beq.n	80039c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01b      	beq.n	80039c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0208 	mvn.w	r2, #8
 8003994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2204      	movs	r2, #4
 800399a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f886 	bl	8003abc <HAL_TIM_IC_CaptureCallback>
 80039b0:	e005      	b.n	80039be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f878 	bl	8003aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f889 	bl	8003ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d020      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01b      	beq.n	8003a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f06f 0210 	mvn.w	r2, #16
 80039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2208      	movs	r2, #8
 80039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f860 	bl	8003abc <HAL_TIM_IC_CaptureCallback>
 80039fc:	e005      	b.n	8003a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f852 	bl	8003aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f863 	bl	8003ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00c      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0201 	mvn.w	r2, #1
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff f802 	bl	8002a38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00c      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f906 	bl	8003c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00c      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f834 	bl	8003ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0220 	mvn.w	r2, #32
 8003a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f8d8 	bl	8003c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a46      	ldr	r2, [pc, #280]	; (8003c24 <TIM_Base_SetConfig+0x12c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d00f      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a43      	ldr	r2, [pc, #268]	; (8003c28 <TIM_Base_SetConfig+0x130>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00b      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a42      	ldr	r2, [pc, #264]	; (8003c2c <TIM_Base_SetConfig+0x134>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a41      	ldr	r2, [pc, #260]	; (8003c30 <TIM_Base_SetConfig+0x138>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_Base_SetConfig+0x40>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <TIM_Base_SetConfig+0x13c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d108      	bne.n	8003b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a35      	ldr	r2, [pc, #212]	; (8003c24 <TIM_Base_SetConfig+0x12c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02b      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b58:	d027      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <TIM_Base_SetConfig+0x130>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d023      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a31      	ldr	r2, [pc, #196]	; (8003c2c <TIM_Base_SetConfig+0x134>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01f      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <TIM_Base_SetConfig+0x138>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01b      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2f      	ldr	r2, [pc, #188]	; (8003c34 <TIM_Base_SetConfig+0x13c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d017      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2e      	ldr	r2, [pc, #184]	; (8003c38 <TIM_Base_SetConfig+0x140>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2d      	ldr	r2, [pc, #180]	; (8003c3c <TIM_Base_SetConfig+0x144>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00f      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <TIM_Base_SetConfig+0x148>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <TIM_Base_SetConfig+0x14c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2a      	ldr	r2, [pc, #168]	; (8003c48 <TIM_Base_SetConfig+0x150>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a29      	ldr	r2, [pc, #164]	; (8003c4c <TIM_Base_SetConfig+0x154>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a10      	ldr	r2, [pc, #64]	; (8003c24 <TIM_Base_SetConfig+0x12c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0xf8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <TIM_Base_SetConfig+0x13c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f023 0201 	bic.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]
  }
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00
 8003c34:	40010400 	.word	0x40010400
 8003c38:	40014000 	.word	0x40014000
 8003c3c:	40014400 	.word	0x40014400
 8003c40:	40014800 	.word	0x40014800
 8003c44:	40001800 	.word	0x40001800
 8003c48:	40001c00 	.word	0x40001c00
 8003c4c:	40002000 	.word	0x40002000

08003c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <LL_EXTI_EnableIT_0_31+0x20>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4904      	ldr	r1, [pc, #16]	; (8003c98 <LL_EXTI_EnableIT_0_31+0x20>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40013c00 	.word	0x40013c00

08003c9c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <LL_EXTI_DisableIT_0_31+0x24>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40013c00 	.word	0x40013c00

08003cc4 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	4904      	ldr	r1, [pc, #16]	; (8003ce4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	604b      	str	r3, [r1, #4]

}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40013c00 	.word	0x40013c00

08003ce8 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	4904      	ldr	r1, [pc, #16]	; (8003d0c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	604b      	str	r3, [r1, #4]
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40013c00 	.word	0x40013c00

08003d10 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	4904      	ldr	r1, [pc, #16]	; (8003d30 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]

}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40013c00 	.word	0x40013c00

08003d34 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]

}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40013c00 	.word	0x40013c00

08003d5c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	4904      	ldr	r1, [pc, #16]	; (8003d7c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60cb      	str	r3, [r1, #12]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40013c00 	.word	0x40013c00

08003d80 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	4904      	ldr	r1, [pc, #16]	; (8003da4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	60cb      	str	r3, [r1, #12]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40013c00 	.word	0x40013c00

08003da8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	791b      	ldrb	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d065      	beq.n	8003e88 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d06c      	beq.n	8003e9e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	795b      	ldrb	r3, [r3, #5]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d01c      	beq.n	8003e06 <LL_EXTI_Init+0x5e>
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	dc25      	bgt.n	8003e1c <LL_EXTI_Init+0x74>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <LL_EXTI_Init+0x32>
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d00b      	beq.n	8003df0 <LL_EXTI_Init+0x48>
 8003dd8:	e020      	b.n	8003e1c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff ff82 	bl	8003ce8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff45 	bl	8003c78 <LL_EXTI_EnableIT_0_31>
          break;
 8003dee:	e018      	b.n	8003e22 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff51 	bl	8003c9c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff ff60 	bl	8003cc4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003e04:	e00d      	b.n	8003e22 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ff34 	bl	8003c78 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff55 	bl	8003cc4 <LL_EXTI_EnableEvent_0_31>
          break;
 8003e1a:	e002      	b.n	8003e22 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e20:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	799b      	ldrb	r3, [r3, #6]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d039      	beq.n	8003e9e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	799b      	ldrb	r3, [r3, #6]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d01c      	beq.n	8003e6c <LL_EXTI_Init+0xc4>
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	dc25      	bgt.n	8003e82 <LL_EXTI_Init+0xda>
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d002      	beq.n	8003e40 <LL_EXTI_Init+0x98>
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d00b      	beq.n	8003e56 <LL_EXTI_Init+0xae>
 8003e3e:	e020      	b.n	8003e82 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff ff9b 	bl	8003d80 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff ff5e 	bl	8003d10 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003e54:	e024      	b.n	8003ea0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff6a 	bl	8003d34 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff79 	bl	8003d5c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003e6a:	e019      	b.n	8003ea0 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff4d 	bl	8003d10 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ff6e 	bl	8003d5c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003e80:	e00e      	b.n	8003ea0 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
            break;
 8003e86:	e00b      	b.n	8003ea0 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff ff05 	bl	8003c9c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff26 	bl	8003ce8 <LL_EXTI_DisableEvent_0_31>
 8003e9c:	e000      	b.n	8003ea0 <LL_EXTI_Init+0xf8>
      }
 8003e9e:	bf00      	nop
  }
  return status;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <LL_GPIO_SetPinMode>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b08b      	sub	sp, #44	; 0x2c
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa93 f3a3 	rbit	r3, r3
 8003ec4:	613b      	str	r3, [r7, #16]
  return result;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	e003      	b.n	8003edc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2103      	movs	r1, #3
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	401a      	ands	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	61fb      	str	r3, [r7, #28]
  return result;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003efe:	2320      	movs	r3, #32
 8003f00:	e003      	b.n	8003f0a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	431a      	orrs	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	372c      	adds	r7, #44	; 0x2c
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_GPIO_SetPinOutputType>:
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	43db      	mvns	r3, r3
 8003f38:	401a      	ands	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
}
 8003f48:	bf00      	nop
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_GPIO_SetPinSpeed>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b08b      	sub	sp, #44	; 0x2c
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	613b      	str	r3, [r7, #16]
  return result;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	e003      	b.n	8003f86 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	2103      	movs	r1, #3
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	401a      	ands	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	61fb      	str	r3, [r7, #28]
  return result;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	e003      	b.n	8003fb4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	609a      	str	r2, [r3, #8]
}
 8003fc2:	bf00      	nop
 8003fc4:	372c      	adds	r7, #44	; 0x2c
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <LL_GPIO_SetPinPull>:
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b08b      	sub	sp, #44	; 0x2c
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	613b      	str	r3, [r7, #16]
  return result;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e003      	b.n	8004000 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2103      	movs	r1, #3
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	401a      	ands	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	fa93 f3a3 	rbit	r3, r3
 8004016:	61fb      	str	r3, [r7, #28]
  return result;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004022:	2320      	movs	r3, #32
 8004024:	e003      	b.n	800402e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	fab3 f383 	clz	r3, r3
 800402c:	b2db      	uxtb	r3, r3
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	60da      	str	r2, [r3, #12]
}
 800403c:	bf00      	nop
 800403e:	372c      	adds	r7, #44	; 0x2c
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_GPIO_SetAFPin_0_7>:
{
 8004048:	b480      	push	{r7}
 800404a:	b08b      	sub	sp, #44	; 0x2c
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	613b      	str	r3, [r7, #16]
  return result;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800406e:	2320      	movs	r3, #32
 8004070:	e003      	b.n	800407a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	210f      	movs	r1, #15
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	61fb      	str	r3, [r7, #28]
  return result;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800409c:	2320      	movs	r3, #32
 800409e:	e003      	b.n	80040a8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	431a      	orrs	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	372c      	adds	r7, #44	; 0x2c
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_GPIO_SetAFPin_8_15>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	b08b      	sub	sp, #44	; 0x2c
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	613b      	str	r3, [r7, #16]
  return result;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	210f      	movs	r1, #15
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	43db      	mvns	r3, r3
 8004100:	401a      	ands	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	61fb      	str	r3, [r7, #28]
  return result;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800411a:	2320      	movs	r3, #32
 800411c:	e003      	b.n	8004126 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	b2db      	uxtb	r3, r3
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	431a      	orrs	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004134:	bf00      	nop
 8004136:	372c      	adds	r7, #44	; 0x2c
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t currentpin = 0x00000000U;
 800414e:	2300      	movs	r3, #0
 8004150:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	fa93 f3a3 	rbit	r3, r3
 800415e:	617b      	str	r3, [r7, #20]
  return result;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <LL_GPIO_Init+0x2e>
    return 32U;
 800416a:	2320      	movs	r3, #32
 800416c:	e003      	b.n	8004176 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	fab3 f383 	clz	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004178:	e057      	b.n	800422a <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	2101      	movs	r1, #1
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	4013      	ands	r3, r2
 8004188:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d049      	beq.n	8004224 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d003      	beq.n	80041a0 <LL_GPIO_Init+0x60>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d10d      	bne.n	80041bc <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6a39      	ldr	r1, [r7, #32]
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fed3 	bl	8003f54 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	461a      	mov	r2, r3
 80041b4:	6a39      	ldr	r1, [r7, #32]
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff feb4 	bl	8003f24 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	461a      	mov	r2, r3
 80041c2:	6a39      	ldr	r1, [r7, #32]
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff02 	bl	8003fce <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d121      	bne.n	8004216 <LL_GPIO_Init+0xd6>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	60bb      	str	r3, [r7, #8]
  return result;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <LL_GPIO_Init+0xac>
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e003      	b.n	80041f4 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	fab3 f383 	clz	r3, r3
 80041f2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80041f4:	2b07      	cmp	r3, #7
 80041f6:	d807      	bhi.n	8004208 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	461a      	mov	r2, r3
 80041fe:	6a39      	ldr	r1, [r7, #32]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff21 	bl	8004048 <LL_GPIO_SetAFPin_0_7>
 8004206:	e006      	b.n	8004216 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	461a      	mov	r2, r3
 800420e:	6a39      	ldr	r1, [r7, #32]
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff56 	bl	80040c2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	461a      	mov	r2, r3
 800421c:	6a39      	ldr	r1, [r7, #32]
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe43 	bl	8003eaa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	3301      	adds	r3, #1
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004230:	fa22 f303 	lsr.w	r3, r2, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1a0      	bne.n	800417a <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3728      	adds	r7, #40	; 0x28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <LL_SPI_IsEnabled>:
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d101      	bne.n	800425a <LL_SPI_IsEnabled+0x18>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <LL_SPI_IsEnabled+0x1a>
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_SPI_SetCRCPolynomial>:
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	611a      	str	r2, [r3, #16]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ffd3 	bl	8004242 <LL_SPI_IsEnabled>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d139      	bne.n	8004316 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042aa:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	6811      	ldr	r1, [r2, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	6852      	ldr	r2, [r2, #4]
 80042b6:	4311      	orrs	r1, r2
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	6892      	ldr	r2, [r2, #8]
 80042bc:	4311      	orrs	r1, r2
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	4311      	orrs	r1, r2
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	6912      	ldr	r2, [r2, #16]
 80042c8:	4311      	orrs	r1, r2
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	6952      	ldr	r2, [r2, #20]
 80042ce:	4311      	orrs	r1, r2
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	6992      	ldr	r2, [r2, #24]
 80042d4:	4311      	orrs	r1, r2
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	69d2      	ldr	r2, [r2, #28]
 80042da:	4311      	orrs	r1, r2
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	6a12      	ldr	r2, [r2, #32]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 0204 	bic.w	r2, r3, #4
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004304:	d105      	bne.n	8004312 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ffab 	bl	8004268 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	61da      	str	r2, [r3, #28]
  return status;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <LL_TIM_SetPrescaler>:
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_TIM_SetAutoReload>:
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_TIM_SetRepetitionCounter>:
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_TIM_OC_SetCompareCH1>:
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_TIM_OC_SetCompareCH2>:
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_TIM_OC_SetCompareCH3>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_TIM_OC_SetCompareCH4>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f043 0201 	orr.w	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	615a      	str	r2, [r3, #20]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3d      	ldr	r2, [pc, #244]	; (8004518 <LL_TIM_Init+0x108>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d00f      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <LL_TIM_Init+0x10c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a39      	ldr	r2, [pc, #228]	; (8004520 <LL_TIM_Init+0x110>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a38      	ldr	r2, [pc, #224]	; (8004524 <LL_TIM_Init+0x114>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a37      	ldr	r2, [pc, #220]	; (8004528 <LL_TIM_Init+0x118>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d106      	bne.n	800445e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <LL_TIM_Init+0x108>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d02b      	beq.n	80044be <LL_TIM_Init+0xae>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446c:	d027      	beq.n	80044be <LL_TIM_Init+0xae>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2a      	ldr	r2, [pc, #168]	; (800451c <LL_TIM_Init+0x10c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d023      	beq.n	80044be <LL_TIM_Init+0xae>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a29      	ldr	r2, [pc, #164]	; (8004520 <LL_TIM_Init+0x110>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01f      	beq.n	80044be <LL_TIM_Init+0xae>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a28      	ldr	r2, [pc, #160]	; (8004524 <LL_TIM_Init+0x114>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01b      	beq.n	80044be <LL_TIM_Init+0xae>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <LL_TIM_Init+0x118>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d017      	beq.n	80044be <LL_TIM_Init+0xae>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a26      	ldr	r2, [pc, #152]	; (800452c <LL_TIM_Init+0x11c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <LL_TIM_Init+0xae>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a25      	ldr	r2, [pc, #148]	; (8004530 <LL_TIM_Init+0x120>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00f      	beq.n	80044be <LL_TIM_Init+0xae>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a24      	ldr	r2, [pc, #144]	; (8004534 <LL_TIM_Init+0x124>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00b      	beq.n	80044be <LL_TIM_Init+0xae>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a23      	ldr	r2, [pc, #140]	; (8004538 <LL_TIM_Init+0x128>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d007      	beq.n	80044be <LL_TIM_Init+0xae>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <LL_TIM_Init+0x12c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <LL_TIM_Init+0xae>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a21      	ldr	r2, [pc, #132]	; (8004540 <LL_TIM_Init+0x130>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d106      	bne.n	80044cc <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ff35 	bl	8004348 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff21 	bl	800432c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	; (8004518 <LL_TIM_Init+0x108>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <LL_TIM_Init+0xea>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <LL_TIM_Init+0x118>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d105      	bne.n	8004506 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff2f 	bl	8004364 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff ff72 	bl	80043f0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800
 8004538:	40001800 	.word	0x40001800
 800453c:	40001c00 	.word	0x40001c00
 8004540:	40002000 	.word	0x40002000

08004544 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800455a:	d027      	beq.n	80045ac <LL_TIM_OC_Init+0x68>
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004562:	d82a      	bhi.n	80045ba <LL_TIM_OC_Init+0x76>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456a:	d018      	beq.n	800459e <LL_TIM_OC_Init+0x5a>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004572:	d822      	bhi.n	80045ba <LL_TIM_OC_Init+0x76>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d003      	beq.n	8004582 <LL_TIM_OC_Init+0x3e>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b10      	cmp	r3, #16
 800457e:	d007      	beq.n	8004590 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004580:	e01b      	b.n	80045ba <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f81f 	bl	80045c8 <OC1Config>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
      break;
 800458e:	e015      	b.n	80045bc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f884 	bl	80046a0 <OC2Config>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]
      break;
 800459c:	e00e      	b.n	80045bc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f8ed 	bl	8004780 <OC3Config>
 80045a6:	4603      	mov	r3, r0
 80045a8:	75fb      	strb	r3, [r7, #23]
      break;
 80045aa:	e007      	b.n	80045bc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f956 	bl	8004860 <OC4Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	75fb      	strb	r3, [r7, #23]
      break;
 80045b8:	e000      	b.n	80045bc <LL_TIM_OC_Init+0x78>
      break;
 80045ba:	bf00      	nop
  }

  return result;
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f023 0201 	bic.w	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 0202 	bic.w	r2, r3, #2
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <OC1Config+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d003      	beq.n	8004632 <OC1Config+0x6a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a1b      	ldr	r2, [pc, #108]	; (800469c <OC1Config+0xd4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d11e      	bne.n	8004670 <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0208 	bic.w	r2, r3, #8
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f023 0204 	bic.w	r2, r3, #4
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff fe7c 	bl	8004380 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40010000 	.word	0x40010000
 800469c:	40010400 	.word	0x40010400

080046a0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f023 0210 	bic.w	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0220 	bic.w	r2, r3, #32
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0210 	bic.w	r2, r3, #16
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <OC2Config+0xd8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <OC2Config+0x70>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a1c      	ldr	r2, [pc, #112]	; (800477c <OC2Config+0xdc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d11f      	bne.n	8004750 <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	019b      	lsls	r3, r3, #6
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	019b      	lsls	r3, r3, #6
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fe1a 	bl	800439c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40010000 	.word	0x40010000
 800477c:	40010400 	.word	0x40010400

08004780 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a1d      	ldr	r2, [pc, #116]	; (8004858 <OC3Config+0xd8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <OC3Config+0x6e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a1c      	ldr	r2, [pc, #112]	; (800485c <OC3Config+0xdc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d11f      	bne.n	800482e <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	029b      	lsls	r3, r3, #10
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	029b      	lsls	r3, r3, #10
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	015b      	lsls	r3, r3, #5
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff fdb9 	bl	80043b8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40010000 	.word	0x40010000
 800485c:	40010400 	.word	0x40010400

08004860 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	031b      	lsls	r3, r3, #12
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	031b      	lsls	r3, r3, #12
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a11      	ldr	r2, [pc, #68]	; (8004908 <OC4Config+0xa8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <OC4Config+0x70>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a10      	ldr	r2, [pc, #64]	; (800490c <OC4Config+0xac>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d107      	bne.n	80048e0 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	019b      	lsls	r3, r3, #6
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff fd6e 	bl	80043d4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40010000 	.word	0x40010000
 800490c:	40010400 	.word	0x40010400

08004910 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <LL_mDelay+0x48>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800491e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d00c      	beq.n	8004942 <LL_mDelay+0x32>
  {
    Delay++;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3301      	adds	r3, #1
 800492c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800492e:	e008      	b.n	8004942 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <LL_mDelay+0x48>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d002      	beq.n	8004942 <LL_mDelay+0x32>
    {
      Delay--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f3      	bne.n	8004930 <LL_mDelay+0x20>
    }
  }
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000e010 	.word	0xe000e010

0800495c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <LL_SetSystemCoreClock+0x1c>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6013      	str	r3, [r2, #0]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	200000a0 	.word	0x200000a0

0800497c <__libc_init_array>:
 800497c:	b570      	push	{r4, r5, r6, lr}
 800497e:	4d0d      	ldr	r5, [pc, #52]	; (80049b4 <__libc_init_array+0x38>)
 8004980:	4c0d      	ldr	r4, [pc, #52]	; (80049b8 <__libc_init_array+0x3c>)
 8004982:	1b64      	subs	r4, r4, r5
 8004984:	10a4      	asrs	r4, r4, #2
 8004986:	2600      	movs	r6, #0
 8004988:	42a6      	cmp	r6, r4
 800498a:	d109      	bne.n	80049a0 <__libc_init_array+0x24>
 800498c:	4d0b      	ldr	r5, [pc, #44]	; (80049bc <__libc_init_array+0x40>)
 800498e:	4c0c      	ldr	r4, [pc, #48]	; (80049c0 <__libc_init_array+0x44>)
 8004990:	f000 f864 	bl	8004a5c <_init>
 8004994:	1b64      	subs	r4, r4, r5
 8004996:	10a4      	asrs	r4, r4, #2
 8004998:	2600      	movs	r6, #0
 800499a:	42a6      	cmp	r6, r4
 800499c:	d105      	bne.n	80049aa <__libc_init_array+0x2e>
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a4:	4798      	blx	r3
 80049a6:	3601      	adds	r6, #1
 80049a8:	e7ee      	b.n	8004988 <__libc_init_array+0xc>
 80049aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ae:	4798      	blx	r3
 80049b0:	3601      	adds	r6, #1
 80049b2:	e7f2      	b.n	800499a <__libc_init_array+0x1e>
 80049b4:	080076d0 	.word	0x080076d0
 80049b8:	080076d0 	.word	0x080076d0
 80049bc:	080076d0 	.word	0x080076d0
 80049c0:	080076d4 	.word	0x080076d4

080049c4 <memset>:
 80049c4:	4402      	add	r2, r0
 80049c6:	4603      	mov	r3, r0
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d100      	bne.n	80049ce <memset+0xa>
 80049cc:	4770      	bx	lr
 80049ce:	f803 1b01 	strb.w	r1, [r3], #1
 80049d2:	e7f9      	b.n	80049c8 <memset+0x4>

080049d4 <__utoa>:
 80049d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d6:	4c1f      	ldr	r4, [pc, #124]	; (8004a54 <__utoa+0x80>)
 80049d8:	b08b      	sub	sp, #44	; 0x2c
 80049da:	4605      	mov	r5, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	466e      	mov	r6, sp
 80049e0:	f104 0c20 	add.w	ip, r4, #32
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	6861      	ldr	r1, [r4, #4]
 80049e8:	4637      	mov	r7, r6
 80049ea:	c703      	stmia	r7!, {r0, r1}
 80049ec:	3408      	adds	r4, #8
 80049ee:	4564      	cmp	r4, ip
 80049f0:	463e      	mov	r6, r7
 80049f2:	d1f7      	bne.n	80049e4 <__utoa+0x10>
 80049f4:	7921      	ldrb	r1, [r4, #4]
 80049f6:	7139      	strb	r1, [r7, #4]
 80049f8:	1e91      	subs	r1, r2, #2
 80049fa:	6820      	ldr	r0, [r4, #0]
 80049fc:	6038      	str	r0, [r7, #0]
 80049fe:	2922      	cmp	r1, #34	; 0x22
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	d904      	bls.n	8004a10 <__utoa+0x3c>
 8004a06:	7019      	strb	r1, [r3, #0]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	b00b      	add	sp, #44	; 0x2c
 8004a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a10:	1e58      	subs	r0, r3, #1
 8004a12:	4684      	mov	ip, r0
 8004a14:	fbb5 f7f2 	udiv	r7, r5, r2
 8004a18:	fb02 5617 	mls	r6, r2, r7, r5
 8004a1c:	3628      	adds	r6, #40	; 0x28
 8004a1e:	446e      	add	r6, sp
 8004a20:	460c      	mov	r4, r1
 8004a22:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004a26:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004a2a:	462e      	mov	r6, r5
 8004a2c:	42b2      	cmp	r2, r6
 8004a2e:	f101 0101 	add.w	r1, r1, #1
 8004a32:	463d      	mov	r5, r7
 8004a34:	d9ee      	bls.n	8004a14 <__utoa+0x40>
 8004a36:	2200      	movs	r2, #0
 8004a38:	545a      	strb	r2, [r3, r1]
 8004a3a:	1919      	adds	r1, r3, r4
 8004a3c:	1aa5      	subs	r5, r4, r2
 8004a3e:	42aa      	cmp	r2, r5
 8004a40:	dae3      	bge.n	8004a0a <__utoa+0x36>
 8004a42:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004a46:	780e      	ldrb	r6, [r1, #0]
 8004a48:	7006      	strb	r6, [r0, #0]
 8004a4a:	3201      	adds	r2, #1
 8004a4c:	f801 5901 	strb.w	r5, [r1], #-1
 8004a50:	e7f4      	b.n	8004a3c <__utoa+0x68>
 8004a52:	bf00      	nop
 8004a54:	080076a8 	.word	0x080076a8

08004a58 <utoa>:
 8004a58:	f7ff bfbc 	b.w	80049d4 <__utoa>

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr
